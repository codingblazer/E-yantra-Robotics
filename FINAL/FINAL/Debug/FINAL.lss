
FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006da2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000037  00800200  00800200  00006e16  2**0
                  ALLOC
  2 .stab         000033fc  00000000  00000000  00006e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009aa  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  0000abc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a595  00000000  00000000  0000ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003cc  00000000  00000000  000151f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002bf3  00000000  00000000  000155c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000674  00000000  00000000  000181b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000079c  00000000  00000000  00018828  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a013  00000000  00000000  00018fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_5>
      18:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <red_read>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e2 ea       	ldi	r30, 0xA2	; 162
     17e:	fd e6       	ldi	r31, 0x6D	; 109
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 30       	cpi	r26, 0x00	; 0
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a7 33       	cpi	r26, 0x37	; 55
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <main>
     1a4:	0c 94 cf 36 	jmp	0x6d9e	; 0x6d9e <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
     1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x8>
     288:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x01);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x0E);
     29c:	8e e0       	ldi	r24, 0x0E	; 14
     29e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x80);
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
		
}
     2a8:	08 95       	ret

000002aa <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2aa:	98 b1       	in	r25, 0x08	; 8
     2ac:	9f 70       	andi	r25, 0x0F	; 15
     2ae:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2b0:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2b2:	28 2f       	mov	r18, r24
     2b4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b6:	92 2b       	or	r25, r18
     2b8:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ba:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2be:	42 9a       	sbi	0x08, 2	; 8
     2c0:	ef ef       	ldi	r30, 0xFF	; 255
     2c2:	f7 e4       	ldi	r31, 0x47	; 71
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_wr_char+0x1a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_wr_char+0x20>
     2ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2cc:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ce:	98 b1       	in	r25, 0x08	; 8
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d4:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d6:	82 95       	swap	r24
     2d8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2da:	89 2b       	or	r24, r25
     2dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2de:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2e2:	42 9a       	sbi	0x08, 2	; 8
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	97 e4       	ldi	r25, 0x47	; 71
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_wr_char+0x3e>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_wr_char+0x44>
     2ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2f0:	42 98       	cbi	0x08, 2	; 8
}
     2f2:	08 95       	ret

000002f4 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
     2fa:	08 95       	ret

000002fc <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	while(*str != '\0')
     302:	88 81       	ld	r24, Y
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     308:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     30a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     30e:	89 91       	ld	r24, Y+
     310:	88 23       	and	r24, r24
     312:	d9 f7       	brne	.-10     	; 0x30a <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	79 f0       	breq	.+30     	; 0x33c <lcd_cursor+0x22>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	18 f4       	brcc	.+6      	; 0x328 <lcd_cursor+0xe>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	c9 f4       	brne	.+50     	; 0x358 <lcd_cursor+0x3e>
     326:	05 c0       	rjmp	.+10     	; 0x332 <lcd_cursor+0x18>
     328:	83 30       	cpi	r24, 0x03	; 3
     32a:	69 f0       	breq	.+26     	; 0x346 <lcd_cursor+0x2c>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	a1 f4       	brne	.+40     	; 0x358 <lcd_cursor+0x3e>
     330:	0f c0       	rjmp	.+30     	; 0x350 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     332:	86 2f       	mov	r24, r22
     334:	81 58       	subi	r24, 0x81	; 129
     336:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     33a:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     33c:	86 2f       	mov	r24, r22
     33e:	81 54       	subi	r24, 0x41	; 65
     340:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     344:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     346:	86 2f       	mov	r24, r22
     348:	8d 56       	subi	r24, 0x6D	; 109
     34a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     34e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     350:	86 2f       	mov	r24, r22
     352:	8d 52       	subi	r24, 0x2D	; 45
     354:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     358:	08 95       	ret

0000035a <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	8a 01       	movw	r16, r20
     364:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <lcd_print+0x14>
     36a:	66 23       	and	r22, r22
     36c:	19 f4       	brne	.+6      	; 0x374 <lcd_print+0x1a>
	{
		lcd_home();
     36e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_home>
     372:	02 c0       	rjmp	.+4      	; 0x378 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     374:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_cursor>
	}
	if(digits==5 || flag==1)
     378:	c5 30       	cpi	r28, 0x05	; 5
     37a:	d1 05       	cpc	r29, r1
     37c:	71 f4       	brne	.+28     	; 0x39a <lcd_print+0x40>
	{
		million=value/10000+48;
     37e:	c8 01       	movw	r24, r16
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	77 e2       	ldi	r23, 0x27	; 39
     384:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     388:	cb 01       	movw	r24, r22
     38a:	c0 96       	adiw	r24, 0x30	; 48
     38c:	90 93 19 02 	sts	0x0219, r25
     390:	80 93 18 02 	sts	0x0218, r24
		lcd_wr_char(million);
     394:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     39a:	c4 30       	cpi	r28, 0x04	; 4
     39c:	d1 05       	cpc	r29, r1
     39e:	b9 f4       	brne	.+46     	; 0x3ce <lcd_print+0x74>
	{
		temp = value/1000;
     3a0:	c8 01       	movw	r24, r16
     3a2:	68 ee       	ldi	r22, 0xE8	; 232
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     3aa:	cb 01       	movw	r24, r22
     3ac:	70 93 1d 02 	sts	0x021D, r23
     3b0:	60 93 1c 02 	sts	0x021C, r22
		thousand = temp%10 + 48;
     3b4:	6a e0       	ldi	r22, 0x0A	; 10
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     3bc:	c0 96       	adiw	r24, 0x30	; 48
     3be:	90 93 33 02 	sts	0x0233, r25
     3c2:	80 93 32 02 	sts	0x0232, r24
		lcd_wr_char(thousand);
     3c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3d0:	c3 30       	cpi	r28, 0x03	; 3
     3d2:	d1 05       	cpc	r29, r1
     3d4:	11 f0       	breq	.+4      	; 0x3da <lcd_print+0x80>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	b1 f4       	brne	.+44     	; 0x406 <lcd_print+0xac>
	{
		temp = value/100;
     3da:	c8 01       	movw	r24, r16
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     3e4:	cb 01       	movw	r24, r22
     3e6:	70 93 1d 02 	sts	0x021D, r23
     3ea:	60 93 1c 02 	sts	0x021C, r22
		hundred = temp%10 + 48;
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     3f6:	c0 96       	adiw	r24, 0x30	; 48
     3f8:	90 93 2e 02 	sts	0x022E, r25
     3fc:	80 93 2d 02 	sts	0x022D, r24
		lcd_wr_char(hundred);
     400:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     404:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     406:	c2 30       	cpi	r28, 0x02	; 2
     408:	d1 05       	cpc	r29, r1
     40a:	11 f0       	breq	.+4      	; 0x410 <lcd_print+0xb6>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	b1 f4       	brne	.+44     	; 0x43c <lcd_print+0xe2>
	{
		temp = value/10;
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c8 01       	movw	r24, r16
     416:	b9 01       	movw	r22, r18
     418:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     41c:	cb 01       	movw	r24, r22
     41e:	70 93 1d 02 	sts	0x021D, r23
     422:	60 93 1c 02 	sts	0x021C, r22
		tens = temp%10 + 48;
     426:	b9 01       	movw	r22, r18
     428:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 2b 02 	sts	0x022B, r25
     432:	80 93 2a 02 	sts	0x022A, r24
		lcd_wr_char(tens);
     436:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     43c:	c1 30       	cpi	r28, 0x01	; 1
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <lcd_print+0xec>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	61 f4       	brne	.+24     	; 0x45e <lcd_print+0x104>
	{
		unit = value%10 + 48;
     446:	c8 01       	movw	r24, r16
     448:	6a e0       	ldi	r22, 0x0A	; 10
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 bb 36 	call	0x6d76	; 0x6d76 <__udivmodhi4>
     450:	c0 96       	adiw	r24, 0x30	; 48
     452:	90 93 31 02 	sts	0x0231, r25
     456:	80 93 30 02 	sts	0x0230, r24
		lcd_wr_char(unit);
     45a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
	}
	if(digits>5)
     45e:	c6 30       	cpi	r28, 0x06	; 6
     460:	d1 05       	cpc	r29, r1
     462:	1c f0       	brlt	.+6      	; 0x46a <lcd_print+0x110>
	{
		lcd_wr_char('E');
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
	}
	
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <buzzer_pin_config>:
	volatile unsigned long int green;     // variable to store the pulse count when read_green function is called


void buzzer_pin_config (void)
	{
	 DDRC = DDRC | 0x08;    //Setting PORTC 3 as output
     474:	3b 9a       	sbi	0x07, 3	; 7
	 PORTC = PORTC & 0xF7;    //Setting PORTC 3 logic low to turnoff buzzer
     476:	43 98       	cbi	0x08, 3	; 8
	}
     478:	08 95       	ret

0000047a <servo1_pin_config>:

	//Configure PORTB 5 pin for servo motor 1 operation
	void servo1_pin_config (void)
	{
	 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     47a:	25 9a       	sbi	0x04, 5	; 4
	 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     47c:	2d 9a       	sbi	0x05, 5	; 5
	}
     47e:	08 95       	ret

00000480 <servo2_pin_config>:

	//Configure PORTB 6 pin for servo motor 2 operation
	void servo2_pin_config (void)
	{
	 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     480:	26 9a       	sbi	0x04, 6	; 4
	 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     482:	2e 9a       	sbi	0x05, 6	; 5
	}
     484:	08 95       	ret

00000486 <servo3_pin_config>:

	//Configure PORTB 7 pin for servo motor 3 operation
	void servo3_pin_config (void)
	{
	 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     486:	27 9a       	sbi	0x04, 7	; 4
	 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     488:	2f 9a       	sbi	0x05, 7	; 5
	}
     48a:	08 95       	ret

0000048c <color_sensor_pin_config>:
	void color_sensor_pin_config(void)
	{
	  DDRD  = DDRD | 0xFE; //set PD0 as input for color sensor output
     48c:	8a b1       	in	r24, 0x0a	; 10
     48e:	8e 6f       	ori	r24, 0xFE	; 254
     490:	8a b9       	out	0x0a, r24	; 10
	  PORTD = PORTD | 0x01;//Enable internal pull-up for PORTD 0 pin
     492:	58 9a       	sbi	0x0b, 0	; 11
	}
     494:	08 95       	ret

00000496 <left_encoder_pin_config>:
	unsigned char Center_white_line = 0;
	unsigned char Right_white_line = 0;

	void left_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     496:	6c 98       	cbi	0x0d, 4	; 13
		PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     498:	74 9a       	sbi	0x0e, 4	; 14
	}
     49a:	08 95       	ret

0000049c <right_encoder_pin_config>:

	//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
	void right_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     49c:	6d 98       	cbi	0x0d, 5	; 13
		PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     49e:	75 9a       	sbi	0x0e, 5	; 14
	}
     4a0:	08 95       	ret

000004a2 <lcd_port_config>:


	//Function to configure LCD port
	void lcd_port_config (void)
	{
	 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     4a2:	87 b1       	in	r24, 0x07	; 7
     4a4:	87 6f       	ori	r24, 0xF7	; 247
     4a6:	87 b9       	out	0x07, r24	; 7
	 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     4a8:	88 b1       	in	r24, 0x08	; 8
     4aa:	80 78       	andi	r24, 0x80	; 128
     4ac:	88 b9       	out	0x08, r24	; 8
	}
     4ae:	08 95       	ret

000004b0 <adc_pin_config>:

	//ADC pin configuration
	void adc_pin_config (void)
	{
	 DDRF = 0x00;
     4b0:	10 ba       	out	0x10, r1	; 16
	 PORTF = 0x00;
     4b2:	11 ba       	out	0x11, r1	; 17
	 DDRK = 0x00;
     4b4:	10 92 07 01 	sts	0x0107, r1
	 PORTK = 0x00;
     4b8:	10 92 08 01 	sts	0x0108, r1
	}
     4bc:	08 95       	ret

000004be <motion_pin_config>:

	//Function to configure ports to enable robot's motion
	void motion_pin_config (void)
	{
	 DDRA = DDRA | 0x0F;
     4be:	81 b1       	in	r24, 0x01	; 1
     4c0:	8f 60       	ori	r24, 0x0F	; 15
     4c2:	81 b9       	out	0x01, r24	; 1
	 PORTA = PORTA & 0xF0;
     4c4:	82 b1       	in	r24, 0x02	; 2
     4c6:	80 7f       	andi	r24, 0xF0	; 240
     4c8:	82 b9       	out	0x02, r24	; 2
	 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     4ca:	ea e0       	ldi	r30, 0x0A	; 10
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	80 81       	ld	r24, Z
     4d0:	88 61       	ori	r24, 0x18	; 24
     4d2:	80 83       	st	Z, r24
	 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     4d4:	eb e0       	ldi	r30, 0x0B	; 11
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	80 81       	ld	r24, Z
     4da:	88 61       	ori	r24, 0x18	; 24
     4dc:	80 83       	st	Z, r24
	}
     4de:	08 95       	ret

000004e0 <__vector_1>:
	//ISR for color sensor
	ISR(INT0_vect)
	{
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
	  pulse++; //increment on receiving pulse from the color sensor
     4f2:	80 91 04 02 	lds	r24, 0x0204
     4f6:	90 91 05 02 	lds	r25, 0x0205
     4fa:	a0 91 06 02 	lds	r26, 0x0206
     4fe:	b0 91 07 02 	lds	r27, 0x0207
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	a1 1d       	adc	r26, r1
     506:	b1 1d       	adc	r27, r1
     508:	80 93 04 02 	sts	0x0204, r24
     50c:	90 93 05 02 	sts	0x0205, r25
     510:	a0 93 06 02 	sts	0x0206, r26
     514:	b0 93 07 02 	sts	0x0207, r27
	}
     518:	bf 91       	pop	r27
     51a:	af 91       	pop	r26
     51c:	9f 91       	pop	r25
     51e:	8f 91       	pop	r24
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <port_init>:

	//Function to Initialize PORTS
	void port_init()
	{
		buzzer_pin_config();
     52a:	0e 94 3a 02 	call	0x474	; 0x474 <buzzer_pin_config>
		servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     52e:	0e 94 3d 02 	call	0x47a	; 0x47a <servo1_pin_config>
	 	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     532:	0e 94 40 02 	call	0x480	; 0x480 <servo2_pin_config>
	 	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
     536:	0e 94 43 02 	call	0x486	; 0x486 <servo3_pin_config>
		color_sensor_pin_config();  //color sensor pin configuration
     53a:	0e 94 46 02 	call	0x48c	; 0x48c <color_sensor_pin_config>
	  	lcd_port_config();
     53e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <lcd_port_config>
		adc_pin_config();
     542:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_pin_config>
		motion_pin_config();
     546:	0e 94 5f 02 	call	0x4be	; 0x4be <motion_pin_config>
		left_encoder_pin_config(); //left encoder pin config
     54a:	0e 94 4b 02 	call	0x496	; 0x496 <left_encoder_pin_config>
		right_encoder_pin_config(); //right encoder pin config
     54e:	0e 94 4e 02 	call	0x49c	; 0x49c <right_encoder_pin_config>
	}
     552:	08 95       	ret

00000554 <left_position_encoder_interrupt_init>:
	void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
	{
		cli(); //Clears the global interrupt
     554:	f8 94       	cli
		EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     556:	ea e6       	ldi	r30, 0x6A	; 106
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	82 60       	ori	r24, 0x02	; 2
     55e:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     560:	ec 9a       	sbi	0x1d, 4	; 29
		sei();   // Enables the global interrupt
     562:	78 94       	sei
	}
     564:	08 95       	ret

00000566 <right_position_encoder_interrupt_init>:

	void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
	{
		cli(); //Clears the global interrupt
     566:	f8 94       	cli
		EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     568:	ea e6       	ldi	r30, 0x6A	; 106
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	88 60       	ori	r24, 0x08	; 8
     570:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     572:	ed 9a       	sbi	0x1d, 5	; 29
		sei();   // Enables the global interrupt
     574:	78 94       	sei
	}
     576:	08 95       	ret

00000578 <__vector_6>:
	ISR(INT5_vect)
	{
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
     586:	af 93       	push	r26
     588:	bf 93       	push	r27
		ShaftCountRight++;  //increment right shaft position count
     58a:	80 91 08 02 	lds	r24, 0x0208
     58e:	90 91 09 02 	lds	r25, 0x0209
     592:	a0 91 0a 02 	lds	r26, 0x020A
     596:	b0 91 0b 02 	lds	r27, 0x020B
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	a1 1d       	adc	r26, r1
     59e:	b1 1d       	adc	r27, r1
     5a0:	80 93 08 02 	sts	0x0208, r24
     5a4:	90 93 09 02 	sts	0x0209, r25
     5a8:	a0 93 0a 02 	sts	0x020A, r26
     5ac:	b0 93 0b 02 	sts	0x020B, r27
	}
     5b0:	bf 91       	pop	r27
     5b2:	af 91       	pop	r26
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <__vector_5>:


	//ISR for left position encoder
	ISR(INT4_vect)
	{
     5c2:	1f 92       	push	r1
     5c4:	0f 92       	push	r0
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	0f 92       	push	r0
     5ca:	11 24       	eor	r1, r1
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
     5d0:	af 93       	push	r26
     5d2:	bf 93       	push	r27
		ShaftCountLeft++;  //increment left shaft position count
     5d4:	80 91 0c 02 	lds	r24, 0x020C
     5d8:	90 91 0d 02 	lds	r25, 0x020D
     5dc:	a0 91 0e 02 	lds	r26, 0x020E
     5e0:	b0 91 0f 02 	lds	r27, 0x020F
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	a1 1d       	adc	r26, r1
     5e8:	b1 1d       	adc	r27, r1
     5ea:	80 93 0c 02 	sts	0x020C, r24
     5ee:	90 93 0d 02 	sts	0x020D, r25
     5f2:	a0 93 0e 02 	sts	0x020E, r26
     5f6:	b0 93 0f 02 	sts	0x020F, r27
	}
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <timer5_init>:
	// Pre-scale:256
	// PWM 8bit fast, TOP=0x00FF
	// Timer Frequency:225.000Hz
	void timer5_init()
	{
		TCCR5B = 0x00;	//Stop
     60c:	e1 e2       	ldi	r30, 0x21	; 33
     60e:	f1 e0       	ldi	r31, 0x01	; 1
     610:	10 82       	st	Z, r1
		TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	80 93 25 01 	sts	0x0125, r24
		TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	90 93 24 01 	sts	0x0124, r25
		OCR5AH = 0x00;	//Output compare register high value for Left Motor
     61e:	10 92 29 01 	sts	0x0129, r1
		OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     622:	80 93 28 01 	sts	0x0128, r24
		OCR5BH = 0x00;	//Output compare register high value for Right Motor
     626:	10 92 2b 01 	sts	0x012B, r1
		OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     62a:	80 93 2a 01 	sts	0x012A, r24
		OCR5CH = 0x00;	//Output compare register high value for Motor C1
     62e:	10 92 2d 01 	sts	0x012D, r1
		OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     632:	80 93 2c 01 	sts	0x012C, r24
		TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     636:	89 ea       	ldi	r24, 0xA9	; 169
     638:	80 93 20 01 	sts	0x0120, r24
	 					  For Overriding normal port functionality to OCRnA outputs.
					  	  {WGM51=0, WGM80=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

		TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     63c:	8b e0       	ldi	r24, 0x0B	; 11
     63e:	80 83       	st	Z, r24
	}
     640:	08 95       	ret

00000642 <timer1_init>:
	void timer1_init(void)
	{
	 TCCR1B = 0x00; //stop
     642:	e1 e8       	ldi	r30, 0x81	; 129
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	10 82       	st	Z, r1
	 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     648:	8c ef       	ldi	r24, 0xFC	; 252
     64a:	80 93 85 00 	sts	0x0085, r24
	 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 84 00 	sts	0x0084, r24
	 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	90 93 89 00 	sts	0x0089, r25
	 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	80 93 88 00 	sts	0x0088, r24
	 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     660:	90 93 8b 00 	sts	0x008B, r25
	 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     664:	80 93 8a 00 	sts	0x008A, r24
	 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     668:	90 93 8d 00 	sts	0x008D, r25
	 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     66c:	80 93 8c 00 	sts	0x008C, r24
	 ICR1H  = 0x03;
     670:	90 93 87 00 	sts	0x0087, r25
	 ICR1L  = 0xFF;
     674:	80 93 86 00 	sts	0x0086, r24
	 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     678:	8b ea       	ldi	r24, 0xAB	; 171
     67a:	80 93 80 00 	sts	0x0080, r24
	 					For Overriding normal port functionality to OCRnA outputs.
					  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
	 TCCR1C = 0x00;
     67e:	10 92 82 00 	sts	0x0082, r1
	 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     682:	8c e0       	ldi	r24, 0x0C	; 12
     684:	80 83       	st	Z, r24
	}
     686:	08 95       	ret

00000688 <adc_init>:


	void adc_init()
	{
		ADCSRA = 0x00;
     688:	ea e7       	ldi	r30, 0x7A	; 122
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	10 82       	st	Z, r1
		ADCSRB = 0x00;		//MUX5 = 0
     68e:	10 92 7b 00 	sts	0x007B, r1
		ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     692:	80 e2       	ldi	r24, 0x20	; 32
     694:	80 93 7c 00 	sts	0x007C, r24
		ACSR = 0x80;
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	80 bf       	out	0x30, r24	; 48
		ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     69c:	86 e8       	ldi	r24, 0x86	; 134
     69e:	80 83       	st	Z, r24
	}
     6a0:	08 95       	ret

000006a2 <ADC_Conversion>:

	//Function For ADC Conversion
	unsigned char ADC_Conversion(unsigned char Ch)
	{
		unsigned char a;
		if(Ch>7)
     6a2:	88 30       	cpi	r24, 0x08	; 8
     6a4:	18 f0       	brcs	.+6      	; 0x6ac <ADC_Conversion+0xa>
		{
			ADCSRB = 0x08;
     6a6:	98 e0       	ldi	r25, 0x08	; 8
     6a8:	90 93 7b 00 	sts	0x007B, r25
		}
		Ch = Ch & 0x07;
     6ac:	87 70       	andi	r24, 0x07	; 7
		ADMUX= 0x20| Ch;
     6ae:	80 62       	ori	r24, 0x20	; 32
     6b0:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     6b4:	ea e7       	ldi	r30, 0x7A	; 122
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	80 64       	ori	r24, 0x40	; 64
     6bc:	80 83       	st	Z, r24
		while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     6be:	80 81       	ld	r24, Z
     6c0:	84 ff       	sbrs	r24, 4
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <ADC_Conversion+0x1c>
		a=ADCH;
     6c4:	80 91 79 00 	lds	r24, 0x0079
		ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     6c8:	ea e7       	ldi	r30, 0x7A	; 122
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	90 81       	ld	r25, Z
     6ce:	90 61       	ori	r25, 0x10	; 16
     6d0:	90 83       	st	Z, r25
		ADCSRB = 0x00;
     6d2:	10 92 7b 00 	sts	0x007B, r1
		return a;
	}
     6d6:	08 95       	ret

000006d8 <print_sensor>:

	//Function To Print Sensor Values At Desired Row And Column Location on LCD
	void print_sensor(char row, char coloumn,unsigned char channel)
	{
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	d8 2f       	mov	r29, r24
     6de:	c6 2f       	mov	r28, r22
     6e0:	84 2f       	mov	r24, r20

		ADC_Value = ADC_Conversion(channel);
     6e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     6e6:	48 2f       	mov	r20, r24
     6e8:	80 93 28 02 	sts	0x0228, r24
		lcd_print(row, coloumn, ADC_Value, 3);
     6ec:	8d 2f       	mov	r24, r29
     6ee:	6c 2f       	mov	r22, r28
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	23 e0       	ldi	r18, 0x03	; 3
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
	}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <Sharp_GP2D12_estimation>:
	// This Function calculates the actual distance in millimeters(mm) from the input
	// analog value of Sharp Sensor.
	unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
	{
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
		float distance;
		unsigned int distanceInt;
		distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     704:	68 2f       	mov	r22, r24
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 65 34 	call	0x68ca	; 0x68ca <__floatunsisf>
     710:	2f ee       	ldi	r18, 0xEF	; 239
     712:	39 ec       	ldi	r19, 0xC9	; 201
     714:	43 e9       	ldi	r20, 0x93	; 147
     716:	5f e3       	ldi	r21, 0x3F	; 63
     718:	0e 94 56 35 	call	0x6aac	; 0x6aac <pow>
     71c:	b6 2f       	mov	r27, r22
     71e:	a7 2f       	mov	r26, r23
     720:	38 2f       	mov	r19, r24
     722:	29 2f       	mov	r18, r25
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e8       	ldi	r24, 0x80	; 128
     72a:	9f e3       	ldi	r25, 0x3F	; 63
     72c:	42 2f       	mov	r20, r18
     72e:	0b 2f       	mov	r16, r27
     730:	1a 2f       	mov	r17, r26
     732:	23 2f       	mov	r18, r19
     734:	34 2f       	mov	r19, r20
     736:	a9 01       	movw	r20, r18
     738:	98 01       	movw	r18, r16
     73a:	0e 94 cc 33 	call	0x6798	; 0x6798 <__divsf3>
     73e:	2a e9       	ldi	r18, 0x9A	; 154
     740:	39 ef       	ldi	r19, 0xF9	; 249
     742:	4e e2       	ldi	r20, 0x2E	; 46
     744:	55 e4       	ldi	r21, 0x45	; 69
     746:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__mulsf3>
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	40 e2       	ldi	r20, 0x20	; 32
     750:	51 e4       	ldi	r21, 0x41	; 65
     752:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <__mulsf3>
     756:	0e 94 34 34 	call	0x6868	; 0x6868 <__fixsfsi>
     75a:	88 27       	eor	r24, r24
     75c:	77 fd       	sbrc	r23, 7
     75e:	80 95       	com	r24
     760:	98 2f       	mov	r25, r24
     762:	0e 94 67 34 	call	0x68ce	; 0x68ce <__floatsisf>
		distanceInt = (int)distance;
     766:	0e 94 34 34 	call	0x6868	; 0x6868 <__fixsfsi>
		if(distanceInt>800)
		{
			distanceInt=800;
		}
		return distanceInt;
     76a:	86 2f       	mov	r24, r22
     76c:	97 2f       	mov	r25, r23
     76e:	23 e0       	ldi	r18, 0x03	; 3
     770:	81 32       	cpi	r24, 0x21	; 33
     772:	92 07       	cpc	r25, r18
     774:	10 f0       	brcs	.+4      	; 0x77a <Sharp_GP2D12_estimation+0x7a>
     776:	80 e2       	ldi	r24, 0x20	; 32
     778:	93 e0       	ldi	r25, 0x03	; 3
	}
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <color_sensor_pin_interrupt_init>:

	void color_sensor_pin_interrupt_init(void) //Interrupt 0 enable
	{
	  cli(); //Clears the global interrupt
     780:	f8 94       	cli
	  EICRA = EICRA | 0x02; // INT0 is set to trigger with falling edge
     782:	e9 e6       	ldi	r30, 0x69	; 105
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	82 60       	ori	r24, 0x02	; 2
     78a:	80 83       	st	Z, r24
	  EIMSK = EIMSK | 0x01; // Enable Interrupt INT0 for color sensor
     78c:	e8 9a       	sbi	0x1d, 0	; 29
	  sei(); // Enables the global interrupt
     78e:	78 94       	sei
	}
     790:	08 95       	ret

00000792 <velocity>:

	//Function for velocity control
	void velocity (unsigned char left_motor, unsigned char right_motor)
	{
		OCR5AL = (unsigned char)left_motor;
     792:	80 93 28 01 	sts	0x0128, r24
		OCR5BL = (unsigned char)right_motor;
     796:	60 93 2a 01 	sts	0x012A, r22
	}
     79a:	08 95       	ret

0000079c <motion_set>:
	void motion_set (unsigned char Direction)
	{
	 unsigned char PortARestore = 0;

	 Direction &= 0x0F; 		// removing upper nibbel for the protection
	 PortARestore = PORTA; 		// reading the PORTA original status
     79c:	92 b1       	in	r25, 0x02	; 2
	 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     79e:	90 7f       	andi	r25, 0xF0	; 240
	//Function used for setting motor's direction
	void motion_set (unsigned char Direction)
	{
	 unsigned char PortARestore = 0;

	 Direction &= 0x0F; 		// removing upper nibbel for the protection
     7a0:	8f 70       	andi	r24, 0x0F	; 15
	 PortARestore = PORTA; 		// reading the PORTA original status
	 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7a2:	98 2b       	or	r25, r24
	 PORTA = PortARestore; 		// executing the command
     7a4:	92 b9       	out	0x02, r25	; 2
	}
     7a6:	08 95       	ret

000007a8 <soft_right_2>:
	 motion_set(0x01);
	}

	void soft_right_2 (void) //Left wheel stationary, Right wheel backward
	{
	 motion_set(0x08);
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     7ae:	08 95       	ret

000007b0 <soft_left_2>:
	 motion_set(0x02);
	}

	void soft_left_2 (void) //Left wheel backward, right wheel stationary
	{
	 motion_set(0x01);
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     7b6:	08 95       	ret

000007b8 <soft_right>:
	 motion_set(0x04);
	}

	void soft_right (void) //Left wheel forward, Right wheel is stationary
	{
	 motion_set(0x02);
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     7be:	08 95       	ret

000007c0 <soft_left>:
	  motion_set(0x0A);
	}

	void soft_left (void) //Left wheel stationary, Right wheel forward
	{
	 motion_set(0x04);
     7c0:	84 e0       	ldi	r24, 0x04	; 4
     7c2:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     7c6:	08 95       	ret

000007c8 <right>:
	  motion_set(0x05);
	}

	void right (void) //Left wheel forward, Right wheel backward
	{
	  motion_set(0x0A);
     7c8:	8a e0       	ldi	r24, 0x0A	; 10
     7ca:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     7ce:	08 95       	ret

000007d0 <left>:
	  motion_set (0x00);
	}

	void left (void) //Left wheel backward, Right wheel forward
	{
	  motion_set(0x05);
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     7d6:	08 95       	ret

000007d8 <stop>:
	  motion_set(0x09);
	}

	void stop (void)
	{
	  motion_set (0x00);
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     7de:	08 95       	ret

000007e0 <angle_rotate>:
	 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	 PORTA = PortARestore; 		// executing the command
	}
	void angle_rotate(unsigned int Degrees)
	{
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;

		ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     7e6:	bc 01       	movw	r22, r24
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 65 34 	call	0x68ca	; 0x68ca <__floatunsisf>
     7f0:	28 e4       	ldi	r18, 0x48	; 72
     7f2:	31 ee       	ldi	r19, 0xE1	; 225
     7f4:	42 e8       	ldi	r20, 0x82	; 130
     7f6:	50 e4       	ldi	r21, 0x40	; 64
     7f8:	0e 94 cc 33 	call	0x6798	; 0x6798 <__divsf3>
		ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     7fc:	0e 94 39 34 	call	0x6872	; 0x6872 <__fixunssfsi>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	a0 e0       	ldi	r26, 0x00	; 0
     806:	b0 e0       	ldi	r27, 0x00	; 0
		ShaftCountRight = 0;
     808:	10 92 08 02 	sts	0x0208, r1
     80c:	10 92 09 02 	sts	0x0209, r1
     810:	10 92 0a 02 	sts	0x020A, r1
     814:	10 92 0b 02 	sts	0x020B, r1
		ShaftCountLeft = 0;
     818:	10 92 0c 02 	sts	0x020C, r1
     81c:	10 92 0d 02 	sts	0x020D, r1
     820:	10 92 0e 02 	sts	0x020E, r1
     824:	10 92 0f 02 	sts	0x020F, r1

		while (1)
		{
			if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	40 91 08 02 	lds	r20, 0x0208
     830:	50 91 09 02 	lds	r21, 0x0209
     834:	60 91 0a 02 	lds	r22, 0x020A
     838:	70 91 0b 02 	lds	r23, 0x020B
     83c:	00 91 0c 02 	lds	r16, 0x020C
     840:	10 91 0d 02 	lds	r17, 0x020D
     844:	20 91 0e 02 	lds	r18, 0x020E
     848:	30 91 0f 02 	lds	r19, 0x020F
     84c:	ef 2f       	mov	r30, r31
     84e:	48 17       	cp	r20, r24
     850:	59 07       	cpc	r21, r25
     852:	6a 07       	cpc	r22, r26
     854:	7b 07       	cpc	r23, r27
     856:	08 f4       	brcc	.+2      	; 0x85a <angle_rotate+0x7a>
     858:	ec 2f       	mov	r30, r28
     85a:	ee 23       	and	r30, r30
     85c:	49 f4       	brne	.+18     	; 0x870 <angle_rotate+0x90>
     85e:	4f 2f       	mov	r20, r31
     860:	08 17       	cp	r16, r24
     862:	19 07       	cpc	r17, r25
     864:	2a 07       	cpc	r18, r26
     866:	3b 07       	cpc	r19, r27
     868:	08 f4       	brcc	.+2      	; 0x86c <angle_rotate+0x8c>
     86a:	4c 2f       	mov	r20, r28
     86c:	44 23       	and	r20, r20
     86e:	f1 f2       	breq	.-68     	; 0x82c <angle_rotate+0x4c>
			break;
		}
		stop(); //Stop robot
     870:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
	}
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <left_degrees>:
	void left_degrees(unsigned int Degrees)
	{
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		left(); //Turn left
     882:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <left>
		angle_rotate(Degrees);
     886:	ce 01       	movw	r24, r28
     888:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <angle_rotate>
	}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <right_degrees>:



	void right_degrees(unsigned int Degrees)
	{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ec 01       	movw	r28, r24
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		right(); //Turn right
     898:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <right>
		angle_rotate(Degrees);
     89c:	ce 01       	movw	r24, r28
     89e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <angle_rotate>
	}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <soft_left_degrees>:


	void soft_left_degrees(unsigned int Degrees)
	{
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_left(); //Turn soft left
     8ae:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <soft_left>
		Degrees=Degrees*2;
		angle_rotate(Degrees);
     8b2:	ce 01       	movw	r24, r28
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <angle_rotate>
	}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <soft_right_degrees>:

	void soft_right_degrees(unsigned int Degrees)
	{
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ec 01       	movw	r28, r24
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_right();  //Turn soft right
     8c8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <soft_right>
		Degrees=Degrees*2;
		angle_rotate(Degrees);
     8cc:	ce 01       	movw	r24, r28
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <angle_rotate>
	}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <soft_left_2_degrees>:

	void soft_left_2_degrees(unsigned int Degrees)
	{
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ec 01       	movw	r28, r24
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_left_2(); //Turn reverse soft left
     8e2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <soft_left_2>
		Degrees=Degrees*2;
		angle_rotate(Degrees);
     8e6:	ce 01       	movw	r24, r28
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <angle_rotate>
	}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <soft_right_2_degrees>:

	void soft_right_2_degrees(unsigned int Degrees)
	{
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	ec 01       	movw	r28, r24
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_right_2();  //Turn reverse soft right
     8fc:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <soft_right_2>
		Degrees=Degrees*2;
		angle_rotate(Degrees);
     900:	ce 01       	movw	r24, r28
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <angle_rotate>
	}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <forward>:


	void forward (void)
	{
	  motion_set (0x06);
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     916:	08 95       	ret

00000918 <back>:

	void back (void) //both wheels backward
	{
	  motion_set(0x09);
     918:	89 e0       	ldi	r24, 0x09	; 9
     91a:	0e 94 ce 03 	call	0x79c	; 0x79c <motion_set>
	}
     91e:	08 95       	ret

00000920 <init_devices>:
	 motion_set(0x08);
	}

	void init_devices (void)
	{
	 	cli(); //Clears the global interrupts
     920:	f8 94       	cli
		port_init();
     922:	0e 94 95 02 	call	0x52a	; 0x52a <port_init>
		adc_init();
     926:	0e 94 44 03 	call	0x688	; 0x688 <adc_init>
		timer5_init();
     92a:	0e 94 06 03 	call	0x60c	; 0x60c <timer5_init>
		left_position_encoder_interrupt_init();
     92e:	0e 94 aa 02 	call	0x554	; 0x554 <left_position_encoder_interrupt_init>
		right_position_encoder_interrupt_init();
     932:	0e 94 b3 02 	call	0x566	; 0x566 <right_position_encoder_interrupt_init>
		color_sensor_pin_interrupt_init();
     936:	0e 94 c0 03 	call	0x780	; 0x780 <color_sensor_pin_interrupt_init>
		timer1_init();
     93a:	0e 94 21 03 	call	0x642	; 0x642 <timer1_init>
		sei();   //Enables the global interrupts
     93e:	78 94       	sei
	}
     940:	08 95       	ret

00000942 <filter_red>:

	//Filter Selection
	void filter_red(void)    //Used to select red filter
	{
	  //Filter Select - red filter
	  PORTD = PORTD & 0xBF; //set S2 low
     942:	5e 98       	cbi	0x0b, 6	; 11
	  PORTD = PORTD & 0x7F; //set S3 low
     944:	5f 98       	cbi	0x0b, 7	; 11
	}
     946:	08 95       	ret

00000948 <filter_green>:

	void filter_green(void) //Used to select green filter
	{
	  //Filter Select - green filter
	  PORTD = PORTD | 0x40; //set S2 High
     948:	5e 9a       	sbi	0x0b, 6	; 11
	  PORTD = PORTD | 0x80; //set S3 High
     94a:	5f 9a       	sbi	0x0b, 7	; 11
	}
     94c:	08 95       	ret

0000094e <filter_blue>:

	void filter_blue(void)  //Used to select blue filter
	{
	  //Filter Select - blue filter
	  PORTD = PORTD & 0xBF; //set S2 low
     94e:	5e 98       	cbi	0x0b, 6	; 11
	  PORTD = PORTD | 0x80; //set S3 High
     950:	5f 9a       	sbi	0x0b, 7	; 11
	}
     952:	08 95       	ret

00000954 <filter_clear>:

	void filter_clear(void) //select no filter
	{
	  //Filter Select - no filter
	  PORTD = PORTD | 0x40; //set S2 High
     954:	5e 9a       	sbi	0x0b, 6	; 11
	  PORTD = PORTD & 0x7F; //set S3 Low
     956:	5f 98       	cbi	0x0b, 7	; 11
	}
     958:	08 95       	ret

0000095a <color_sensor_scaling>:

	void color_sensor_scaling()
	{
	  //Output Scaling 20% from datasheet though it can be changed by refering to datasheet
	  //PORTD = PORTD & 0xEF;
	  PORTD = PORTD | 0x10; //set S0 high
     95a:	5c 9a       	sbi	0x0b, 4	; 11
	  //PORTD = PORTD & 0xDF; //set S1 low
	  PORTD = PORTD | 0x20; //set S1 high
     95c:	5d 9a       	sbi	0x0b, 5	; 11
	}
     95e:	08 95       	ret

00000960 <red_read>:
	 */

	void red_read(void)
	{
	  //Red
	  filter_red(); //select red filter
     960:	0e 94 a1 04 	call	0x942	; 0x942 <filter_red>
	  pulse=0; //reset the count to 0
     964:	10 92 04 02 	sts	0x0204, r1
     968:	10 92 05 02 	sts	0x0205, r1
     96c:	10 92 06 02 	sts	0x0206, r1
     970:	10 92 07 02 	sts	0x0207, r1
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	9f e7       	ldi	r25, 0x7F	; 127
     978:	a4 e0       	ldi	r26, 0x04	; 4
     97a:	81 50       	subi	r24, 0x01	; 1
     97c:	90 40       	sbci	r25, 0x00	; 0
     97e:	a0 40       	sbci	r26, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <red_read+0x1a>
     982:	00 c0       	rjmp	.+0      	; 0x984 <red_read+0x24>
     984:	00 00       	nop
	  _delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	  red = pulse;  //store the count in variable called red
     986:	80 91 04 02 	lds	r24, 0x0204
     98a:	90 91 05 02 	lds	r25, 0x0205
     98e:	a0 91 06 02 	lds	r26, 0x0206
     992:	b0 91 07 02 	lds	r27, 0x0207
     996:	80 93 24 02 	sts	0x0224, r24
     99a:	90 93 25 02 	sts	0x0225, r25
     99e:	a0 93 26 02 	sts	0x0226, r26
     9a2:	b0 93 27 02 	sts	0x0227, r27
	  }
     9a6:	08 95       	ret

000009a8 <green_read>:
	 *
	 */
	void green_read(void)
	{
	  //Green
	  filter_green(); //select green filter
     9a8:	0e 94 a4 04 	call	0x948	; 0x948 <filter_green>
	  pulse=0; //reset the count to 0
     9ac:	10 92 04 02 	sts	0x0204, r1
     9b0:	10 92 05 02 	sts	0x0205, r1
     9b4:	10 92 06 02 	sts	0x0206, r1
     9b8:	10 92 07 02 	sts	0x0207, r1
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	9f e7       	ldi	r25, 0x7F	; 127
     9c0:	a4 e0       	ldi	r26, 0x04	; 4
     9c2:	81 50       	subi	r24, 0x01	; 1
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	a0 40       	sbci	r26, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <green_read+0x1a>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <green_read+0x24>
     9cc:	00 00       	nop
	  _delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	  green = pulse;  //store the count in variable called green
     9ce:	80 91 04 02 	lds	r24, 0x0204
     9d2:	90 91 05 02 	lds	r25, 0x0205
     9d6:	a0 91 06 02 	lds	r26, 0x0206
     9da:	b0 91 07 02 	lds	r27, 0x0207
     9de:	80 93 1f 02 	sts	0x021F, r24
     9e2:	90 93 20 02 	sts	0x0220, r25
     9e6:	a0 93 21 02 	sts	0x0221, r26
     9ea:	b0 93 22 02 	sts	0x0222, r27
	   //Clear the LCD
	}
     9ee:	08 95       	ret

000009f0 <blue_read>:
	 */

	void blue_read(void)
	{
	  //Blue
	  filter_blue(); //select blue filter
     9f0:	0e 94 a7 04 	call	0x94e	; 0x94e <filter_blue>
	  pulse=0; //reset the count to 0
     9f4:	10 92 04 02 	sts	0x0204, r1
     9f8:	10 92 05 02 	sts	0x0205, r1
     9fc:	10 92 06 02 	sts	0x0206, r1
     a00:	10 92 07 02 	sts	0x0207, r1
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f e7       	ldi	r25, 0x7F	; 127
     a08:	a4 e0       	ldi	r26, 0x04	; 4
     a0a:	81 50       	subi	r24, 0x01	; 1
     a0c:	90 40       	sbci	r25, 0x00	; 0
     a0e:	a0 40       	sbci	r26, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <blue_read+0x1a>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <blue_read+0x24>
     a14:	00 00       	nop
	  _delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	  blue = pulse;  //store the count in variable called blue
     a16:	80 91 04 02 	lds	r24, 0x0204
     a1a:	90 91 05 02 	lds	r25, 0x0205
     a1e:	a0 91 06 02 	lds	r26, 0x0206
     a22:	b0 91 07 02 	lds	r27, 0x0207
     a26:	80 93 11 02 	sts	0x0211, r24
     a2a:	90 93 12 02 	sts	0x0212, r25
     a2e:	a0 93 13 02 	sts	0x0213, r26
     a32:	b0 93 14 02 	sts	0x0214, r27
	  //Clear the LCD
	}
     a36:	08 95       	ret

00000a38 <check_color>:
	 * Example Call: check_color();
	 */
	char check_color(void)
	{

         red_read();
     a38:	0e 94 b0 04 	call	0x960	; 0x960 <red_read>
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	ac e2       	ldi	r26, 0x2C	; 44
     a42:	81 50       	subi	r24, 0x01	; 1
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	a0 40       	sbci	r26, 0x00	; 0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <check_color+0xa>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <check_color+0x14>
     a4c:	00 00       	nop
		_delay_ms(1000);   //display the pulse count when red filter is selected
	    green_read(); //display the pulse count when green filter is selected
     a4e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <green_read>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	ac e2       	ldi	r26, 0x2C	; 44
     a58:	81 50       	subi	r24, 0x01	; 1
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a0 40       	sbci	r26, 0x00	; 0
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <check_color+0x20>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <check_color+0x2a>
     a62:	00 00       	nop
		_delay_ms(1000);
	    blue_read();  //display the pulse count when blue filter is selected
     a64:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <blue_read>
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	9f ef       	ldi	r25, 0xFF	; 255
     a6c:	ac e2       	ldi	r26, 0x2C	; 44
     a6e:	81 50       	subi	r24, 0x01	; 1
     a70:	90 40       	sbci	r25, 0x00	; 0
     a72:	a0 40       	sbci	r26, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <check_color+0x36>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <check_color+0x40>
     a78:	00 00       	nop
	 _delay_ms(1000);
	     if((red>green) && (red>blue))
     a7a:	40 91 24 02 	lds	r20, 0x0224
     a7e:	50 91 25 02 	lds	r21, 0x0225
     a82:	60 91 26 02 	lds	r22, 0x0226
     a86:	70 91 27 02 	lds	r23, 0x0227
     a8a:	80 91 1f 02 	lds	r24, 0x021F
     a8e:	90 91 20 02 	lds	r25, 0x0220
     a92:	a0 91 21 02 	lds	r26, 0x0221
     a96:	b0 91 22 02 	lds	r27, 0x0222
     a9a:	84 17       	cp	r24, r20
     a9c:	95 07       	cpc	r25, r21
     a9e:	a6 07       	cpc	r26, r22
     aa0:	b7 07       	cpc	r27, r23
     aa2:	b0 f4       	brcc	.+44     	; 0xad0 <check_color+0x98>
     aa4:	40 91 24 02 	lds	r20, 0x0224
     aa8:	50 91 25 02 	lds	r21, 0x0225
     aac:	60 91 26 02 	lds	r22, 0x0226
     ab0:	70 91 27 02 	lds	r23, 0x0227
     ab4:	80 91 11 02 	lds	r24, 0x0211
     ab8:	90 91 12 02 	lds	r25, 0x0212
     abc:	a0 91 13 02 	lds	r26, 0x0213
     ac0:	b0 91 14 02 	lds	r27, 0x0214
     ac4:	84 17       	cp	r24, r20
     ac6:	95 07       	cpc	r25, r21
     ac8:	a6 07       	cpc	r26, r22
     aca:	b7 07       	cpc	r27, r23
     acc:	08 f4       	brcc	.+2      	; 0xad0 <check_color+0x98>
     ace:	55 c0       	rjmp	.+170    	; 0xb7a <check_color+0x142>
	     {
	        return 'R'; //red color  
	     }
	     if((blue>green) && (blue>red))
     ad0:	40 91 11 02 	lds	r20, 0x0211
     ad4:	50 91 12 02 	lds	r21, 0x0212
     ad8:	60 91 13 02 	lds	r22, 0x0213
     adc:	70 91 14 02 	lds	r23, 0x0214
     ae0:	80 91 1f 02 	lds	r24, 0x021F
     ae4:	90 91 20 02 	lds	r25, 0x0220
     ae8:	a0 91 21 02 	lds	r26, 0x0221
     aec:	b0 91 22 02 	lds	r27, 0x0222
     af0:	84 17       	cp	r24, r20
     af2:	95 07       	cpc	r25, r21
     af4:	a6 07       	cpc	r26, r22
     af6:	b7 07       	cpc	r27, r23
     af8:	a8 f4       	brcc	.+42     	; 0xb24 <check_color+0xec>
     afa:	40 91 11 02 	lds	r20, 0x0211
     afe:	50 91 12 02 	lds	r21, 0x0212
     b02:	60 91 13 02 	lds	r22, 0x0213
     b06:	70 91 14 02 	lds	r23, 0x0214
     b0a:	80 91 24 02 	lds	r24, 0x0224
     b0e:	90 91 25 02 	lds	r25, 0x0225
     b12:	a0 91 26 02 	lds	r26, 0x0226
     b16:	b0 91 27 02 	lds	r27, 0x0227
     b1a:	84 17       	cp	r24, r20
     b1c:	95 07       	cpc	r25, r21
     b1e:	a6 07       	cpc	r26, r22
     b20:	b7 07       	cpc	r27, r23
     b22:	68 f1       	brcs	.+90     	; 0xb7e <check_color+0x146>
	     {
	        return 'B'; //blue color
	     }
	     if((green>red) && (green>blue))
     b24:	40 91 1f 02 	lds	r20, 0x021F
     b28:	50 91 20 02 	lds	r21, 0x0220
     b2c:	60 91 21 02 	lds	r22, 0x0221
     b30:	70 91 22 02 	lds	r23, 0x0222
     b34:	80 91 24 02 	lds	r24, 0x0224
     b38:	90 91 25 02 	lds	r25, 0x0225
     b3c:	a0 91 26 02 	lds	r26, 0x0226
     b40:	b0 91 27 02 	lds	r27, 0x0227
     b44:	84 17       	cp	r24, r20
     b46:	95 07       	cpc	r25, r21
     b48:	a6 07       	cpc	r26, r22
     b4a:	b7 07       	cpc	r27, r23
     b4c:	a8 f4       	brcc	.+42     	; 0xb78 <check_color+0x140>
     b4e:	40 91 1f 02 	lds	r20, 0x021F
     b52:	50 91 20 02 	lds	r21, 0x0220
     b56:	60 91 21 02 	lds	r22, 0x0221
     b5a:	70 91 22 02 	lds	r23, 0x0222
     b5e:	80 91 11 02 	lds	r24, 0x0211
     b62:	90 91 12 02 	lds	r25, 0x0212
     b66:	a0 91 13 02 	lds	r26, 0x0213
     b6a:	b0 91 14 02 	lds	r27, 0x0214
     b6e:	84 17       	cp	r24, r20
     b70:	95 07       	cpc	r25, r21
     b72:	a6 07       	cpc	r26, r22
     b74:	b7 07       	cpc	r27, r23
     b76:	28 f0       	brcs	.+10     	; 0xb82 <check_color+0x14a>
     b78:	08 95       	ret
		_delay_ms(1000);
	    blue_read();  //display the pulse count when blue filter is selected
	 _delay_ms(1000);
	     if((red>green) && (red>blue))
	     {
	        return 'R'; //red color  
     b7a:	82 e5       	ldi	r24, 0x52	; 82
     b7c:	08 95       	ret
	     }
	     if((blue>green) && (blue>red))
	     {
	        return 'B'; //blue color
     b7e:	82 e4       	ldi	r24, 0x42	; 66
     b80:	08 95       	ret
	     }
	     if((green>red) && (green>blue))
	     {
	        return 'G'; //green color
     b82:	87 e4       	ldi	r24, 0x47	; 71

	     }
	    
	}
     b84:	08 95       	ret

00000b86 <servo_1>:

	void servo_1(unsigned char degrees)
	{
	 float PositionPanServo = 0;
	  PositionPanServo = ((float)degrees / 1.86) + 35.0;
	 OCR1AH = 0x00;
     b86:	10 92 89 00 	sts	0x0089, r1


	void servo_1(unsigned char degrees)
	{
	 float PositionPanServo = 0;
	  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     b8a:	68 2f       	mov	r22, r24
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 65 34 	call	0x68ca	; 0x68ca <__floatunsisf>
     b96:	2b e7       	ldi	r18, 0x7B	; 123
     b98:	34 e1       	ldi	r19, 0x14	; 20
     b9a:	4e ee       	ldi	r20, 0xEE	; 238
     b9c:	5f e3       	ldi	r21, 0x3F	; 63
     b9e:	0e 94 cc 33 	call	0x6798	; 0x6798 <__divsf3>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	4c e0       	ldi	r20, 0x0C	; 12
     ba8:	52 e4       	ldi	r21, 0x42	; 66
     baa:	0e 94 68 33 	call	0x66d0	; 0x66d0 <__addsf3>
	 OCR1AH = 0x00;
	 OCR1AL = (unsigned char) PositionPanServo;
     bae:	0e 94 39 34 	call	0x6872	; 0x6872 <__fixunssfsi>
     bb2:	60 93 88 00 	sts	0x0088, r22
	}
     bb6:	08 95       	ret

00000bb8 <servo_2>:
	//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
	void servo_2(unsigned char degrees)
	{
	 float PositionTiltServo = 0;
	 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	 OCR1BH = 0x00;
     bb8:	10 92 8b 00 	sts	0x008B, r1

	//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
	void servo_2(unsigned char degrees)
	{
	 float PositionTiltServo = 0;
	 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     bbc:	68 2f       	mov	r22, r24
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 65 34 	call	0x68ca	; 0x68ca <__floatunsisf>
     bc8:	2b e7       	ldi	r18, 0x7B	; 123
     bca:	34 e1       	ldi	r19, 0x14	; 20
     bcc:	4e ee       	ldi	r20, 0xEE	; 238
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 cc 33 	call	0x6798	; 0x6798 <__divsf3>
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	4c e0       	ldi	r20, 0x0C	; 12
     bda:	52 e4       	ldi	r21, 0x42	; 66
     bdc:	0e 94 68 33 	call	0x66d0	; 0x66d0 <__addsf3>
	 OCR1BH = 0x00;
	 OCR1BL = (unsigned char) PositionTiltServo;
     be0:	0e 94 39 34 	call	0x6872	; 0x6872 <__fixunssfsi>
     be4:	60 93 8a 00 	sts	0x008A, r22
	}
     be8:	08 95       	ret

00000bea <servo_3>:
	//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
	void servo_3(unsigned char degrees)
	{
	 float PositionServo = 0;
	 PositionServo = ((float)degrees / 1.86) + 35.0;
	 OCR1CH = 0x00;
     bea:	10 92 8d 00 	sts	0x008D, r1

	//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
	void servo_3(unsigned char degrees)
	{
	 float PositionServo = 0;
	 PositionServo = ((float)degrees / 1.86) + 35.0;
     bee:	68 2f       	mov	r22, r24
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 65 34 	call	0x68ca	; 0x68ca <__floatunsisf>
     bfa:	2b e7       	ldi	r18, 0x7B	; 123
     bfc:	34 e1       	ldi	r19, 0x14	; 20
     bfe:	4e ee       	ldi	r20, 0xEE	; 238
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	0e 94 cc 33 	call	0x6798	; 0x6798 <__divsf3>
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	4c e0       	ldi	r20, 0x0C	; 12
     c0c:	52 e4       	ldi	r21, 0x42	; 66
     c0e:	0e 94 68 33 	call	0x66d0	; 0x66d0 <__addsf3>
	 OCR1CH = 0x00;
	 OCR1CL = (unsigned char) PositionServo;
     c12:	0e 94 39 34 	call	0x6872	; 0x6872 <__fixunssfsi>
     c16:	60 93 8c 00 	sts	0x008C, r22
	}
     c1a:	08 95       	ret

00000c1c <servo_1_free>:

	void servo_1_free (void) //makes servo 1 free rotating
	{
	 OCR1AH = 0x03;
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	80 93 89 00 	sts	0x0089, r24
	 OCR1AL = 0xFF; //Servo 1 off
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	80 93 88 00 	sts	0x0088, r24
	}
     c28:	08 95       	ret

00000c2a <servo_2_free>:

	void servo_2_free (void) //makes servo 2 free rotating
	{
	 OCR1BH = 0x03;
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	80 93 8b 00 	sts	0x008B, r24
	 OCR1BL = 0xFF; //Servo 2 off
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	80 93 8a 00 	sts	0x008A, r24
	}
     c36:	08 95       	ret

00000c38 <servo_3_free>:

	void servo_3_free (void) //makes servo 3 free rotating
	{
	 OCR1CH = 0x03;
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	80 93 8d 00 	sts	0x008D, r24
	 OCR1CL = 0xFF; //Servo 3 off
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	80 93 8c 00 	sts	0x008C, r24
	}
     c44:	08 95       	ret

00000c46 <blackline>:
	 
	 */
	int blackline()
	{
		while(1){
			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     c4c:	80 93 02 02 	sts	0x0202, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     c56:	80 93 01 02 	sts	0x0201, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     c60:	80 93 00 02 	sts	0x0200, r24

			if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line<0x20) // Center on black line-010
     c64:	90 91 01 02 	lds	r25, 0x0201
     c68:	91 32       	cpi	r25, 0x21	; 33
     c6a:	68 f0       	brcs	.+26     	; 0xc86 <blackline+0x40>
     c6c:	20 91 02 02 	lds	r18, 0x0202
     c70:	20 32       	cpi	r18, 0x20	; 32
     c72:	48 f4       	brcc	.+18     	; 0xc86 <blackline+0x40>
     c74:	80 32       	cpi	r24, 0x20	; 32
     c76:	38 f4       	brcc	.+14     	; 0xc86 <blackline+0x40>
			{	forward();
     c78:	0e 94 88 04 	call	0x910	; 0x910 <forward>
				velocity(130,122); //velocity value calibrated as per requirement
     c7c:	82 e8       	ldi	r24, 0x82	; 130
     c7e:	6a e7       	ldi	r22, 0x7A	; 122
     c80:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     c84:	e0 cf       	rjmp	.-64     	; 0xc46 <blackline>

			}

			else if((Left_white_line>0x20 && Center_white_line<0x20) ) //left sensor on black line, take left turn to get back on blackline
     c86:	20 91 02 02 	lds	r18, 0x0202
     c8a:	21 32       	cpi	r18, 0x21	; 33
     c8c:	78 f0       	brcs	.+30     	; 0xcac <blackline+0x66>
     c8e:	90 32       	cpi	r25, 0x20	; 32
     c90:	68 f4       	brcc	.+26     	; 0xcac <blackline+0x66>
			{
				forward();
     c92:	0e 94 88 04 	call	0x910	; 0x910 <forward>
				velocity(40,120); //velocity of left and right motors calibrated as per requirement
     c96:	88 e2       	ldi	r24, 0x28	; 40
     c98:	68 e7       	ldi	r22, 0x78	; 120
     c9a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	97 ed       	ldi	r25, 0xD7	; 215
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <blackline+0x5c>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <blackline+0x62>
     ca8:	00 00       	nop
     caa:	cd cf       	rjmp	.-102    	; 0xc46 <blackline>
				_delay_ms(15);
			}

			else if((Right_white_line>0x20 && Center_white_line<0x20)) //right sensor on black line, take right turn to get back on blackline
     cac:	81 32       	cpi	r24, 0x21	; 33
     cae:	78 f0       	brcs	.+30     	; 0xcce <blackline+0x88>
     cb0:	90 32       	cpi	r25, 0x20	; 32
     cb2:	68 f4       	brcc	.+26     	; 0xcce <blackline+0x88>
			{	forward();
     cb4:	0e 94 88 04 	call	0x910	; 0x910 <forward>
				velocity(120,40);
     cb8:	88 e7       	ldi	r24, 0x78	; 120
     cba:	68 e2       	ldi	r22, 0x28	; 40
     cbc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	97 ed       	ldi	r25, 0xD7	; 215
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <blackline+0x7e>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <blackline+0x84>
     cca:	00 00       	nop
     ccc:	bc cf       	rjmp	.-136    	; 0xc46 <blackline>
				_delay_ms(15);
			}
			else if(Center_white_line>0x20 && Left_white_line>0x20 && Right_white_line<0x20){//110
     cce:	91 32       	cpi	r25, 0x21	; 33
     cd0:	38 f0       	brcs	.+14     	; 0xce0 <blackline+0x9a>
     cd2:	21 32       	cpi	r18, 0x21	; 33
     cd4:	28 f0       	brcs	.+10     	; 0xce0 <blackline+0x9a>
     cd6:	80 32       	cpi	r24, 0x20	; 32
     cd8:	18 f4       	brcc	.+6      	; 0xce0 <blackline+0x9a>
				stop();
     cda:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				return;
     cde:	08 95       	ret
			}
			else if(Center_white_line<0x20 && Left_white_line>0x20 && Right_white_line>0x20){//101
     ce0:	90 32       	cpi	r25, 0x20	; 32
     ce2:	38 f4       	brcc	.+14     	; 0xcf2 <blackline+0xac>
     ce4:	21 32       	cpi	r18, 0x21	; 33
     ce6:	28 f0       	brcs	.+10     	; 0xcf2 <blackline+0xac>
     ce8:	81 32       	cpi	r24, 0x21	; 33
     cea:	18 f0       	brcs	.+6      	; 0xcf2 <blackline+0xac>
				stop();
     cec:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				return;
     cf0:	08 95       	ret
			}
			else if(Center_white_line>0x20 && Left_white_line>0x20 && Right_white_line>0x20){//111
     cf2:	91 32       	cpi	r25, 0x21	; 33
     cf4:	08 f4       	brcc	.+2      	; 0xcf8 <blackline+0xb2>
     cf6:	a7 cf       	rjmp	.-178    	; 0xc46 <blackline>
     cf8:	21 32       	cpi	r18, 0x21	; 33
     cfa:	28 f0       	brcs	.+10     	; 0xd06 <blackline+0xc0>
     cfc:	81 32       	cpi	r24, 0x21	; 33
     cfe:	18 f0       	brcs	.+6      	; 0xd06 <blackline+0xc0>
				stop();
     d00:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				return;
     d04:	08 95       	ret
			}
			else if(Center_white_line>0x20 && Left_white_line<0x20 && Right_white_line>0x20){//011
     d06:	20 32       	cpi	r18, 0x20	; 32
     d08:	08 f0       	brcs	.+2      	; 0xd0c <blackline+0xc6>
     d0a:	9d cf       	rjmp	.-198    	; 0xc46 <blackline>
     d0c:	81 32       	cpi	r24, 0x21	; 33
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <blackline+0xcc>
     d10:	9a cf       	rjmp	.-204    	; 0xc46 <blackline>
				stop();
     d12:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				return;
			}

		}

	}
     d16:	08 95       	ret

00000d18 <turn_left>:
	
	 */

	void turn_left()
	{
		left();
     d18:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <left>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     d22:	80 93 02 02 	sts	0x0202, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     d2c:	80 93 01 02 	sts	0x0201, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     d36:	80 93 00 02 	sts	0x0200, r24

			flag=0;
     d3a:	10 92 03 02 	sts	0x0203, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	43 e0       	ldi	r20, 0x03	; 3
     d44:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	65 e0       	ldi	r22, 0x05	; 5
     d4c:	42 e0       	ldi	r20, 0x02	; 2
     d4e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	69 e0       	ldi	r22, 0x09	; 9
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>

			velocity(140,140);
     d5c:	8c e8       	ldi	r24, 0x8C	; 140
     d5e:	6c e8       	ldi	r22, 0x8C	; 140
     d60:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     d64:	86 e6       	ldi	r24, 0x66	; 102
     d66:	96 e5       	ldi	r25, 0x56	; 86
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <turn_left+0x50>
     d6c:	00 00       	nop
			_delay_ms(6);
			if(Left_white_line>=0x40)
     d6e:	80 91 02 02 	lds	r24, 0x0202
     d72:	80 34       	cpi	r24, 0x40	; 64
     d74:	98 f2       	brcs	.-90     	; 0xd1c <turn_left+0x4>
			{	stop();
     d76:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				velocity(0,0);
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				return;
			}

		}
	}
     d82:	08 95       	ret

00000d84 <center_left>:

	 */

	void center_left()
	{
		soft_right_2();
     d84:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <soft_right_2>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     d8e:	80 93 02 02 	sts	0x0202, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     d98:	80 93 01 02 	sts	0x0201, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     da2:	80 93 00 02 	sts	0x0200, r24

			flag=0;
     da6:	10 92 03 02 	sts	0x0203, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	43 e0       	ldi	r20, 0x03	; 3
     db0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	65 e0       	ldi	r22, 0x05	; 5
     db8:	42 e0       	ldi	r20, 0x02	; 2
     dba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	69 e0       	ldi	r22, 0x09	; 9
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>

			velocity(0,130);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	62 e8       	ldi	r22, 0x82	; 130
     dcc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     dd0:	86 e6       	ldi	r24, 0x66	; 102
     dd2:	96 e5       	ldi	r25, 0x56	; 86
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <center_left+0x50>
     dd8:	00 00       	nop
			_delay_ms(6);
			if(Center_white_line>=0x0b)
     dda:	80 91 01 02 	lds	r24, 0x0201
     dde:	8b 30       	cpi	r24, 0x0B	; 11
     de0:	98 f2       	brcs	.-90     	; 0xd88 <center_left+0x4>
			{
				velocity(0,0);
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>

				return;
			}

		}
	}
     dea:	08 95       	ret

00000dec <turn_right>:
	
	 */

	void turn_right()
	{
		right();
     dec:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <right>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     df6:	80 93 02 02 	sts	0x0202, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     e00:	80 93 01 02 	sts	0x0201, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     e0a:	80 93 00 02 	sts	0x0200, r24

			flag=0;
     e0e:	10 92 03 02 	sts	0x0203, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	43 e0       	ldi	r20, 0x03	; 3
     e18:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	65 e0       	ldi	r22, 0x05	; 5
     e20:	42 e0       	ldi	r20, 0x02	; 2
     e22:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	69 e0       	ldi	r22, 0x09	; 9
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>

			velocity(140,140);
     e30:	8c e8       	ldi	r24, 0x8C	; 140
     e32:	6c e8       	ldi	r22, 0x8C	; 140
     e34:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     e38:	86 e6       	ldi	r24, 0x66	; 102
     e3a:	96 e5       	ldi	r25, 0x56	; 86
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <turn_right+0x50>
     e40:	00 00       	nop
			_delay_ms(6);
			if(Right_white_line>=0x40)
     e42:	80 91 00 02 	lds	r24, 0x0200
     e46:	80 34       	cpi	r24, 0x40	; 64
     e48:	98 f2       	brcs	.-90     	; 0xdf0 <turn_right+0x4>
			{
				velocity(0,0);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				return;
			}


		}
	}
     e52:	08 95       	ret

00000e54 <center_right>:
	 * Example Call: center_right();
	 
	 */
	void center_right()
	{
		soft_left_2();
     e54:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <soft_left_2>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     e5e:	80 93 02 02 	sts	0x0202, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     e68:	80 93 01 02 	sts	0x0201, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
     e72:	80 93 00 02 	sts	0x0200, r24

			flag=0;
     e76:	10 92 03 02 	sts	0x0203, r1

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	43 e0       	ldi	r20, 0x03	; 3
     e80:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	65 e0       	ldi	r22, 0x05	; 5
     e88:	42 e0       	ldi	r20, 0x02	; 2
     e8a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	69 e0       	ldi	r22, 0x09	; 9
     e92:	41 e0       	ldi	r20, 0x01	; 1
     e94:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <print_sensor>

			velocity(130,0);
     e98:	82 e8       	ldi	r24, 0x82	; 130
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     ea0:	86 e6       	ldi	r24, 0x66	; 102
     ea2:	96 e5       	ldi	r25, 0x56	; 86
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <center_right+0x50>
     ea8:	00 00       	nop
			_delay_ms(6);
			if(Center_white_line>=0x0b)
     eaa:	80 91 01 02 	lds	r24, 0x0201
     eae:	8b 30       	cpi	r24, 0x0B	; 11
     eb0:	98 f2       	brcs	.-90     	; 0xe58 <center_right+0x4>
			{
				velocity(0,0);
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>

				return;
			}

		}
	}
     eba:	08 95       	ret

00000ebc <buzzer_on>:
	
	
	void buzzer_on (void)
	{
	 unsigned char port_restore = 0;
	 port_restore = PINC;
     ebc:	86 b1       	in	r24, 0x06	; 6
	 port_restore = port_restore | 0x08;
     ebe:	88 60       	ori	r24, 0x08	; 8
	 PORTC = port_restore;
     ec0:	88 b9       	out	0x08, r24	; 8
	}
     ec2:	08 95       	ret

00000ec4 <buzzer_off>:

	void buzzer_off (void)
	{
	 unsigned char port_restore = 0;
	 port_restore = PINC;
     ec4:	86 b1       	in	r24, 0x06	; 6
	 port_restore = port_restore & 0xF7;
     ec6:	87 7f       	andi	r24, 0xF7	; 247
	 PORTC = port_restore;
     ec8:	88 b9       	out	0x08, r24	; 8
	}
     eca:	08 95       	ret

00000ecc <linear_distance_mm>:
	void linear_distance_mm(unsigned int DistanceInMM)
	{
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;

		ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     ecc:	bc 01       	movw	r22, r24
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 65 34 	call	0x68ca	; 0x68ca <__floatunsisf>
     ed6:	25 ee       	ldi	r18, 0xE5	; 229
     ed8:	30 ed       	ldi	r19, 0xD0	; 208
     eda:	4a ea       	ldi	r20, 0xAA	; 170
     edc:	50 e4       	ldi	r21, 0x40	; 64
     ede:	0e 94 cc 33 	call	0x6798	; 0x6798 <__divsf3>
		ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     ee2:	0e 94 39 34 	call	0x6872	; 0x6872 <__fixunssfsi>
     ee6:	46 2f       	mov	r20, r22
     ee8:	57 2f       	mov	r21, r23
     eea:	68 2f       	mov	r22, r24
     eec:	79 2f       	mov	r23, r25

		ShaftCountRight = 0;
     eee:	10 92 08 02 	sts	0x0208, r1
     ef2:	10 92 09 02 	sts	0x0209, r1
     ef6:	10 92 0a 02 	sts	0x020A, r1
     efa:	10 92 0b 02 	sts	0x020B, r1
		while(1)
		{
			if(ShaftCountRight > ReqdShaftCountInt)
     efe:	80 91 08 02 	lds	r24, 0x0208
     f02:	90 91 09 02 	lds	r25, 0x0209
     f06:	a0 91 0a 02 	lds	r26, 0x020A
     f0a:	b0 91 0b 02 	lds	r27, 0x020B
     f0e:	48 17       	cp	r20, r24
     f10:	59 07       	cpc	r21, r25
     f12:	6a 07       	cpc	r22, r26
     f14:	7b 07       	cpc	r23, r27
     f16:	98 f7       	brcc	.-26     	; 0xefe <linear_distance_mm+0x32>
			{
				break;
			}
		}
		stop(); //Stop robot
     f18:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
	}
     f1c:	08 95       	ret

00000f1e <forward_mm>:

	void forward_mm(unsigned int DistanceInMM)
	{
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
		forward();
     f24:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		linear_distance_mm(DistanceInMM);
     f28:	ce 01       	movw	r24, r28
     f2a:	0e 94 66 07 	call	0xecc	; 0xecc <linear_distance_mm>
	}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <back_mm>:

	void back_mm(unsigned int DistanceInMM)
	{
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	ec 01       	movw	r28, r24
		back();
     f3a:	0e 94 8c 04 	call	0x918	; 0x918 <back>
		linear_distance_mm(DistanceInMM);
     f3e:	ce 01       	movw	r24, r28
     f40:	0e 94 66 07 	call	0xecc	; 0xecc <linear_distance_mm>
	}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <rotation_using_blackline_right>:
			  Thus robot is forwarded and then turn_right function is called. 
	? * Example Call:rotation_using_blackline_right
	? */
	void rotation_using_blackline_right(void)
	{
	forward_mm(89); //robot is forwarded by fixed distance using encoder
     f4a:	89 e5       	ldi	r24, 0x59	; 89
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
	stop();
     f52:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f e7       	ldi	r25, 0x7F	; 127
     f5a:	a6 e1       	ldi	r26, 0x16	; 22
     f5c:	81 50       	subi	r24, 0x01	; 1
     f5e:	90 40       	sbci	r25, 0x00	; 0
     f60:	a0 40       	sbci	r26, 0x00	; 0
     f62:	e1 f7       	brne	.-8      	; 0xf5c <rotation_using_blackline_right+0x12>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <rotation_using_blackline_right+0x1c>
     f66:	00 00       	nop
	_delay_ms(500);
	turn_right();  //robot will rotate right until it gets blackline
     f68:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
	velocity(150,150);
     f6c:	86 e9       	ldi	r24, 0x96	; 150
     f6e:	66 e9       	ldi	r22, 0x96	; 150
     f70:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9f e3       	ldi	r25, 0x3F	; 63
     f78:	a2 e0       	ldi	r26, 0x02	; 2
     f7a:	81 50       	subi	r24, 0x01	; 1
     f7c:	90 40       	sbci	r25, 0x00	; 0
     f7e:	a0 40       	sbci	r26, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <rotation_using_blackline_right+0x30>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <rotation_using_blackline_right+0x3a>
     f84:	00 00       	nop
	_delay_ms(50);
	stop();
     f86:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>

	}
     f8a:	08 95       	ret

00000f8c <rotation_using_blackline_left>:
			  Thus robot is forwarded and then turn_left function is called. 
	? * Example Call: rotation_using_blackline_left();
	? */
	void rotation_using_blackline_left(void)
	{
		forward_mm(89); //robot is forwarded by fixed distance using encoder
     f8c:	89 e5       	ldi	r24, 0x59	; 89
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
     f94:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f e7       	ldi	r25, 0x7F	; 127
     f9c:	a6 e1       	ldi	r26, 0x16	; 22
     f9e:	81 50       	subi	r24, 0x01	; 1
     fa0:	90 40       	sbci	r25, 0x00	; 0
     fa2:	a0 40       	sbci	r26, 0x00	; 0
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <rotation_using_blackline_left+0x12>
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <rotation_using_blackline_left+0x1c>
     fa8:	00 00       	nop
		_delay_ms(500);
		turn_left();     //robot will rotate right until it gets blackline
     faa:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(150,150);
     fae:	86 e9       	ldi	r24, 0x96	; 150
     fb0:	66 e9       	ldi	r22, 0x96	; 150
     fb2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	9f e3       	ldi	r25, 0x3F	; 63
     fba:	a2 e0       	ldi	r26, 0x02	; 2
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	90 40       	sbci	r25, 0x00	; 0
     fc0:	a0 40       	sbci	r26, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <rotation_using_blackline_left+0x30>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <rotation_using_blackline_left+0x3a>
     fc6:	00 00       	nop
		_delay_ms(50);
		stop();
     fc8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>

	}
     fcc:	08 95       	ret

00000fce <sense_top2_HZ_waste_block_color>:
	the color sensor in front of blocks and sense the color of top 2 blocks one by one.
	? * Example Call: sense_top2_HZ_waste_block_color();
	? */
	
	void sense_top2_HZ_waste_block_color(void)
	{
     fce:	cf 93       	push	r28
     fd0:	2f ef       	ldi	r18, 0xFF	; 255
     fd2:	3f e7       	ldi	r19, 0x7F	; 127
     fd4:	46 e1       	ldi	r20, 0x16	; 22
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	30 40       	sbci	r19, 0x00	; 0
     fda:	40 40       	sbci	r20, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <sense_top2_HZ_waste_block_color+0x8>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <sense_top2_HZ_waste_block_color+0x12>
     fe0:	00 00       	nop
		_delay_ms(500);
		velocity(130,135);
     fe2:	82 e8       	ldi	r24, 0x82	; 130
     fe4:	67 e8       	ldi	r22, 0x87	; 135
     fe6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(30);   //robot must move some back distance before closing the gripper otherwise gripper will hit the blocks.
     fea:	8e e1       	ldi	r24, 0x1E	; 30
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		velocity(115,110);
     ff2:	83 e7       	ldi	r24, 0x73	; 115
     ff4:	6e e6       	ldi	r22, 0x6E	; 110
     ff6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
	servo_1(0);         
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	ac e2       	ldi	r26, 0x2C	; 44
    1006:	81 50       	subi	r24, 0x01	; 1
    1008:	90 40       	sbci	r25, 0x00	; 0
    100a:	a0 40       	sbci	r26, 0x00	; 0
    100c:	e1 f7       	brne	.-8      	; 0x1006 <sense_top2_HZ_waste_block_color+0x38>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <sense_top2_HZ_waste_block_color+0x42>
    1010:	00 00       	nop
		_delay_ms(1000);
		servo_3(140);        //gripper closes
    1012:	8c e8       	ldi	r24, 0x8C	; 140
    1014:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1018:	2f ef       	ldi	r18, 0xFF	; 255
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	4c e2       	ldi	r20, 0x2C	; 44
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	e1 f7       	brne	.-8      	; 0x101e <sense_top2_HZ_waste_block_color+0x50>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <sense_top2_HZ_waste_block_color+0x5a>
    1028:	00 00       	nop
		_delay_ms(1000);
		servo_2(135);          //gripper i.e. color sensor brought in front of middle block
    102a:	87 e8       	ldi	r24, 0x87	; 135
    102c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	9f ef       	ldi	r25, 0xFF	; 255
    1034:	ac e2       	ldi	r26, 0x2C	; 44
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	90 40       	sbci	r25, 0x00	; 0
    103a:	a0 40       	sbci	r26, 0x00	; 0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <sense_top2_HZ_waste_block_color+0x68>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <sense_top2_HZ_waste_block_color+0x72>
    1040:	00 00       	nop
    1042:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=10)  //to bring gripper exactly in front of  gripper
		{
			servo_1(i);
    1044:	8c 2f       	mov	r24, r28
    1046:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    104a:	2f ef       	ldi	r18, 0xFF	; 255
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	4c e2       	ldi	r20, 0x2C	; 44
    1050:	21 50       	subi	r18, 0x01	; 1
    1052:	30 40       	sbci	r19, 0x00	; 0
    1054:	40 40       	sbci	r20, 0x00	; 0
    1056:	e1 f7       	brne	.-8      	; 0x1050 <sense_top2_HZ_waste_block_color+0x82>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <sense_top2_HZ_waste_block_color+0x8c>
    105a:	00 00       	nop
    105c:	c6 5f       	subi	r28, 0xF6	; 246
		_delay_ms(1000);
		servo_3(140);        //gripper closes
		_delay_ms(1000);
		servo_2(135);          //gripper i.e. color sensor brought in front of middle block
		_delay_ms(1000);
		for(int i=0;i<=40;i+=10)  //to bring gripper exactly in front of  gripper
    105e:	c2 33       	cpi	r28, 0x32	; 50
    1060:	89 f7       	brne	.-30     	; 0x1044 <sense_top2_HZ_waste_block_color+0x76>


		}
		

middle_HZ_waste_color=check_color();  //color of middle block is stored in middle_HZ_waste_color
    1062:	0e 94 1c 05 	call	0xa38	; 0xa38 <check_color>
    1066:	80 93 2c 02 	sts	0x022C, r24
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	9f ef       	ldi	r25, 0xFF	; 255
    106e:	ac e2       	ldi	r26, 0x2C	; 44
    1070:	81 50       	subi	r24, 0x01	; 1
    1072:	90 40       	sbci	r25, 0x00	; 0
    1074:	a0 40       	sbci	r26, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <sense_top2_HZ_waste_block_color+0xa2>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <sense_top2_HZ_waste_block_color+0xac>
    107a:	00 00       	nop
_delay_ms(1000);
servo_1(26);                          //bring the gripper i.e. color sensor in front of top HZ block 
    107c:	8a e1       	ldi	r24, 0x1A	; 26
    107e:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1082:	2f ef       	ldi	r18, 0xFF	; 255
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4c e2       	ldi	r20, 0x2C	; 44
    1088:	21 50       	subi	r18, 0x01	; 1
    108a:	30 40       	sbci	r19, 0x00	; 0
    108c:	40 40       	sbci	r20, 0x00	; 0
    108e:	e1 f7       	brne	.-8      	; 0x1088 <sense_top2_HZ_waste_block_color+0xba>
    1090:	00 c0       	rjmp	.+0      	; 0x1092 <sense_top2_HZ_waste_block_color+0xc4>
    1092:	00 00       	nop
_delay_ms(1000);
top_HZ_waste_block_color=check_color();                    //color of top block is stored in top_HZ_waste_block
    1094:	0e 94 1c 05 	call	0xa38	; 0xa38 <check_color>
    1098:	80 93 10 02 	sts	0x0210, r24
    109c:	2f ef       	ldi	r18, 0xFF	; 255
    109e:	3f ef       	ldi	r19, 0xFF	; 255
    10a0:	40 ee       	ldi	r20, 0xE0	; 224
    10a2:	21 50       	subi	r18, 0x01	; 1
    10a4:	30 40       	sbci	r19, 0x00	; 0
    10a6:	40 40       	sbci	r20, 0x00	; 0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <sense_top2_HZ_waste_block_color+0xd4>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <sense_top2_HZ_waste_block_color+0xde>
    10ac:	00 00       	nop
_delay_ms(5000);
		// color sensing done 
		if(top_HZ_waste_block_color!='R' && middle_HZ_waste_color!='R')
    10ae:	82 35       	cpi	r24, 0x52	; 82
    10b0:	59 f0       	breq	.+22     	; 0x10c8 <sense_top2_HZ_waste_block_color+0xfa>
    10b2:	90 91 2c 02 	lds	r25, 0x022C
    10b6:	92 35       	cpi	r25, 0x52	; 82
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <sense_top2_HZ_waste_block_color+0xf4>
		bottom_HZ_waste_block_color='R';
    10ba:	82 e5       	ldi	r24, 0x52	; 82
    10bc:	80 93 17 02 	sts	0x0217, r24
    10c0:	15 c0       	rjmp	.+42     	; 0x10ec <sense_top2_HZ_waste_block_color+0x11e>
		else if(top_HZ_waste_block_color!='G' && middle_HZ_waste_color!='G')
    10c2:	87 34       	cpi	r24, 0x47	; 71
    10c4:	61 f0       	breq	.+24     	; 0x10de <sense_top2_HZ_waste_block_color+0x110>
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <sense_top2_HZ_waste_block_color+0x102>
    10c8:	90 91 2c 02 	lds	r25, 0x022C
    10cc:	97 34       	cpi	r25, 0x47	; 71
    10ce:	21 f0       	breq	.+8      	; 0x10d8 <sense_top2_HZ_waste_block_color+0x10a>
		bottom_HZ_waste_block_color='G';
    10d0:	87 e4       	ldi	r24, 0x47	; 71
    10d2:	80 93 17 02 	sts	0x0217, r24
    10d6:	0a c0       	rjmp	.+20     	; 0x10ec <sense_top2_HZ_waste_block_color+0x11e>
		else if(top_HZ_waste_block_color!='B' && middle_HZ_waste_color!='B')
    10d8:	82 34       	cpi	r24, 0x42	; 66
    10da:	29 f4       	brne	.+10     	; 0x10e6 <sense_top2_HZ_waste_block_color+0x118>
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <sense_top2_HZ_waste_block_color+0x11e>
    10de:	80 91 2c 02 	lds	r24, 0x022C
    10e2:	82 34       	cpi	r24, 0x42	; 66
    10e4:	19 f0       	breq	.+6      	; 0x10ec <sense_top2_HZ_waste_block_color+0x11e>
		bottom_HZ_waste_block_color='B';
    10e6:	82 e4       	ldi	r24, 0x42	; 66
    10e8:	80 93 17 02 	sts	0x0217, r24
		
	}
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <pick_the_top_HZ_waste>:
	? * Logic: This function is used to pick the topmost HZ waste using robotic arm.
	This function is used just after sense_top2_HZ_waste_block_color function. 
	? * Example Call: pick_the_top_HZ_waste();
	? */
	void pick_the_top_HZ_waste()
	{
    10f0:	cf 93       	push	r28

		servo_3(0); //open the gripper
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		forward_mm(24); //robot moved forward to be able to contain the block
    10f8:	88 e1       	ldi	r24, 0x18	; 24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		velocity(160,120);
    1100:	80 ea       	ldi	r24, 0xA0	; 160
    1102:	68 e7       	ldi	r22, 0x78	; 120
    1104:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	9f ef       	ldi	r25, 0xFF	; 255
    110c:	ac e2       	ldi	r26, 0x2C	; 44
    110e:	81 50       	subi	r24, 0x01	; 1
    1110:	90 40       	sbci	r25, 0x00	; 0
    1112:	a0 40       	sbci	r26, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <pick_the_top_HZ_waste+0x1e>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <pick_the_top_HZ_waste+0x28>
    1118:	00 00       	nop
		_delay_ms(1000);
		stop();
    111a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    111e:	c0 e0       	ldi	r28, 0x00	; 0
		
		for(int i=0;i<=25;i+=5)   //bring the arm to contain the block
		{
			servo_1(i);
    1120:	8c 2f       	mov	r24, r28
    1122:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1126:	8f ef       	ldi	r24, 0xFF	; 255
    1128:	9f ef       	ldi	r25, 0xFF	; 255
    112a:	ac e2       	ldi	r26, 0x2C	; 44
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	90 40       	sbci	r25, 0x00	; 0
    1130:	a0 40       	sbci	r26, 0x00	; 0
    1132:	e1 f7       	brne	.-8      	; 0x112c <pick_the_top_HZ_waste+0x3c>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <pick_the_top_HZ_waste+0x46>
    1136:	00 00       	nop
    1138:	cb 5f       	subi	r28, 0xFB	; 251
		forward_mm(24); //robot moved forward to be able to contain the block
		velocity(160,120);
		_delay_ms(1000);
		stop();
		
		for(int i=0;i<=25;i+=5)   //bring the arm to contain the block
    113a:	ce 31       	cpi	r28, 0x1E	; 30
    113c:	89 f7       	brne	.-30     	; 0x1120 <pick_the_top_HZ_waste+0x30>
			servo_1(i);
			_delay_ms(1000);
			
			
		}
		servo_3(114);  //close the gripper
    113e:	82 e7       	ldi	r24, 0x72	; 114
    1140:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	a9 e5       	ldi	r26, 0x59	; 89
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	90 40       	sbci	r25, 0x00	; 0
    114e:	a0 40       	sbci	r26, 0x00	; 0
    1150:	e1 f7       	brne	.-8      	; 0x114a <pick_the_top_HZ_waste+0x5a>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <pick_the_top_HZ_waste+0x64>
    1154:	00 00       	nop
		_delay_ms(2000);
		servo_1(0);   //lift the HZ block
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
	}
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <drop_the_block>:
	? * Example Call: drop_the_block
	? */
	
	void drop_the_block(void)
	{
		servo_1(0);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	ac e2       	ldi	r26, 0x2C	; 44
    116c:	81 50       	subi	r24, 0x01	; 1
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	a0 40       	sbci	r26, 0x00	; 0
    1172:	e1 f7       	brne	.-8      	; 0x116c <drop_the_block+0xc>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <drop_the_block+0x16>
    1176:	00 00       	nop
		_delay_ms(1000);    
		servo_2(85);      //bring arm near container
    1178:	85 e5       	ldi	r24, 0x55	; 85
    117a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	ac e2       	ldi	r26, 0x2C	; 44
    1184:	81 50       	subi	r24, 0x01	; 1
    1186:	90 40       	sbci	r25, 0x00	; 0
    1188:	a0 40       	sbci	r26, 0x00	; 0
    118a:	e1 f7       	brne	.-8      	; 0x1184 <drop_the_block+0x24>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <drop_the_block+0x2e>
    118e:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);  //open the gripper
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	9f ef       	ldi	r25, 0xFF	; 255
    119a:	ac e2       	ldi	r26, 0x2C	; 44
    119c:	81 50       	subi	r24, 0x01	; 1
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	a0 40       	sbci	r26, 0x00	; 0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <drop_the_block+0x3c>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <drop_the_block+0x46>
    11a6:	00 00       	nop
		_delay_ms(1000);
	}
    11a8:	08 95       	ret

000011aa <pick_top_weight_block>:
	Arm is brought at the height of top weight block and gripper is then brought to contain the weight block. 
	? * Example Call: pick_top_weight_block();
	? */

void pick_top_weight_block() 
{
    11aa:	cf 93       	push	r28
	
	servo_3(0); //open the gripper
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	9f e7       	ldi	r25, 0x7F	; 127
    11b6:	a6 e1       	ldi	r26, 0x16	; 22
    11b8:	81 50       	subi	r24, 0x01	; 1
    11ba:	90 40       	sbci	r25, 0x00	; 0
    11bc:	a0 40       	sbci	r26, 0x00	; 0
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <pick_top_weight_block+0xe>
    11c0:	00 c0       	rjmp	.+0      	; 0x11c2 <pick_top_weight_block+0x18>
    11c2:	00 00       	nop
	_delay_ms(500);
	servo_2(155);  //set angle for gripper so that gripper can contain weight block properly
    11c4:	8b e9       	ldi	r24, 0x9B	; 155
    11c6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	ac e2       	ldi	r26, 0x2C	; 44
    11d0:	81 50       	subi	r24, 0x01	; 1
    11d2:	90 40       	sbci	r25, 0x00	; 0
    11d4:	a0 40       	sbci	r26, 0x00	; 0
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <pick_top_weight_block+0x26>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <pick_top_weight_block+0x30>
    11da:	00 00       	nop
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
	_delay_ms(1000);
	for(int i=0;i<=55;i+=5)  //bring arm down to top weight block
	{
		servo_1(i);
    11de:	8c 2f       	mov	r24, r28
    11e0:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	9f ef       	ldi	r25, 0xFF	; 255
    11e8:	a8 e0       	ldi	r26, 0x08	; 8
    11ea:	81 50       	subi	r24, 0x01	; 1
    11ec:	90 40       	sbci	r25, 0x00	; 0
    11ee:	a0 40       	sbci	r26, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <pick_top_weight_block+0x40>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <pick_top_weight_block+0x4a>
    11f4:	00 00       	nop
    11f6:	cb 5f       	subi	r28, 0xFB	; 251
	
	servo_3(0); //open the gripper
	_delay_ms(500);
	servo_2(155);  //set angle for gripper so that gripper can contain weight block properly
	_delay_ms(1000);
	for(int i=0;i<=55;i+=5)  //bring arm down to top weight block
    11f8:	cc 33       	cpi	r28, 0x3C	; 60
    11fa:	89 f7       	brne	.-30     	; 0x11de <pick_top_weight_block+0x34>
	{
		servo_1(i);
		_delay_ms(200);
	}
	servo_3(131);  // gripper closes
    11fc:	83 e8       	ldi	r24, 0x83	; 131
    11fe:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	9f ef       	ldi	r25, 0xFF	; 255
    1206:	a9 e5       	ldi	r26, 0x59	; 89
    1208:	81 50       	subi	r24, 0x01	; 1
    120a:	90 40       	sbci	r25, 0x00	; 0
    120c:	a0 40       	sbci	r26, 0x00	; 0
    120e:	e1 f7       	brne	.-8      	; 0x1208 <pick_top_weight_block+0x5e>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <pick_top_weight_block+0x68>
    1212:	00 00       	nop
	_delay_ms(2000);
	
	servo_1(0); //left the weight block
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
}
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <pick_bottom_weight_block>:
	? * Logic:This function is used to pick the bottom weight block.
	This function will be used only when top weight block has been already picked
	? * Example Call:pick_bottom_weight_block();
	? */
void pick_bottom_weight_block()
{
    121e:	cf 93       	push	r28
	servo_3(0); //open the gripper
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	9f ef       	ldi	r25, 0xFF	; 255
    122a:	a9 e5       	ldi	r26, 0x59	; 89
    122c:	81 50       	subi	r24, 0x01	; 1
    122e:	90 40       	sbci	r25, 0x00	; 0
    1230:	a0 40       	sbci	r26, 0x00	; 0
    1232:	e1 f7       	brne	.-8      	; 0x122c <pick_bottom_weight_block+0xe>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <pick_bottom_weight_block+0x18>
    1236:	00 00       	nop
	_delay_ms(2000);
	 servo_2(165); //set the gripper position so that it can contain the weight block
    1238:	85 ea       	ldi	r24, 0xA5	; 165
    123a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	ac e2       	ldi	r26, 0x2C	; 44
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	90 40       	sbci	r25, 0x00	; 0
    1248:	a0 40       	sbci	r26, 0x00	; 0
    124a:	e1 f7       	brne	.-8      	; 0x1244 <pick_bottom_weight_block+0x26>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <pick_bottom_weight_block+0x30>
    124e:	00 00       	nop
    1250:	c0 e0       	ldi	r28, 0x00	; 0
	_delay_ms(1000);
	for(int i=0;i<=80;i+=5)  //loop is used so that arm move smoothly as otherwise weight block might get mispositioned when arm come near to it. 
	{
		servo_1(i);              
    1252:	8c 2f       	mov	r24, r28
    1254:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	9f ef       	ldi	r25, 0xFF	; 255
    125c:	a8 e0       	ldi	r26, 0x08	; 8
    125e:	81 50       	subi	r24, 0x01	; 1
    1260:	90 40       	sbci	r25, 0x00	; 0
    1262:	a0 40       	sbci	r26, 0x00	; 0
    1264:	e1 f7       	brne	.-8      	; 0x125e <pick_bottom_weight_block+0x40>
    1266:	00 c0       	rjmp	.+0      	; 0x1268 <pick_bottom_weight_block+0x4a>
    1268:	00 00       	nop
    126a:	cb 5f       	subi	r28, 0xFB	; 251
{
	servo_3(0); //open the gripper
	_delay_ms(2000);
	 servo_2(165); //set the gripper position so that it can contain the weight block
	_delay_ms(1000);
	for(int i=0;i<=80;i+=5)  //loop is used so that arm move smoothly as otherwise weight block might get mispositioned when arm come near to it. 
    126c:	c5 35       	cpi	r28, 0x55	; 85
    126e:	89 f7       	brne	.-30     	; 0x1252 <pick_bottom_weight_block+0x34>
	{
		servo_1(i);              
		_delay_ms(200);
	}
	servo_3(135); //close the gripper
    1270:	87 e8       	ldi	r24, 0x87	; 135
    1272:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    127a:	a9 e5       	ldi	r26, 0x59	; 89
    127c:	81 50       	subi	r24, 0x01	; 1
    127e:	90 40       	sbci	r25, 0x00	; 0
    1280:	a0 40       	sbci	r26, 0x00	; 0
    1282:	e1 f7       	brne	.-8      	; 0x127c <pick_bottom_weight_block+0x5e>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <pick_bottom_weight_block+0x68>
    1286:	00 00       	nop
	_delay_ms(2000);
	
	servo_1(0);  //lift the weight block
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	9f ef       	ldi	r25, 0xFF	; 255
    1292:	ac e2       	ldi	r26, 0x2C	; 44
    1294:	81 50       	subi	r24, 0x01	; 1
    1296:	90 40       	sbci	r25, 0x00	; 0
    1298:	a0 40       	sbci	r26, 0x00	; 0
    129a:	e1 f7       	brne	.-8      	; 0x1294 <pick_bottom_weight_block+0x76>
    129c:	00 c0       	rjmp	.+0      	; 0x129e <pick_bottom_weight_block+0x80>
    129e:	00 00       	nop
	_delay_ms(1000);

}
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <main>:
	

unsigned int value;
///////////////////////////////////////////////THE MAIN FUNCTION STARTS////////////////////////////////////////////////////
	int main(void)
{
    12a4:	cf 93       	push	r28
	//initializing the required functions or ports etc //
        color_sensor_scaling();
    12a6:	0e 94 ad 04 	call	0x95a	; 0x95a <color_sensor_scaling>
		init_devices();
    12aa:	0e 94 90 04 	call	0x920	; 0x920 <init_devices>
		lcd_set_4bit();
    12ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
		lcd_init();
    12b2:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>

		servo_1(0); //main arm brought vertically upward at 90 degrees
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	9f ef       	ldi	r25, 0xFF	; 255
    12c0:	ac e2       	ldi	r26, 0x2C	; 44
    12c2:	81 50       	subi	r24, 0x01	; 1
    12c4:	90 40       	sbci	r25, 0x00	; 0
    12c6:	a0 40       	sbci	r26, 0x00	; 0
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <main+0x1e>
    12ca:	00 c0       	rjmp	.+0      	; 0x12cc <main+0x28>
    12cc:	00 00       	nop
		_delay_ms(1000);
		servo_3(0); //servo3 i.e. gripper opens
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	ac e2       	ldi	r26, 0x2C	; 44
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	90 40       	sbci	r25, 0x00	; 0
    12de:	a0 40       	sbci	r26, 0x00	; 0
    12e0:	e1 f7       	brne	.-8      	; 0x12da <main+0x36>
    12e2:	00 c0       	rjmp	.+0      	; 0x12e4 <main+0x40>
    12e4:	00 00       	nop
		_delay_ms(1000);
		servo_2(135); ///servo 2 vertically upward
    12e6:	87 e8       	ldi	r24, 0x87	; 135
    12e8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
    12f0:	ac e2       	ldi	r26, 0x2C	; 44
    12f2:	81 50       	subi	r24, 0x01	; 1
    12f4:	90 40       	sbci	r25, 0x00	; 0
    12f6:	a0 40       	sbci	r26, 0x00	; 0
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <main+0x4e>
    12fa:	00 c0       	rjmp	.+0      	; 0x12fc <main+0x58>
    12fc:	00 00       	nop
		_delay_ms(1000);
	//////////////////////////////////////////////
	
	
	//DISTANCE SENSOR WILL READ THE ORIENTATION OF BRIDGE
	sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    12fe:	8b e0       	ldi	r24, 0x0B	; 11
    1300:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_Conversion>
    1304:	80 93 2f 02 	sts	0x022F, r24
	value = Sharp_GP2D12_estimation(sharp);		    //Stores Distance calCulated in a variable "value".
    1308:	0e 94 80 03 	call	0x700	; 0x700 <Sharp_GP2D12_estimation>
    130c:	ac 01       	movw	r20, r24
    130e:	90 93 36 02 	sts	0x0236, r25
    1312:	80 93 35 02 	sts	0x0235, r24
	lcd_print(2,14,value,3);  
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	6e e0       	ldi	r22, 0x0E	; 14
    131a:	23 e0       	ldi	r18, 0x03	; 3
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
/*//////////////////////////////////*/

//In FAVOUR STARTS In FAVOUR STARTS In FAVOUR STARTS In FAVOUR STARTS In FAVOUR STARTS In FAVOUR STARTSIn FAVOUR STARTS In FAVOUR STARTS
if(value<500)
    1322:	80 91 35 02 	lds	r24, 0x0235
    1326:	90 91 36 02 	lds	r25, 0x0236
    132a:	a1 e0       	ldi	r26, 0x01	; 1
    132c:	84 3f       	cpi	r24, 0xF4	; 244
    132e:	9a 07       	cpc	r25, r26
    1330:	10 f0       	brcs	.+4      	; 0x1336 <main+0x92>
    1332:	0c 94 63 33 	jmp	0x66c6	; 0x66c6 <__stack+0x44c7>
{
	forward_mm(37);//35
    1336:	85 e2       	ldi	r24, 0x25	; 37
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
	velocity(144,135);
    133e:	80 e9       	ldi	r24, 0x90	; 144
    1340:	67 e8       	ldi	r22, 0x87	; 135
    1342:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
	stop();
    1346:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	ac e2       	ldi	r26, 0x2C	; 44
    1350:	81 50       	subi	r24, 0x01	; 1
    1352:	90 40       	sbci	r25, 0x00	; 0
    1354:	a0 40       	sbci	r26, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <main+0xac>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <main+0xb6>
    135a:	00 00       	nop
	_delay_ms(1000);

	turn_right();
    135c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
	velocity(150,150);
    1360:	86 e9       	ldi	r24, 0x96	; 150
    1362:	66 e9       	ldi	r22, 0x96	; 150
    1364:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	9f e3       	ldi	r25, 0x3F	; 63
    136c:	a2 e0       	ldi	r26, 0x02	; 2
    136e:	81 50       	subi	r24, 0x01	; 1
    1370:	90 40       	sbci	r25, 0x00	; 0
    1372:	a0 40       	sbci	r26, 0x00	; 0
    1374:	e1 f7       	brne	.-8      	; 0x136e <main+0xca>
    1376:	00 c0       	rjmp	.+0      	; 0x1378 <main+0xd4>
    1378:	00 00       	nop
	_delay_ms(50);
	stop();
    137a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
	turn_right();
    137e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
	velocity(150,150);
    1382:	86 e9       	ldi	r24, 0x96	; 150
    1384:	66 e9       	ldi	r22, 0x96	; 150
    1386:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	9f e3       	ldi	r25, 0x3F	; 63
    138e:	a2 e0       	ldi	r26, 0x02	; 2
    1390:	81 50       	subi	r24, 0x01	; 1
    1392:	90 40       	sbci	r25, 0x00	; 0
    1394:	a0 40       	sbci	r26, 0x00	; 0
    1396:	e1 f7       	brne	.-8      	; 0x1390 <main+0xec>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <main+0xf6>
    139a:	00 00       	nop
	_delay_ms(50);
	stop();
    139c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
	//now facing towards the hazardous blocks

	sense_top2_HZ_waste_block_color();
    13a0:	0e 94 e7 07 	call	0xfce	; 0xfce <sense_top2_HZ_waste_block_color>
	
	turn_right();
    13a4:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
	velocity(150,150);
    13a8:	86 e9       	ldi	r24, 0x96	; 150
    13aa:	66 e9       	ldi	r22, 0x96	; 150
    13ac:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	9f e3       	ldi	r25, 0x3F	; 63
    13b4:	a2 e0       	ldi	r26, 0x02	; 2
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	90 40       	sbci	r25, 0x00	; 0
    13ba:	a0 40       	sbci	r26, 0x00	; 0
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <main+0x112>
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <main+0x11c>
    13c0:	00 00       	nop
	_delay_ms(50);
	stop();
    13c2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
	turn_right();
    13c6:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
	velocity(150,150);
    13ca:	86 e9       	ldi	r24, 0x96	; 150
    13cc:	66 e9       	ldi	r22, 0x96	; 150
    13ce:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	9f e3       	ldi	r25, 0x3F	; 63
    13d6:	a2 e0       	ldi	r26, 0x02	; 2
    13d8:	81 50       	subi	r24, 0x01	; 1
    13da:	90 40       	sbci	r25, 0x00	; 0
    13dc:	a0 40       	sbci	r26, 0x00	; 0
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <main+0x134>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <main+0x13e>
    13e2:	00 00       	nop
	_delay_ms(50);
	stop();
    13e4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
	blackline();
    13e8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	9f ef       	ldi	r25, 0xFF	; 255
    13f0:	ac e2       	ldi	r26, 0x2C	; 44
    13f2:	81 50       	subi	r24, 0x01	; 1
    13f4:	90 40       	sbci	r25, 0x00	; 0
    13f6:	a0 40       	sbci	r26, 0x00	; 0
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <main+0x14e>
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <main+0x158>
    13fc:	00 00       	nop
	_delay_ms(1000);
	
	//bridge crossed successfully
	
	forward_mm(21);
    13fe:	85 e1       	ldi	r24, 0x15	; 21
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
	stop();
    1406:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	9f e7       	ldi	r25, 0x7F	; 127
    140e:	a6 e1       	ldi	r26, 0x16	; 22
    1410:	81 50       	subi	r24, 0x01	; 1
    1412:	90 40       	sbci	r25, 0x00	; 0
    1414:	a0 40       	sbci	r26, 0x00	; 0
    1416:	e1 f7       	brne	.-8      	; 0x1410 <main+0x16c>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <main+0x176>
    141a:	00 00       	nop
	_delay_ms(500);
	blackline();
    141c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	9f ef       	ldi	r25, 0xFF	; 255
    1424:	ac e2       	ldi	r26, 0x2C	; 44
    1426:	81 50       	subi	r24, 0x01	; 1
    1428:	90 40       	sbci	r25, 0x00	; 0
    142a:	a0 40       	sbci	r26, 0x00	; 0
    142c:	e1 f7       	brne	.-8      	; 0x1426 <main+0x182>
    142e:	00 c0       	rjmp	.+0      	; 0x1430 <main+0x18c>
    1430:	00 00       	nop
	_delay_ms(1000);

	//now it will sense the color of flag 2
	servo_1(0);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
	servo_2(135);
    1438:	87 e8       	ldi	r24, 0x87	; 135
    143a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
	servo_3(112);
    143e:	80 e7       	ldi	r24, 0x70	; 112
    1440:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
	//initial positions of servos adjusted as it will hit flag if it is done later
	
	blackline();
    1444:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
	forward_mm(60);
    1448:	8c e3       	ldi	r24, 0x3C	; 60
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
	stop();
    1450:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	9f ef       	ldi	r25, 0xFF	; 255
    1458:	ac e2       	ldi	r26, 0x2C	; 44
    145a:	81 50       	subi	r24, 0x01	; 1
    145c:	90 40       	sbci	r25, 0x00	; 0
    145e:	a0 40       	sbci	r26, 0x00	; 0
    1460:	e1 f7       	brne	.-8      	; 0x145a <main+0x1b6>
    1462:	00 c0       	rjmp	.+0      	; 0x1464 <main+0x1c0>
    1464:	00 00       	nop
	_delay_ms(1000);
	blackline();
    1466:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
	forward_mm(185);
    146a:	89 eb       	ldi	r24, 0xB9	; 185
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
	stop();
    1472:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	ac e2       	ldi	r26, 0x2C	; 44
    147c:	81 50       	subi	r24, 0x01	; 1
    147e:	90 40       	sbci	r25, 0x00	; 0
    1480:	a0 40       	sbci	r26, 0x00	; 0
    1482:	e1 f7       	brne	.-8      	; 0x147c <main+0x1d8>
    1484:	00 c0       	rjmp	.+0      	; 0x1486 <main+0x1e2>
    1486:	00 00       	nop
	_delay_ms(1000);
	velocity(150,150);
    1488:	86 e9       	ldi	r24, 0x96	; 150
    148a:	66 e9       	ldi	r22, 0x96	; 150
    148c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
	soft_right_2_degrees(92);
    1490:	8c e5       	ldi	r24, 0x5C	; 92
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <soft_right_2_degrees>
	velocity(190,180);
    1498:	8e eb       	ldi	r24, 0xBE	; 190
    149a:	64 eb       	ldi	r22, 0xB4	; 180
    149c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
	stop();
    14a0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	9f e7       	ldi	r25, 0x7F	; 127
    14a8:	a6 e1       	ldi	r26, 0x16	; 22
    14aa:	81 50       	subi	r24, 0x01	; 1
    14ac:	90 40       	sbci	r25, 0x00	; 0
    14ae:	a0 40       	sbci	r26, 0x00	; 0
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <main+0x206>
    14b2:	00 c0       	rjmp	.+0      	; 0x14b4 <main+0x210>
    14b4:	00 00       	nop
	_delay_ms(500);
	velocity(182,180);
    14b6:	86 eb       	ldi	r24, 0xB6	; 182
    14b8:	64 eb       	ldi	r22, 0xB4	; 180
    14ba:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
	back_mm(60);
    14be:	8c e3       	ldi	r24, 0x3C	; 60
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
	servo_1(0);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
	servo_2(43);
    14cc:	8b e2       	ldi	r24, 0x2B	; 43
    14ce:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	9f ef       	ldi	r25, 0xFF	; 255
    14d6:	ac e2       	ldi	r26, 0x2C	; 44
    14d8:	81 50       	subi	r24, 0x01	; 1
    14da:	90 40       	sbci	r25, 0x00	; 0
    14dc:	a0 40       	sbci	r26, 0x00	; 0
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <main+0x234>
    14e0:	00 c0       	rjmp	.+0      	; 0x14e2 <main+0x23e>
    14e2:	00 00       	nop
	_delay_ms(1000);
	//now color sensor can read color easily
	flag2_color=check_color();
    14e4:	0e 94 1c 05 	call	0xa38	; 0xa38 <check_color>
    14e8:	80 93 34 02 	sts	0x0234, r24
	//color of flag 2 read successfully and now we will turn robot towards flag 3
	forward_mm(70);
    14ec:	86 e4       	ldi	r24, 0x46	; 70
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	a0 ee       	ldi	r26, 0xE0	; 224
    14fa:	81 50       	subi	r24, 0x01	; 1
    14fc:	90 40       	sbci	r25, 0x00	; 0
    14fe:	a0 40       	sbci	r26, 0x00	; 0
    1500:	e1 f7       	brne	.-8      	; 0x14fa <main+0x256>
    1502:	00 c0       	rjmp	.+0      	; 0x1504 <main+0x260>
    1504:	00 00       	nop
	_delay_ms(5000);
	right_degrees(178);
    1506:	82 eb       	ldi	r24, 0xB2	; 178
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 49 04 	call	0x892	; 0x892 <right_degrees>
	velocity(180,180);
    150e:	84 eb       	ldi	r24, 0xB4	; 180
    1510:	64 eb       	ldi	r22, 0xB4	; 180
    1512:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
	stop();
    1516:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
	back_mm(110);
    151a:	8e e6       	ldi	r24, 0x6E	; 110
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
    1522:	c7 e8       	ldi	r28, 0x87	; 135
	//we will adjust arm so that color sensor faces flag 3
	for (int i=135;i>=45;i-=5)
	{
		servo_2(i);
    1524:	8c 2f       	mov	r24, r28
    1526:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    152a:	8f ef       	ldi	r24, 0xFF	; 255
    152c:	9f e7       	ldi	r25, 0x7F	; 127
    152e:	a6 e1       	ldi	r26, 0x16	; 22
    1530:	81 50       	subi	r24, 0x01	; 1
    1532:	90 40       	sbci	r25, 0x00	; 0
    1534:	a0 40       	sbci	r26, 0x00	; 0
    1536:	e1 f7       	brne	.-8      	; 0x1530 <main+0x28c>
    1538:	00 c0       	rjmp	.+0      	; 0x153a <main+0x296>
    153a:	00 00       	nop
    153c:	c5 50       	subi	r28, 0x05	; 5
	right_degrees(178);
	velocity(180,180);
	stop();
	back_mm(110);
	//we will adjust arm so that color sensor faces flag 3
	for (int i=135;i>=45;i-=5)
    153e:	c8 32       	cpi	r28, 0x28	; 40
    1540:	89 f7       	brne	.-30     	; 0x1524 <main+0x280>
	{
		servo_2(i);
		_delay_ms(500);
	}
	flag3_color=check_color();
    1542:	0e 94 1c 05 	call	0xa38	; 0xa38 <check_color>
    1546:	80 93 23 02 	sts	0x0223, r24
	//flag3_color color is successfully read
	
	///TO FIND THE COLOR OF flag1_color
	//Since we are given that there are 3 colors-Red,Green and Blue of flag and since we now know the color of two of them,remaining color will be
	//color of flag 1
	if(flag3_color!='R' && flag2_color!='R')
    154a:	82 35       	cpi	r24, 0x52	; 82
    154c:	59 f0       	breq	.+22     	; 0x1564 <main+0x2c0>
    154e:	90 91 34 02 	lds	r25, 0x0234
    1552:	92 35       	cpi	r25, 0x52	; 82
    1554:	21 f0       	breq	.+8      	; 0x155e <main+0x2ba>
	{
		flag1_color='R';
    1556:	82 e5       	ldi	r24, 0x52	; 82
    1558:	80 93 1a 02 	sts	0x021A, r24
    155c:	15 c0       	rjmp	.+42     	; 0x1588 <main+0x2e4>
	}
	else if(flag3_color!='G' && flag2_color!='G')
    155e:	87 34       	cpi	r24, 0x47	; 71
    1560:	61 f0       	breq	.+24     	; 0x157a <main+0x2d6>
    1562:	04 c0       	rjmp	.+8      	; 0x156c <main+0x2c8>
    1564:	90 91 34 02 	lds	r25, 0x0234
    1568:	97 34       	cpi	r25, 0x47	; 71
    156a:	21 f0       	breq	.+8      	; 0x1574 <main+0x2d0>
	{
		flag1_color='G';
    156c:	87 e4       	ldi	r24, 0x47	; 71
    156e:	80 93 1a 02 	sts	0x021A, r24
    1572:	0a c0       	rjmp	.+20     	; 0x1588 <main+0x2e4>
	}
	else if(flag3_color!='B' && flag2_color!='B')
    1574:	82 34       	cpi	r24, 0x42	; 66
    1576:	41 f0       	breq	.+16     	; 0x1588 <main+0x2e4>
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <main+0x2de>
    157a:	80 91 34 02 	lds	r24, 0x0234
    157e:	82 34       	cpi	r24, 0x42	; 66
    1580:	19 f0       	breq	.+6      	; 0x1588 <main+0x2e4>
	{
		flag1_color='B';
    1582:	82 e4       	ldi	r24, 0x42	; 66
    1584:	80 93 1a 02 	sts	0x021A, r24
	//color of flag 1 known successfully

	//now we will below determine the correct location of bottommost Low CCL block out of A/B/C
	/////////////////////////////TO DETERMINE BOTTOM BLOCK"S POSITION OUT OF A/B/C
	
	if(flag1_color==bottom_HZ_waste_block_color && flag2_color!=bottom_HZ_waste_block_color && flag3_color!=bottom_HZ_waste_block_color)
    1588:	80 91 1a 02 	lds	r24, 0x021A
    158c:	90 91 17 02 	lds	r25, 0x0217
    1590:	89 17       	cp	r24, r25
    1592:	59 f4       	brne	.+22     	; 0x15aa <main+0x306>
    1594:	90 91 34 02 	lds	r25, 0x0234
    1598:	89 17       	cp	r24, r25
    159a:	39 f0       	breq	.+14     	; 0x15aa <main+0x306>
    159c:	90 91 23 02 	lds	r25, 0x0223
    15a0:	89 17       	cp	r24, r25
    15a2:	19 f0       	breq	.+6      	; 0x15aa <main+0x306>
	bottom_position='A';
    15a4:	81 e4       	ldi	r24, 0x41	; 65
    15a6:	80 93 29 02 	sts	0x0229, r24
	if(flag2_color==bottom_HZ_waste_block_color && flag1_color!=bottom_HZ_waste_block_color && flag3_color!=bottom_HZ_waste_block_color)
    15aa:	80 91 34 02 	lds	r24, 0x0234
    15ae:	90 91 17 02 	lds	r25, 0x0217
    15b2:	89 17       	cp	r24, r25
    15b4:	59 f4       	brne	.+22     	; 0x15cc <main+0x328>
    15b6:	90 91 1a 02 	lds	r25, 0x021A
    15ba:	89 17       	cp	r24, r25
    15bc:	39 f0       	breq	.+14     	; 0x15cc <main+0x328>
    15be:	90 91 23 02 	lds	r25, 0x0223
    15c2:	89 17       	cp	r24, r25
    15c4:	b1 f0       	breq	.+44     	; 0x15f2 <main+0x34e>
	bottom_position='B';
    15c6:	82 e4       	ldi	r24, 0x42	; 66
    15c8:	80 93 29 02 	sts	0x0229, r24
	if(flag3_color==bottom_HZ_waste_block_color && flag2_color!=bottom_HZ_waste_block_color && flag1_color!=bottom_HZ_waste_block_color)
    15cc:	80 91 23 02 	lds	r24, 0x0223
    15d0:	90 91 17 02 	lds	r25, 0x0217
    15d4:	89 17       	cp	r24, r25
    15d6:	69 f4       	brne	.+26     	; 0x15f2 <main+0x34e>
    15d8:	90 91 34 02 	lds	r25, 0x0234
    15dc:	89 17       	cp	r24, r25
    15de:	49 f0       	breq	.+18     	; 0x15f2 <main+0x34e>
    15e0:	90 91 1a 02 	lds	r25, 0x021A
    15e4:	89 17       	cp	r24, r25
    15e6:	29 f0       	breq	.+10     	; 0x15f2 <main+0x34e>
	bottom_position='C';
    15e8:	83 e4       	ldi	r24, 0x43	; 67
    15ea:	80 93 29 02 	sts	0x0229, r24
    15ee:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__stack+0x158d>


	/////////////////////////////////starting  coding for all 3 cases here/////////////////////////////////////////////////////////////////////////////////////////
	///CASE 1-Bottommost block to be placed at Location A
	if(bottom_position=='A')
    15f2:	80 91 29 02 	lds	r24, 0x0229
    15f6:	81 34       	cpi	r24, 0x41	; 65
    15f8:	11 f0       	breq	.+4      	; 0x15fe <main+0x35a>
    15fa:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__stack+0x503>
	{
		
		if(top_HZ_waste_block_color==flag3_color)//IT MEANS THAT MID WASTE BLOCK IS AT FLAG 2,BOTTOM AT flag1_color,TOP AT flag3_color
    15fe:	80 91 10 02 	lds	r24, 0x0210
    1602:	90 91 23 02 	lds	r25, 0x0223
    1606:	89 17       	cp	r24, r25
    1608:	09 f0       	breq	.+2      	; 0x160c <main+0x368>
    160a:	48 c4       	rjmp	.+2192   	; 0x1e9c <main+0xbf8>
		{
			
			rotation_using_blackline_left();
    160c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			
			blackline();
    1610:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	9f ef       	ldi	r25, 0xFF	; 255
    1618:	ac e2       	ldi	r26, 0x2C	; 44
    161a:	81 50       	subi	r24, 0x01	; 1
    161c:	90 40       	sbci	r25, 0x00	; 0
    161e:	a0 40       	sbci	r26, 0x00	; 0
    1620:	e1 f7       	brne	.-8      	; 0x161a <main+0x376>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <main+0x380>
    1624:	00 00       	nop
			_delay_ms(1000);
			
			rotation_using_blackline_right();
    1626:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			
			blackline();
    162a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			
			forward_mm(22);
    162e:	86 e1       	ldi	r24, 0x16	; 22
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			turn_right();
    1636:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(190,180);
    163a:	8e eb       	ldi	r24, 0xBE	; 190
    163c:	64 eb       	ldi	r22, 0xB4	; 180
    163e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1642:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	ac e2       	ldi	r26, 0x2C	; 44
    164c:	81 50       	subi	r24, 0x01	; 1
    164e:	90 40       	sbci	r25, 0x00	; 0
    1650:	a0 40       	sbci	r26, 0x00	; 0
    1652:	e1 f7       	brne	.-8      	; 0x164c <main+0x3a8>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <main+0x3b2>
    1656:	00 00       	nop
			_delay_ms(1000);
			
			blackline();
    1658:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			//////now drop the color box at C
			drop_the_block();
    165c:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			rotation_using_blackline_left();
    1660:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
    1664:	8f ef       	ldi	r24, 0xFF	; 255
    1666:	9f ef       	ldi	r25, 0xFF	; 255
    1668:	ac e2       	ldi	r26, 0x2C	; 44
    166a:	81 50       	subi	r24, 0x01	; 1
    166c:	90 40       	sbci	r25, 0x00	; 0
    166e:	a0 40       	sbci	r26, 0x00	; 0
    1670:	e1 f7       	brne	.-8      	; 0x166a <main+0x3c6>
    1672:	00 c0       	rjmp	.+0      	; 0x1674 <main+0x3d0>
    1674:	00 00       	nop
			_delay_ms(1000);
			blackline();
    1676:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			/// pick the weight from W4
			servo_2(155);
    167a:	8b e9       	ldi	r24, 0x9B	; 155
    167c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	ac e2       	ldi	r26, 0x2C	; 44
    1686:	81 50       	subi	r24, 0x01	; 1
    1688:	90 40       	sbci	r25, 0x00	; 0
    168a:	a0 40       	sbci	r26, 0x00	; 0
    168c:	e1 f7       	brne	.-8      	; 0x1686 <main+0x3e2>
    168e:	00 c0       	rjmp	.+0      	; 0x1690 <main+0x3ec>
    1690:	00 00       	nop
    1692:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{
				servo_1(i);
    1694:	8c 2f       	mov	r24, r28
    1696:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	9f ef       	ldi	r25, 0xFF	; 255
    169e:	a8 e0       	ldi	r26, 0x08	; 8
    16a0:	81 50       	subi	r24, 0x01	; 1
    16a2:	90 40       	sbci	r25, 0x00	; 0
    16a4:	a0 40       	sbci	r26, 0x00	; 0
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <main+0x3fc>
    16a8:	00 c0       	rjmp	.+0      	; 0x16aa <main+0x406>
    16aa:	00 00       	nop
    16ac:	ce 5f       	subi	r28, 0xFE	; 254
			_delay_ms(1000);
			blackline();
			/// pick the weight from W4
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    16ae:	c8 33       	cpi	r28, 0x38	; 56
    16b0:	89 f7       	brne	.-30     	; 0x1694 <main+0x3f0>
			{
				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    16b2:	83 e8       	ldi	r24, 0x83	; 131
    16b4:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	a9 e5       	ldi	r26, 0x59	; 89
    16be:	81 50       	subi	r24, 0x01	; 1
    16c0:	90 40       	sbci	r25, 0x00	; 0
    16c2:	a0 40       	sbci	r26, 0x00	; 0
    16c4:	e1 f7       	brne	.-8      	; 0x16be <main+0x41a>
    16c6:	00 c0       	rjmp	.+0      	; 0x16c8 <main+0x424>
    16c8:	00 00       	nop
			_delay_ms(2000);
			rotation_using_blackline_left();
    16ca:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    16ce:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);//
    16d2:	87 e1       	ldi	r24, 0x17	; 23
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			velocity(190,180);
    16da:	8e eb       	ldi	r24, 0xBE	; 190
    16dc:	64 eb       	ldi	r22, 0xB4	; 180
    16de:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    16e2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    16e6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			rotation_using_blackline_right();
    16ea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			/// drop the weight box in container
			drop_the_block();
    16ee:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);//
    16f2:	88 e1       	ldi	r24, 0x18	; 24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    16fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    16fe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);
    1702:	87 e1       	ldi	r24, 0x17	; 23
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			turn_left();
    170a:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(190,180);
    170e:	8e eb       	ldi	r24, 0xBE	; 190
    1710:	64 eb       	ldi	r22, 0xB4	; 180
    1712:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1716:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	ac e2       	ldi	r26, 0x2C	; 44
    1720:	81 50       	subi	r24, 0x01	; 1
    1722:	90 40       	sbci	r25, 0x00	; 0
    1724:	a0 40       	sbci	r26, 0x00	; 0
    1726:	e1 f7       	brne	.-8      	; 0x1720 <main+0x47c>
    1728:	00 c0       	rjmp	.+0      	; 0x172a <main+0x486>
    172a:	00 00       	nop
			_delay_ms(1000);
			blackline();
    172c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// CROSSING THE BRIDGE
			// NOW WE ArE IN CITY 1
			turn_left();
    1730:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(150,150);
    1734:	86 e9       	ldi	r24, 0x96	; 150
    1736:	66 e9       	ldi	r22, 0x96	; 150
    1738:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	9f e3       	ldi	r25, 0x3F	; 63
    1740:	a2 e0       	ldi	r26, 0x02	; 2
    1742:	81 50       	subi	r24, 0x01	; 1
    1744:	90 40       	sbci	r25, 0x00	; 0
    1746:	a0 40       	sbci	r26, 0x00	; 0
    1748:	e1 f7       	brne	.-8      	; 0x1742 <main+0x49e>
    174a:	00 c0       	rjmp	.+0      	; 0x174c <main+0x4a8>
    174c:	00 00       	nop
			_delay_ms(50);
			stop();
    174e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1752:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			velocity(190,180);
    1756:	8e eb       	ldi	r24, 0xBE	; 190
    1758:	64 eb       	ldi	r22, 0xB4	; 180
    175a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(113);
    175e:	81 e7       	ldi	r24, 0x71	; 113
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			stop();
    1766:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	9f ef       	ldi	r25, 0xFF	; 255
    176e:	ac e2       	ldi	r26, 0x2C	; 44
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	90 40       	sbci	r25, 0x00	; 0
    1774:	a0 40       	sbci	r26, 0x00	; 0
    1776:	e1 f7       	brne	.-8      	; 0x1770 <main+0x4cc>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <main+0x4d6>
    177a:	00 00       	nop
			_delay_ms(1000);
			velocity(190,180);
    177c:	8e eb       	ldi	r24, 0xBE	; 190
    177e:	64 eb       	ldi	r22, 0xB4	; 180
    1780:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			left_degrees(88);
    1784:	88 e5       	ldi	r24, 0x58	; 88
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
			velocity(190,180);
    178c:	8e eb       	ldi	r24, 0xBE	; 190
    178e:	64 eb       	ldi	r22, 0xB4	; 180
    1790:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1794:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	9f e7       	ldi	r25, 0x7F	; 127
    179c:	a6 e1       	ldi	r26, 0x16	; 22
    179e:	81 50       	subi	r24, 0x01	; 1
    17a0:	90 40       	sbci	r25, 0x00	; 0
    17a2:	a0 40       	sbci	r26, 0x00	; 0
    17a4:	e1 f7       	brne	.-8      	; 0x179e <main+0x4fa>
    17a6:	00 c0       	rjmp	.+0      	; 0x17a8 <main+0x504>
    17a8:	00 00       	nop
			_delay_ms(500);
			velocity(182,180);
    17aa:	86 eb       	ldi	r24, 0xB6	; 182
    17ac:	64 eb       	ldi	r22, 0xB4	; 180
    17ae:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			back_mm(83);
    17b2:	83 e5       	ldi	r24, 0x53	; 83
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
			stop();
    17ba:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	9f e7       	ldi	r25, 0x7F	; 127
    17c2:	a6 e1       	ldi	r26, 0x16	; 22
    17c4:	81 50       	subi	r24, 0x01	; 1
    17c6:	90 40       	sbci	r25, 0x00	; 0
    17c8:	a0 40       	sbci	r26, 0x00	; 0
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <main+0x520>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <main+0x52a>
    17ce:	00 00       	nop
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
    17d0:	8b e9       	ldi	r24, 0x9B	; 155
    17d2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	9f ef       	ldi	r25, 0xFF	; 255
    17da:	ac e2       	ldi	r26, 0x2C	; 44
    17dc:	81 50       	subi	r24, 0x01	; 1
    17de:	90 40       	sbci	r25, 0x00	; 0
    17e0:	a0 40       	sbci	r26, 0x00	; 0
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <main+0x538>
    17e4:	00 c0       	rjmp	.+0      	; 0x17e6 <main+0x542>
    17e6:	00 00       	nop
    17e8:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    17ea:	8c 2f       	mov	r24, r28
    17ec:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	9f ef       	ldi	r25, 0xFF	; 255
    17f4:	a8 e0       	ldi	r26, 0x08	; 8
    17f6:	81 50       	subi	r24, 0x01	; 1
    17f8:	90 40       	sbci	r25, 0x00	; 0
    17fa:	a0 40       	sbci	r26, 0x00	; 0
    17fc:	e1 f7       	brne	.-8      	; 0x17f6 <main+0x552>
    17fe:	00 c0       	rjmp	.+0      	; 0x1800 <main+0x55c>
    1800:	00 00       	nop
    1802:	ce 5f       	subi	r28, 0xFE	; 254
			stop();
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    1804:	c8 33       	cpi	r28, 0x38	; 56
    1806:	89 f7       	brne	.-30     	; 0x17ea <main+0x546>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    1808:	83 e8       	ldi	r24, 0x83	; 131
    180a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	a9 e5       	ldi	r26, 0x59	; 89
    1814:	81 50       	subi	r24, 0x01	; 1
    1816:	90 40       	sbci	r25, 0x00	; 0
    1818:	a0 40       	sbci	r26, 0x00	; 0
    181a:	e1 f7       	brne	.-8      	; 0x1814 <main+0x570>
    181c:	00 c0       	rjmp	.+0      	; 0x181e <main+0x57a>
    181e:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    1820:	88 e1       	ldi	r24, 0x18	; 24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1828:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    182c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    1830:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	9f e7       	ldi	r25, 0x7F	; 127
    1838:	a6 e1       	ldi	r26, 0x16	; 22
    183a:	81 50       	subi	r24, 0x01	; 1
    183c:	90 40       	sbci	r25, 0x00	; 0
    183e:	a0 40       	sbci	r26, 0x00	; 0
    1840:	e1 f7       	brne	.-8      	; 0x183a <main+0x596>
    1842:	00 c0       	rjmp	.+0      	; 0x1844 <main+0x5a0>
    1844:	00 00       	nop
			_delay_ms(500);
			velocity(150,150);
    1846:	86 e9       	ldi	r24, 0x96	; 150
    1848:	66 e9       	ldi	r22, 0x96	; 150
    184a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(39);
    184e:	87 e2       	ldi	r24, 0x27	; 39
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			blackline();
    1856:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(3);
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1862:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// DROP THE BOX IN CONTAINER OF CITY 1
			drop_the_block();
    1866:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);//
    186a:	88 e1       	ldi	r24, 0x18	; 24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1872:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1876:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// pick the weight box from weight W5
			servo_2(155);
    187a:	8b e9       	ldi	r24, 0x9B	; 155
    187c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	9f ef       	ldi	r25, 0xFF	; 255
    1884:	ac e2       	ldi	r26, 0x2C	; 44
    1886:	81 50       	subi	r24, 0x01	; 1
    1888:	90 40       	sbci	r25, 0x00	; 0
    188a:	a0 40       	sbci	r26, 0x00	; 0
    188c:	e1 f7       	brne	.-8      	; 0x1886 <main+0x5e2>
    188e:	00 c0       	rjmp	.+0      	; 0x1890 <main+0x5ec>
    1890:	00 00       	nop
    1892:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    1894:	8c 2f       	mov	r24, r28
    1896:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	a8 e0       	ldi	r26, 0x08	; 8
    18a0:	81 50       	subi	r24, 0x01	; 1
    18a2:	90 40       	sbci	r25, 0x00	; 0
    18a4:	a0 40       	sbci	r26, 0x00	; 0
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <main+0x5fc>
    18a8:	00 c0       	rjmp	.+0      	; 0x18aa <main+0x606>
    18aa:	00 00       	nop
    18ac:	ce 5f       	subi	r28, 0xFE	; 254
			rotation_using_blackline_left();
			blackline();
			// pick the weight box from weight W5
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    18ae:	c8 33       	cpi	r28, 0x38	; 56
    18b0:	89 f7       	brne	.-30     	; 0x1894 <main+0x5f0>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    18b2:	83 e8       	ldi	r24, 0x83	; 131
    18b4:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	9f ef       	ldi	r25, 0xFF	; 255
    18bc:	a9 e5       	ldi	r26, 0x59	; 89
    18be:	81 50       	subi	r24, 0x01	; 1
    18c0:	90 40       	sbci	r25, 0x00	; 0
    18c2:	a0 40       	sbci	r26, 0x00	; 0
    18c4:	e1 f7       	brne	.-8      	; 0x18be <main+0x61a>
    18c6:	00 c0       	rjmp	.+0      	; 0x18c8 <main+0x624>
    18c8:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    18ca:	88 e1       	ldi	r24, 0x18	; 24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    18d2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    18d6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    18da:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			forward_mm(24);
    18de:	88 e1       	ldi	r24, 0x18	; 24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    18e6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    18ea:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			//.. drop the weight box in container
			turn_right();
    18ee:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    18f2:	86 e9       	ldi	r24, 0x96	; 150
    18f4:	66 e9       	ldi	r22, 0x96	; 150
    18f6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    18fa:	8f ef       	ldi	r24, 0xFF	; 255
    18fc:	9f e3       	ldi	r25, 0x3F	; 63
    18fe:	a2 e0       	ldi	r26, 0x02	; 2
    1900:	81 50       	subi	r24, 0x01	; 1
    1902:	90 40       	sbci	r25, 0x00	; 0
    1904:	a0 40       	sbci	r26, 0x00	; 0
    1906:	e1 f7       	brne	.-8      	; 0x1900 <main+0x65c>
    1908:	00 c0       	rjmp	.+0      	; 0x190a <main+0x666>
    190a:	00 00       	nop
			_delay_ms(50);
			stop();
    190c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1910:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(8);
    1914:	88 e0       	ldi	r24, 0x08	; 8
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    191c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// pick the middle box
			servo_2(135);
    1920:	87 e8       	ldi	r24, 0x87	; 135
    1922:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1926:	8f ef       	ldi	r24, 0xFF	; 255
    1928:	9f ef       	ldi	r25, 0xFF	; 255
    192a:	ac e2       	ldi	r26, 0x2C	; 44
    192c:	81 50       	subi	r24, 0x01	; 1
    192e:	90 40       	sbci	r25, 0x00	; 0
    1930:	a0 40       	sbci	r26, 0x00	; 0
    1932:	e1 f7       	brne	.-8      	; 0x192c <main+0x688>
    1934:	00 c0       	rjmp	.+0      	; 0x1936 <main+0x692>
    1936:	00 00       	nop
			_delay_ms(1000);
			servo_3(0);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	9f ef       	ldi	r25, 0xFF	; 255
    1942:	ac e2       	ldi	r26, 0x2C	; 44
    1944:	81 50       	subi	r24, 0x01	; 1
    1946:	90 40       	sbci	r25, 0x00	; 0
    1948:	a0 40       	sbci	r26, 0x00	; 0
    194a:	e1 f7       	brne	.-8      	; 0x1944 <main+0x6a0>
    194c:	00 c0       	rjmp	.+0      	; 0x194e <main+0x6aa>
    194e:	00 00       	nop
    1950:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
			{
				servo_1(i);
    1952:	8c 2f       	mov	r24, r28
    1954:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9f ef       	ldi	r25, 0xFF	; 255
    195c:	ac e2       	ldi	r26, 0x2C	; 44
    195e:	81 50       	subi	r24, 0x01	; 1
    1960:	90 40       	sbci	r25, 0x00	; 0
    1962:	a0 40       	sbci	r26, 0x00	; 0
    1964:	e1 f7       	brne	.-8      	; 0x195e <main+0x6ba>
    1966:	00 c0       	rjmp	.+0      	; 0x1968 <main+0x6c4>
    1968:	00 00       	nop
    196a:	cb 5f       	subi	r28, 0xFB	; 251
			// pick the middle box
			servo_2(135);
			_delay_ms(1000);
			servo_3(0);
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
    196c:	cd 32       	cpi	r28, 0x2D	; 45
    196e:	89 f7       	brne	.-30     	; 0x1952 <main+0x6ae>
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	9f ef       	ldi	r25, 0xFF	; 255
    1974:	ac e2       	ldi	r26, 0x2C	; 44
    1976:	81 50       	subi	r24, 0x01	; 1
    1978:	90 40       	sbci	r25, 0x00	; 0
    197a:	a0 40       	sbci	r26, 0x00	; 0
    197c:	e1 f7       	brne	.-8      	; 0x1976 <main+0x6d2>
    197e:	00 c0       	rjmp	.+0      	; 0x1980 <main+0x6dc>
    1980:	00 00       	nop
				_delay_ms(1000);


			}
			_delay_ms(1000);
			servo_3(114);
    1982:	82 e7       	ldi	r24, 0x72	; 114
    1984:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
			turn_right();
    1988:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    198c:	86 e9       	ldi	r24, 0x96	; 150
    198e:	66 e9       	ldi	r22, 0x96	; 150
    1990:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	9f e3       	ldi	r25, 0x3F	; 63
    1998:	a2 e0       	ldi	r26, 0x02	; 2
    199a:	81 50       	subi	r24, 0x01	; 1
    199c:	90 40       	sbci	r25, 0x00	; 0
    199e:	a0 40       	sbci	r26, 0x00	; 0
    19a0:	e1 f7       	brne	.-8      	; 0x199a <main+0x6f6>
    19a2:	00 c0       	rjmp	.+0      	; 0x19a4 <main+0x700>
    19a4:	00 00       	nop
			_delay_ms(50);
			stop();
    19a6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			turn_right();
    19aa:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    19ae:	86 e9       	ldi	r24, 0x96	; 150
    19b0:	66 e9       	ldi	r22, 0x96	; 150
    19b2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	9f e3       	ldi	r25, 0x3F	; 63
    19ba:	a2 e0       	ldi	r26, 0x02	; 2
    19bc:	81 50       	subi	r24, 0x01	; 1
    19be:	90 40       	sbci	r25, 0x00	; 0
    19c0:	a0 40       	sbci	r26, 0x00	; 0
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <main+0x718>
    19c4:	00 c0       	rjmp	.+0      	; 0x19c6 <main+0x722>
    19c6:	00 00       	nop
			_delay_ms(50);
			stop();
    19c8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    19cc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// now crossing the bridge second time
			forward_mm(21);
    19d0:	85 e1       	ldi	r24, 0x15	; 21
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			stop();
    19d8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	9f e7       	ldi	r25, 0x7F	; 127
    19e0:	a6 e1       	ldi	r26, 0x16	; 22
    19e2:	81 50       	subi	r24, 0x01	; 1
    19e4:	90 40       	sbci	r25, 0x00	; 0
    19e6:	a0 40       	sbci	r26, 0x00	; 0
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <main+0x73e>
    19ea:	00 c0       	rjmp	.+0      	; 0x19ec <main+0x748>
    19ec:	00 00       	nop
			_delay_ms(500);
			blackline();
    19ee:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    19f2:	8f ef       	ldi	r24, 0xFF	; 255
    19f4:	9f ef       	ldi	r25, 0xFF	; 255
    19f6:	ac e2       	ldi	r26, 0x2C	; 44
    19f8:	81 50       	subi	r24, 0x01	; 1
    19fa:	90 40       	sbci	r25, 0x00	; 0
    19fc:	a0 40       	sbci	r26, 0x00	; 0
    19fe:	e1 f7       	brne	.-8      	; 0x19f8 <main+0x754>
    1a00:	00 c0       	rjmp	.+0      	; 0x1a02 <main+0x75e>
    1a02:	00 00       	nop
			_delay_ms(1000);
			// drop the color box at b
			drop_the_block();
    1a04:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			turn_right();
    1a08:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    1a0c:	86 e9       	ldi	r24, 0x96	; 150
    1a0e:	66 e9       	ldi	r22, 0x96	; 150
    1a10:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	9f e3       	ldi	r25, 0x3F	; 63
    1a18:	a2 e0       	ldi	r26, 0x02	; 2
    1a1a:	81 50       	subi	r24, 0x01	; 1
    1a1c:	90 40       	sbci	r25, 0x00	; 0
    1a1e:	a0 40       	sbci	r26, 0x00	; 0
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <main+0x776>
    1a22:	00 c0       	rjmp	.+0      	; 0x1a24 <main+0x780>
    1a24:	00 00       	nop
			_delay_ms(50);
			stop();
    1a26:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1a2a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// pick the weight box from weight b

			servo_2(155);
    1a2e:	8b e9       	ldi	r24, 0x9B	; 155
    1a30:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	9f ef       	ldi	r25, 0xFF	; 255
    1a38:	ac e2       	ldi	r26, 0x2C	; 44
    1a3a:	81 50       	subi	r24, 0x01	; 1
    1a3c:	90 40       	sbci	r25, 0x00	; 0
    1a3e:	a0 40       	sbci	r26, 0x00	; 0
    1a40:	e1 f7       	brne	.-8      	; 0x1a3a <main+0x796>
    1a42:	00 c0       	rjmp	.+0      	; 0x1a44 <main+0x7a0>
    1a44:	00 00       	nop
    1a46:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    1a48:	8c 2f       	mov	r24, r28
    1a4a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	9f ef       	ldi	r25, 0xFF	; 255
    1a52:	a8 e0       	ldi	r26, 0x08	; 8
    1a54:	81 50       	subi	r24, 0x01	; 1
    1a56:	90 40       	sbci	r25, 0x00	; 0
    1a58:	a0 40       	sbci	r26, 0x00	; 0
    1a5a:	e1 f7       	brne	.-8      	; 0x1a54 <main+0x7b0>
    1a5c:	00 c0       	rjmp	.+0      	; 0x1a5e <main+0x7ba>
    1a5e:	00 00       	nop
    1a60:	ce 5f       	subi	r28, 0xFE	; 254
			blackline();
			// pick the weight box from weight b

			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    1a62:	c8 33       	cpi	r28, 0x38	; 56
    1a64:	89 f7       	brne	.-30     	; 0x1a48 <main+0x7a4>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    1a66:	83 e8       	ldi	r24, 0x83	; 131
    1a68:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	9f ef       	ldi	r25, 0xFF	; 255
    1a70:	a9 e5       	ldi	r26, 0x59	; 89
    1a72:	81 50       	subi	r24, 0x01	; 1
    1a74:	90 40       	sbci	r25, 0x00	; 0
    1a76:	a0 40       	sbci	r26, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <main+0x7ce>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <main+0x7d8>
    1a7c:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    1a7e:	88 e1       	ldi	r24, 0x18	; 24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1a86:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1a8a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);
    1a8e:	87 e1       	ldi	r24, 0x17	; 23
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			velocity(190,180);
    1a96:	8e eb       	ldi	r24, 0xBE	; 190
    1a98:	64 eb       	ldi	r22, 0xB4	; 180
    1a9a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1a9e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1aa2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			rotation_using_blackline_right();
    1aa6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			/// drop the weight box in container
			drop_the_block();
    1aaa:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);
    1aae:	88 e1       	ldi	r24, 0x18	; 24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1ab6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	9f ef       	ldi	r25, 0xFF	; 255
    1abe:	ac e2       	ldi	r26, 0x2C	; 44
    1ac0:	81 50       	subi	r24, 0x01	; 1
    1ac2:	90 40       	sbci	r25, 0x00	; 0
    1ac4:	a0 40       	sbci	r26, 0x00	; 0
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <main+0x81c>
    1ac8:	00 c0       	rjmp	.+0      	; 0x1aca <main+0x826>
    1aca:	00 00       	nop
			_delay_ms(1000);
			blackline();
    1acc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// pick the weight box from weight W3
			servo_2(155);
    1ad0:	8b e9       	ldi	r24, 0x9B	; 155
    1ad2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	9f ef       	ldi	r25, 0xFF	; 255
    1ada:	ac e2       	ldi	r26, 0x2C	; 44
    1adc:	81 50       	subi	r24, 0x01	; 1
    1ade:	90 40       	sbci	r25, 0x00	; 0
    1ae0:	a0 40       	sbci	r26, 0x00	; 0
    1ae2:	e1 f7       	brne	.-8      	; 0x1adc <main+0x838>
    1ae4:	00 c0       	rjmp	.+0      	; 0x1ae6 <main+0x842>
    1ae6:	00 00       	nop
    1ae8:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    1aea:	8c 2f       	mov	r24, r28
    1aec:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	a8 e0       	ldi	r26, 0x08	; 8
    1af6:	81 50       	subi	r24, 0x01	; 1
    1af8:	90 40       	sbci	r25, 0x00	; 0
    1afa:	a0 40       	sbci	r26, 0x00	; 0
    1afc:	e1 f7       	brne	.-8      	; 0x1af6 <main+0x852>
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <main+0x85c>
    1b00:	00 00       	nop
    1b02:	ce 5f       	subi	r28, 0xFE	; 254
			_delay_ms(1000);
			blackline();
			// pick the weight box from weight W3
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    1b04:	c8 33       	cpi	r28, 0x38	; 56
    1b06:	89 f7       	brne	.-30     	; 0x1aea <main+0x846>


				servo_1(i);
				_delay_ms(200);
			}
			servo_3(131);
    1b08:	83 e8       	ldi	r24, 0x83	; 131
    1b0a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
    1b10:	9f ef       	ldi	r25, 0xFF	; 255
    1b12:	a9 e5       	ldi	r26, 0x59	; 89
    1b14:	81 50       	subi	r24, 0x01	; 1
    1b16:	90 40       	sbci	r25, 0x00	; 0
    1b18:	a0 40       	sbci	r26, 0x00	; 0
    1b1a:	e1 f7       	brne	.-8      	; 0x1b14 <main+0x870>
    1b1c:	00 c0       	rjmp	.+0      	; 0x1b1e <main+0x87a>
    1b1e:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    1b20:	88 e1       	ldi	r24, 0x18	; 24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1b28:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1b2c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(24);
    1b30:	88 e1       	ldi	r24, 0x18	; 24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1b38:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			// drop the weight box in container
			drop_the_block();
    1b3c:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);
    1b40:	88 e1       	ldi	r24, 0x18	; 24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1b48:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    1b4c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);
    1b50:	87 e1       	ldi	r24, 0x17	; 23
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			turn_left();
    1b58:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(190,180);
    1b5c:	8e eb       	ldi	r24, 0xBE	; 190
    1b5e:	64 eb       	ldi	r22, 0xB4	; 180
    1b60:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1b64:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	ac e2       	ldi	r26, 0x2C	; 44
    1b6e:	81 50       	subi	r24, 0x01	; 1
    1b70:	90 40       	sbci	r25, 0x00	; 0
    1b72:	a0 40       	sbci	r26, 0x00	; 0
    1b74:	e1 f7       	brne	.-8      	; 0x1b6e <main+0x8ca>
    1b76:	00 c0       	rjmp	.+0      	; 0x1b78 <main+0x8d4>
    1b78:	00 00       	nop
			_delay_ms(1000);
			blackline();
    1b7a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// CROSSING THE BRIDGE
			// NOW WE ARE IN CITY 1
			turn_left();
    1b7e:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(150,150);
    1b82:	86 e9       	ldi	r24, 0x96	; 150
    1b84:	66 e9       	ldi	r22, 0x96	; 150
    1b86:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	9f e3       	ldi	r25, 0x3F	; 63
    1b8e:	a2 e0       	ldi	r26, 0x02	; 2
    1b90:	81 50       	subi	r24, 0x01	; 1
    1b92:	90 40       	sbci	r25, 0x00	; 0
    1b94:	a0 40       	sbci	r26, 0x00	; 0
    1b96:	e1 f7       	brne	.-8      	; 0x1b90 <main+0x8ec>
    1b98:	00 c0       	rjmp	.+0      	; 0x1b9a <main+0x8f6>
    1b9a:	00 00       	nop
			_delay_ms(50);
			stop();
    1b9c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1ba0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			velocity(190,180);
    1ba4:	8e eb       	ldi	r24, 0xBE	; 190
    1ba6:	64 eb       	ldi	r22, 0xB4	; 180
    1ba8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(113);
    1bac:	81 e7       	ldi	r24, 0x71	; 113
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			stop();
    1bb4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	9f ef       	ldi	r25, 0xFF	; 255
    1bbc:	ac e2       	ldi	r26, 0x2C	; 44
    1bbe:	81 50       	subi	r24, 0x01	; 1
    1bc0:	90 40       	sbci	r25, 0x00	; 0
    1bc2:	a0 40       	sbci	r26, 0x00	; 0
    1bc4:	e1 f7       	brne	.-8      	; 0x1bbe <main+0x91a>
    1bc6:	00 c0       	rjmp	.+0      	; 0x1bc8 <main+0x924>
    1bc8:	00 00       	nop
			_delay_ms(1000);
			velocity(190,180);
    1bca:	8e eb       	ldi	r24, 0xBE	; 190
    1bcc:	64 eb       	ldi	r22, 0xB4	; 180
    1bce:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			left_degrees(88);
    1bd2:	88 e5       	ldi	r24, 0x58	; 88
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
			velocity(190,180);
    1bda:	8e eb       	ldi	r24, 0xBE	; 190
    1bdc:	64 eb       	ldi	r22, 0xB4	; 180
    1bde:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1be2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	9f e7       	ldi	r25, 0x7F	; 127
    1bea:	a6 e1       	ldi	r26, 0x16	; 22
    1bec:	81 50       	subi	r24, 0x01	; 1
    1bee:	90 40       	sbci	r25, 0x00	; 0
    1bf0:	a0 40       	sbci	r26, 0x00	; 0
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <main+0x948>
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <main+0x952>
    1bf6:	00 00       	nop
			_delay_ms(500);
			velocity(182,180);
    1bf8:	86 eb       	ldi	r24, 0xB6	; 182
    1bfa:	64 eb       	ldi	r22, 0xB4	; 180
    1bfc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			back_mm(83);
    1c00:	83 e5       	ldi	r24, 0x53	; 83
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
			stop();
    1c08:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	9f e7       	ldi	r25, 0x7F	; 127
    1c10:	a6 e1       	ldi	r26, 0x16	; 22
    1c12:	81 50       	subi	r24, 0x01	; 1
    1c14:	90 40       	sbci	r25, 0x00	; 0
    1c16:	a0 40       	sbci	r26, 0x00	; 0
    1c18:	e1 f7       	brne	.-8      	; 0x1c12 <main+0x96e>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <main+0x978>
    1c1c:	00 00       	nop
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
    1c1e:	8b e9       	ldi	r24, 0x9B	; 155
    1c20:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	9f ef       	ldi	r25, 0xFF	; 255
    1c28:	ac e2       	ldi	r26, 0x2C	; 44
    1c2a:	81 50       	subi	r24, 0x01	; 1
    1c2c:	90 40       	sbci	r25, 0x00	; 0
    1c2e:	a0 40       	sbci	r26, 0x00	; 0
    1c30:	e1 f7       	brne	.-8      	; 0x1c2a <main+0x986>
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <main+0x990>
    1c34:	00 00       	nop
    1c36:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    1c38:	8c 2f       	mov	r24, r28
    1c3a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	a8 e0       	ldi	r26, 0x08	; 8
    1c44:	81 50       	subi	r24, 0x01	; 1
    1c46:	90 40       	sbci	r25, 0x00	; 0
    1c48:	a0 40       	sbci	r26, 0x00	; 0
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <main+0x9a0>
    1c4c:	00 c0       	rjmp	.+0      	; 0x1c4e <main+0x9aa>
    1c4e:	00 00       	nop
    1c50:	ce 5f       	subi	r28, 0xFE	; 254
			stop();
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    1c52:	c8 33       	cpi	r28, 0x38	; 56
    1c54:	89 f7       	brne	.-30     	; 0x1c38 <main+0x994>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    1c56:	83 e8       	ldi	r24, 0x83	; 131
    1c58:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1c5c:	8f ef       	ldi	r24, 0xFF	; 255
    1c5e:	9f ef       	ldi	r25, 0xFF	; 255
    1c60:	a9 e5       	ldi	r26, 0x59	; 89
    1c62:	81 50       	subi	r24, 0x01	; 1
    1c64:	90 40       	sbci	r25, 0x00	; 0
    1c66:	a0 40       	sbci	r26, 0x00	; 0
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <main+0x9be>
    1c6a:	00 c0       	rjmp	.+0      	; 0x1c6c <main+0x9c8>
    1c6c:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    1c6e:	88 e1       	ldi	r24, 0x18	; 24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1c76:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1c7a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    1c7e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	9f e7       	ldi	r25, 0x7F	; 127
    1c86:	a6 e1       	ldi	r26, 0x16	; 22
    1c88:	81 50       	subi	r24, 0x01	; 1
    1c8a:	90 40       	sbci	r25, 0x00	; 0
    1c8c:	a0 40       	sbci	r26, 0x00	; 0
    1c8e:	e1 f7       	brne	.-8      	; 0x1c88 <main+0x9e4>
    1c90:	00 c0       	rjmp	.+0      	; 0x1c92 <main+0x9ee>
    1c92:	00 00       	nop
			_delay_ms(500);
			velocity(150,150);
    1c94:	86 e9       	ldi	r24, 0x96	; 150
    1c96:	66 e9       	ldi	r22, 0x96	; 150
    1c98:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(39);
    1c9c:	87 e2       	ldi	r24, 0x27	; 39
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			blackline();
    1ca4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(3);
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1cb0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// DROP THE BOX IN CONTAINER
			drop_the_block();
    1cb4:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);
    1cb8:	88 e1       	ldi	r24, 0x18	; 24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1cc0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1cc4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// pick the weight box from weight b
			servo_2(155);
    1cc8:	8b e9       	ldi	r24, 0x9B	; 155
    1cca:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	9f ef       	ldi	r25, 0xFF	; 255
    1cd2:	ac e2       	ldi	r26, 0x2C	; 44
    1cd4:	81 50       	subi	r24, 0x01	; 1
    1cd6:	90 40       	sbci	r25, 0x00	; 0
    1cd8:	a0 40       	sbci	r26, 0x00	; 0
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <main+0xa30>
    1cdc:	00 c0       	rjmp	.+0      	; 0x1cde <main+0xa3a>
    1cde:	00 00       	nop
    1ce0:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    1ce2:	8c 2f       	mov	r24, r28
    1ce4:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	9f ef       	ldi	r25, 0xFF	; 255
    1cec:	a8 e0       	ldi	r26, 0x08	; 8
    1cee:	81 50       	subi	r24, 0x01	; 1
    1cf0:	90 40       	sbci	r25, 0x00	; 0
    1cf2:	a0 40       	sbci	r26, 0x00	; 0
    1cf4:	e1 f7       	brne	.-8      	; 0x1cee <main+0xa4a>
    1cf6:	00 c0       	rjmp	.+0      	; 0x1cf8 <main+0xa54>
    1cf8:	00 00       	nop
    1cfa:	ce 5f       	subi	r28, 0xFE	; 254
			rotation_using_blackline_left();
			blackline();
			// pick the weight box from weight b
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    1cfc:	c8 33       	cpi	r28, 0x38	; 56
    1cfe:	89 f7       	brne	.-30     	; 0x1ce2 <main+0xa3e>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    1d00:	83 e8       	ldi	r24, 0x83	; 131
    1d02:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1d06:	8f ef       	ldi	r24, 0xFF	; 255
    1d08:	9f ef       	ldi	r25, 0xFF	; 255
    1d0a:	a9 e5       	ldi	r26, 0x59	; 89
    1d0c:	81 50       	subi	r24, 0x01	; 1
    1d0e:	90 40       	sbci	r25, 0x00	; 0
    1d10:	a0 40       	sbci	r26, 0x00	; 0
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <main+0xa68>
    1d14:	00 c0       	rjmp	.+0      	; 0x1d16 <main+0xa72>
    1d16:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    1d18:	88 e1       	ldi	r24, 0x18	; 24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    1d20:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1d24:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    1d28:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			forward_mm(24);
    1d2c:	88 e1       	ldi	r24, 0x18	; 24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			
			rotation_using_blackline_left();
    1d34:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1d38:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			//.. drop the weight box in container
			turn_right();
    1d3c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    1d40:	86 e9       	ldi	r24, 0x96	; 150
    1d42:	66 e9       	ldi	r22, 0x96	; 150
    1d44:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	9f e3       	ldi	r25, 0x3F	; 63
    1d4c:	a2 e0       	ldi	r26, 0x02	; 2
    1d4e:	81 50       	subi	r24, 0x01	; 1
    1d50:	90 40       	sbci	r25, 0x00	; 0
    1d52:	a0 40       	sbci	r26, 0x00	; 0
    1d54:	e1 f7       	brne	.-8      	; 0x1d4e <main+0xaaa>
    1d56:	00 c0       	rjmp	.+0      	; 0x1d58 <main+0xab4>
    1d58:	00 00       	nop
			_delay_ms(50);
			stop();
    1d5a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1d5e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(8);
    1d62:	88 e0       	ldi	r24, 0x08	; 8
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1d6a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// pick the bottom box
			servo_2(135);
    1d6e:	87 e8       	ldi	r24, 0x87	; 135
    1d70:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1d74:	8f ef       	ldi	r24, 0xFF	; 255
    1d76:	9f ef       	ldi	r25, 0xFF	; 255
    1d78:	ac e2       	ldi	r26, 0x2C	; 44
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	90 40       	sbci	r25, 0x00	; 0
    1d7e:	a0 40       	sbci	r26, 0x00	; 0
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <main+0xad6>
    1d82:	00 c0       	rjmp	.+0      	; 0x1d84 <main+0xae0>
    1d84:	00 00       	nop
			_delay_ms(1000);
			servo_3(0);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	9f ef       	ldi	r25, 0xFF	; 255
    1d90:	ac e2       	ldi	r26, 0x2C	; 44
    1d92:	81 50       	subi	r24, 0x01	; 1
    1d94:	90 40       	sbci	r25, 0x00	; 0
    1d96:	a0 40       	sbci	r26, 0x00	; 0
    1d98:	e1 f7       	brne	.-8      	; 0x1d92 <main+0xaee>
    1d9a:	00 c0       	rjmp	.+0      	; 0x1d9c <main+0xaf8>
    1d9c:	00 00       	nop
    1d9e:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
			{
				servo_1(i);
    1da0:	8c 2f       	mov	r24, r28
    1da2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	ac e2       	ldi	r26, 0x2C	; 44
    1dac:	81 50       	subi	r24, 0x01	; 1
    1dae:	90 40       	sbci	r25, 0x00	; 0
    1db0:	a0 40       	sbci	r26, 0x00	; 0
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <main+0xb08>
    1db4:	00 c0       	rjmp	.+0      	; 0x1db6 <main+0xb12>
    1db6:	00 00       	nop
    1db8:	cb 5f       	subi	r28, 0xFB	; 251
			// pick the bottom box
			servo_2(135);
			_delay_ms(1000);
			servo_3(0);
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
    1dba:	cd 32       	cpi	r28, 0x2D	; 45
    1dbc:	89 f7       	brne	.-30     	; 0x1da0 <main+0xafc>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	9f ef       	ldi	r25, 0xFF	; 255
    1dc2:	ac e2       	ldi	r26, 0x2C	; 44
    1dc4:	81 50       	subi	r24, 0x01	; 1
    1dc6:	90 40       	sbci	r25, 0x00	; 0
    1dc8:	a0 40       	sbci	r26, 0x00	; 0
    1dca:	e1 f7       	brne	.-8      	; 0x1dc4 <main+0xb20>
    1dcc:	00 c0       	rjmp	.+0      	; 0x1dce <main+0xb2a>
    1dce:	00 00       	nop
				_delay_ms(1000);


			}
			_delay_ms(1000);
			servo_3(114);
    1dd0:	82 e7       	ldi	r24, 0x72	; 114
    1dd2:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
			turn_right();
    1dd6:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    1dda:	86 e9       	ldi	r24, 0x96	; 150
    1ddc:	66 e9       	ldi	r22, 0x96	; 150
    1dde:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	9f e3       	ldi	r25, 0x3F	; 63
    1de6:	a2 e0       	ldi	r26, 0x02	; 2
    1de8:	81 50       	subi	r24, 0x01	; 1
    1dea:	90 40       	sbci	r25, 0x00	; 0
    1dec:	a0 40       	sbci	r26, 0x00	; 0
    1dee:	e1 f7       	brne	.-8      	; 0x1de8 <main+0xb44>
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <main+0xb4e>
    1df2:	00 00       	nop
			_delay_ms(50);
			stop();
    1df4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			turn_right();
    1df8:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    1dfc:	86 e9       	ldi	r24, 0x96	; 150
    1dfe:	66 e9       	ldi	r22, 0x96	; 150
    1e00:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	9f e3       	ldi	r25, 0x3F	; 63
    1e08:	a2 e0       	ldi	r26, 0x02	; 2
    1e0a:	81 50       	subi	r24, 0x01	; 1
    1e0c:	90 40       	sbci	r25, 0x00	; 0
    1e0e:	a0 40       	sbci	r26, 0x00	; 0
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <main+0xb66>
    1e12:	00 c0       	rjmp	.+0      	; 0x1e14 <main+0xb70>
    1e14:	00 00       	nop
			_delay_ms(50);
			stop();
    1e16:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1e1a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// now crossing the bridge last time
			// we are in city 2
			forward_mm(24);
    1e1e:	88 e1       	ldi	r24, 0x18	; 24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1e26:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    1e2a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward();
    1e2e:	0e 94 88 04 	call	0x910	; 0x910 <forward>
			velocity(190,180);
    1e32:	8e eb       	ldi	r24, 0xBE	; 190
    1e34:	64 eb       	ldi	r22, 0xB4	; 180
    1e36:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			blackline();
    1e3a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>

			velocity(190,180);
    1e3e:	8e eb       	ldi	r24, 0xBE	; 190
    1e40:	64 eb       	ldi	r22, 0xB4	; 180
    1e42:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(113);
    1e46:	81 e7       	ldi	r24, 0x71	; 113
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			stop();
    1e4e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	ac e2       	ldi	r26, 0x2C	; 44
    1e58:	81 50       	subi	r24, 0x01	; 1
    1e5a:	90 40       	sbci	r25, 0x00	; 0
    1e5c:	a0 40       	sbci	r26, 0x00	; 0
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <main+0xbb4>
    1e60:	00 c0       	rjmp	.+0      	; 0x1e62 <main+0xbbe>
    1e62:	00 00       	nop
			_delay_ms(1000);
			velocity(190,180);
    1e64:	8e eb       	ldi	r24, 0xBE	; 190
    1e66:	64 eb       	ldi	r22, 0xB4	; 180
    1e68:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			left_degrees(88);
    1e6c:	88 e5       	ldi	r24, 0x58	; 88
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
			velocity(190,180);
    1e74:	8e eb       	ldi	r24, 0xBE	; 190
    1e76:	64 eb       	ldi	r22, 0xB4	; 180
    1e78:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1e7c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	9f e7       	ldi	r25, 0x7F	; 127
    1e84:	a6 e1       	ldi	r26, 0x16	; 22
    1e86:	81 50       	subi	r24, 0x01	; 1
    1e88:	90 40       	sbci	r25, 0x00	; 0
    1e8a:	a0 40       	sbci	r26, 0x00	; 0
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <main+0xbe2>
    1e8e:	00 c0       	rjmp	.+0      	; 0x1e90 <main+0xbec>
    1e90:	00 00       	nop
			_delay_ms(500);
			blackline();
    1e92:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// drop the color box at A
			drop_the_block();
    1e96:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
    1e9a:	33 c4       	rjmp	.+2150   	; 0x2702 <__stack+0x503>

		//////////////////////////////////////////////////////////////////////////////



		else if(flag2_color==top_HZ_waste_block_color)  //IT MEANS BOTTOM AT flag1_color OR A,TOP AT FLAG 2,WHICH MEANS MID AT flag3_color
    1e9c:	90 91 34 02 	lds	r25, 0x0234
    1ea0:	89 17       	cp	r24, r25
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <main+0xc02>
    1ea4:	2e c4       	rjmp	.+2140   	; 0x2702 <__stack+0x503>
		{
			rotation_using_blackline_right();
    1ea6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			//DROP THE BOX AT B
			forward_mm(35);
    1eaa:	83 e2       	ldi	r24, 0x23	; 35
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1eb2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    1eb6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(22);
    1eba:	86 e1       	ldi	r24, 0x16	; 22
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			turn_right();
    1ec2:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(190,180);
    1ec6:	8e eb       	ldi	r24, 0xBE	; 190
    1ec8:	64 eb       	ldi	r22, 0xB4	; 180
    1eca:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1ece:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    1ed4:	9f ef       	ldi	r25, 0xFF	; 255
    1ed6:	ac e2       	ldi	r26, 0x2C	; 44
    1ed8:	81 50       	subi	r24, 0x01	; 1
    1eda:	90 40       	sbci	r25, 0x00	; 0
    1edc:	a0 40       	sbci	r26, 0x00	; 0
    1ede:	e1 f7       	brne	.-8      	; 0x1ed8 <main+0xc34>
    1ee0:	00 c0       	rjmp	.+0      	; 0x1ee2 <main+0xc3e>
    1ee2:	00 00       	nop
			_delay_ms(1000);
			blackline();
    1ee4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			/// pick the weight from W5
			servo_2(155);
    1ee8:	8b e9       	ldi	r24, 0x9B	; 155
    1eea:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	9f ef       	ldi	r25, 0xFF	; 255
    1ef2:	ac e2       	ldi	r26, 0x2C	; 44
    1ef4:	81 50       	subi	r24, 0x01	; 1
    1ef6:	90 40       	sbci	r25, 0x00	; 0
    1ef8:	a0 40       	sbci	r26, 0x00	; 0
    1efa:	e1 f7       	brne	.-8      	; 0x1ef4 <main+0xc50>
    1efc:	00 c0       	rjmp	.+0      	; 0x1efe <main+0xc5a>
    1efe:	00 00       	nop
    1f00:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{
				servo_1(i);
    1f02:	8c 2f       	mov	r24, r28
    1f04:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	9f ef       	ldi	r25, 0xFF	; 255
    1f0c:	a8 e0       	ldi	r26, 0x08	; 8
    1f0e:	81 50       	subi	r24, 0x01	; 1
    1f10:	90 40       	sbci	r25, 0x00	; 0
    1f12:	a0 40       	sbci	r26, 0x00	; 0
    1f14:	e1 f7       	brne	.-8      	; 0x1f0e <main+0xc6a>
    1f16:	00 c0       	rjmp	.+0      	; 0x1f18 <main+0xc74>
    1f18:	00 00       	nop
    1f1a:	ce 5f       	subi	r28, 0xFE	; 254
			_delay_ms(1000);
			blackline();
			/// pick the weight from W5
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    1f1c:	c8 33       	cpi	r28, 0x38	; 56
    1f1e:	89 f7       	brne	.-30     	; 0x1f02 <main+0xc5e>
			{
				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    1f20:	83 e8       	ldi	r24, 0x83	; 131
    1f22:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	9f ef       	ldi	r25, 0xFF	; 255
    1f2a:	a9 e5       	ldi	r26, 0x59	; 89
    1f2c:	81 50       	subi	r24, 0x01	; 1
    1f2e:	90 40       	sbci	r25, 0x00	; 0
    1f30:	a0 40       	sbci	r26, 0x00	; 0
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <main+0xc88>
    1f34:	00 c0       	rjmp	.+0      	; 0x1f36 <main+0xc92>
    1f36:	00 00       	nop
			_delay_ms(2000);
			rotation_using_blackline_left();
    1f38:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    1f3c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);
    1f40:	87 e1       	ldi	r24, 0x17	; 23
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			velocity(190,180);
    1f48:	8e eb       	ldi	r24, 0xBE	; 190
    1f4a:	64 eb       	ldi	r22, 0xB4	; 180
    1f4c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1f50:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1f54:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			rotation_using_blackline_right();
    1f58:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			/// drop the weight box in container
			drop_the_block();
    1f5c:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);//
    1f60:	88 e1       	ldi	r24, 0x18	; 24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    1f68:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    1f6c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);///
    1f70:	87 e1       	ldi	r24, 0x17	; 23
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			turn_left();
    1f78:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(190,180);
    1f7c:	8e eb       	ldi	r24, 0xBE	; 190
    1f7e:	64 eb       	ldi	r22, 0xB4	; 180
    1f80:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    1f84:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	9f ef       	ldi	r25, 0xFF	; 255
    1f8c:	ac e2       	ldi	r26, 0x2C	; 44
    1f8e:	81 50       	subi	r24, 0x01	; 1
    1f90:	90 40       	sbci	r25, 0x00	; 0
    1f92:	a0 40       	sbci	r26, 0x00	; 0
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <main+0xcea>
    1f96:	00 c0       	rjmp	.+0      	; 0x1f98 <main+0xcf4>
    1f98:	00 00       	nop
			_delay_ms(1000);
			blackline();
    1f9a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// CROSSING THE BRIDGE
			// NOW we are IN CITY 1
			turn_left();
    1f9e:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(150,150);
    1fa2:	86 e9       	ldi	r24, 0x96	; 150
    1fa4:	66 e9       	ldi	r22, 0x96	; 150
    1fa6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    1faa:	8f ef       	ldi	r24, 0xFF	; 255
    1fac:	9f e3       	ldi	r25, 0x3F	; 63
    1fae:	a2 e0       	ldi	r26, 0x02	; 2
    1fb0:	81 50       	subi	r24, 0x01	; 1
    1fb2:	90 40       	sbci	r25, 0x00	; 0
    1fb4:	a0 40       	sbci	r26, 0x00	; 0
    1fb6:	e1 f7       	brne	.-8      	; 0x1fb0 <main+0xd0c>
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <main+0xd16>
    1fba:	00 00       	nop
			_delay_ms(50);
			stop();
    1fbc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    1fc0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			velocity(190,180);
    1fc4:	8e eb       	ldi	r24, 0xBE	; 190
    1fc6:	64 eb       	ldi	r22, 0xB4	; 180
    1fc8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(113);
    1fcc:	81 e7       	ldi	r24, 0x71	; 113
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			stop();
    1fd4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    1fd8:	8f ef       	ldi	r24, 0xFF	; 255
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	ac e2       	ldi	r26, 0x2C	; 44
    1fde:	81 50       	subi	r24, 0x01	; 1
    1fe0:	90 40       	sbci	r25, 0x00	; 0
    1fe2:	a0 40       	sbci	r26, 0x00	; 0
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <main+0xd3a>
    1fe6:	00 c0       	rjmp	.+0      	; 0x1fe8 <main+0xd44>
    1fe8:	00 00       	nop
			_delay_ms(1000);
			velocity(190,180);
    1fea:	8e eb       	ldi	r24, 0xBE	; 190
    1fec:	64 eb       	ldi	r22, 0xB4	; 180
    1fee:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			left_degrees(88);
    1ff2:	88 e5       	ldi	r24, 0x58	; 88
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
			velocity(190,180);
    1ffa:	8e eb       	ldi	r24, 0xBE	; 190
    1ffc:	64 eb       	ldi	r22, 0xB4	; 180
    1ffe:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    2002:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	9f e7       	ldi	r25, 0x7F	; 127
    200a:	a6 e1       	ldi	r26, 0x16	; 22
    200c:	81 50       	subi	r24, 0x01	; 1
    200e:	90 40       	sbci	r25, 0x00	; 0
    2010:	a0 40       	sbci	r26, 0x00	; 0
    2012:	e1 f7       	brne	.-8      	; 0x200c <main+0xd68>
    2014:	00 c0       	rjmp	.+0      	; 0x2016 <main+0xd72>
    2016:	00 00       	nop
			_delay_ms(500);
			velocity(182,180);
    2018:	86 eb       	ldi	r24, 0xB6	; 182
    201a:	64 eb       	ldi	r22, 0xB4	; 180
    201c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			back_mm(83);
    2020:	83 e5       	ldi	r24, 0x53	; 83
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
			stop();
    2028:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	9f e7       	ldi	r25, 0x7F	; 127
    2030:	a6 e1       	ldi	r26, 0x16	; 22
    2032:	81 50       	subi	r24, 0x01	; 1
    2034:	90 40       	sbci	r25, 0x00	; 0
    2036:	a0 40       	sbci	r26, 0x00	; 0
    2038:	e1 f7       	brne	.-8      	; 0x2032 <main+0xd8e>
    203a:	00 c0       	rjmp	.+0      	; 0x203c <main+0xd98>
    203c:	00 00       	nop
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
    203e:	8b e9       	ldi	r24, 0x9B	; 155
    2040:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2044:	8f ef       	ldi	r24, 0xFF	; 255
    2046:	9f ef       	ldi	r25, 0xFF	; 255
    2048:	ac e2       	ldi	r26, 0x2C	; 44
    204a:	81 50       	subi	r24, 0x01	; 1
    204c:	90 40       	sbci	r25, 0x00	; 0
    204e:	a0 40       	sbci	r26, 0x00	; 0
    2050:	e1 f7       	brne	.-8      	; 0x204a <main+0xda6>
    2052:	00 c0       	rjmp	.+0      	; 0x2054 <main+0xdb0>
    2054:	00 00       	nop
    2056:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    2058:	8c 2f       	mov	r24, r28
    205a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    205e:	8f ef       	ldi	r24, 0xFF	; 255
    2060:	9f ef       	ldi	r25, 0xFF	; 255
    2062:	a8 e0       	ldi	r26, 0x08	; 8
    2064:	81 50       	subi	r24, 0x01	; 1
    2066:	90 40       	sbci	r25, 0x00	; 0
    2068:	a0 40       	sbci	r26, 0x00	; 0
    206a:	e1 f7       	brne	.-8      	; 0x2064 <main+0xdc0>
    206c:	00 c0       	rjmp	.+0      	; 0x206e <main+0xdca>
    206e:	00 00       	nop
    2070:	ce 5f       	subi	r28, 0xFE	; 254
			stop();
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    2072:	c8 33       	cpi	r28, 0x38	; 56
    2074:	89 f7       	brne	.-30     	; 0x2058 <main+0xdb4>


				servo_1(i);
				_delay_ms(200);
			}
			servo_3(131);
    2076:	83 e8       	ldi	r24, 0x83	; 131
    2078:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    207c:	8f ef       	ldi	r24, 0xFF	; 255
    207e:	9f ef       	ldi	r25, 0xFF	; 255
    2080:	a9 e5       	ldi	r26, 0x59	; 89
    2082:	81 50       	subi	r24, 0x01	; 1
    2084:	90 40       	sbci	r25, 0x00	; 0
    2086:	a0 40       	sbci	r26, 0x00	; 0
    2088:	e1 f7       	brne	.-8      	; 0x2082 <main+0xdde>
    208a:	00 c0       	rjmp	.+0      	; 0x208c <main+0xde8>
    208c:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    208e:	88 e1       	ldi	r24, 0x18	; 24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    2096:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    209a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    209e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	9f e7       	ldi	r25, 0x7F	; 127
    20a6:	a6 e1       	ldi	r26, 0x16	; 22
    20a8:	81 50       	subi	r24, 0x01	; 1
    20aa:	90 40       	sbci	r25, 0x00	; 0
    20ac:	a0 40       	sbci	r26, 0x00	; 0
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <main+0xe04>
    20b0:	00 c0       	rjmp	.+0      	; 0x20b2 <main+0xe0e>
    20b2:	00 00       	nop
			_delay_ms(500);
			velocity(150,150);
    20b4:	86 e9       	ldi	r24, 0x96	; 150
    20b6:	66 e9       	ldi	r22, 0x96	; 150
    20b8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(39);
    20bc:	87 e2       	ldi	r24, 0x27	; 39
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			blackline();
    20c4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(3);
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    20d0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// DROP THE bOX IN CONTAINER OF CITY 1
			drop_the_block();
    20d4:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);
    20d8:	88 e1       	ldi	r24, 0x18	; 24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    20e0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    20e4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// pick the weight box from W5
			servo_2(155);
    20e8:	8b e9       	ldi	r24, 0x9B	; 155
    20ea:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    20ee:	8f ef       	ldi	r24, 0xFF	; 255
    20f0:	9f ef       	ldi	r25, 0xFF	; 255
    20f2:	ac e2       	ldi	r26, 0x2C	; 44
    20f4:	81 50       	subi	r24, 0x01	; 1
    20f6:	90 40       	sbci	r25, 0x00	; 0
    20f8:	a0 40       	sbci	r26, 0x00	; 0
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <main+0xe50>
    20fc:	00 c0       	rjmp	.+0      	; 0x20fe <main+0xe5a>
    20fe:	00 00       	nop
    2100:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    2102:	8c 2f       	mov	r24, r28
    2104:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2108:	8f ef       	ldi	r24, 0xFF	; 255
    210a:	9f ef       	ldi	r25, 0xFF	; 255
    210c:	a8 e0       	ldi	r26, 0x08	; 8
    210e:	81 50       	subi	r24, 0x01	; 1
    2110:	90 40       	sbci	r25, 0x00	; 0
    2112:	a0 40       	sbci	r26, 0x00	; 0
    2114:	e1 f7       	brne	.-8      	; 0x210e <main+0xe6a>
    2116:	00 c0       	rjmp	.+0      	; 0x2118 <main+0xe74>
    2118:	00 00       	nop
    211a:	ce 5f       	subi	r28, 0xFE	; 254
			rotation_using_blackline_left();
			blackline();
			// pick the weight box from W5
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    211c:	c8 33       	cpi	r28, 0x38	; 56
    211e:	89 f7       	brne	.-30     	; 0x2102 <main+0xe5e>


				servo_1(i);
				_delay_ms(200);
			}
			servo_3(131);
    2120:	83 e8       	ldi	r24, 0x83	; 131
    2122:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2126:	8f ef       	ldi	r24, 0xFF	; 255
    2128:	9f ef       	ldi	r25, 0xFF	; 255
    212a:	a9 e5       	ldi	r26, 0x59	; 89
    212c:	81 50       	subi	r24, 0x01	; 1
    212e:	90 40       	sbci	r25, 0x00	; 0
    2130:	a0 40       	sbci	r26, 0x00	; 0
    2132:	e1 f7       	brne	.-8      	; 0x212c <main+0xe88>
    2134:	00 c0       	rjmp	.+0      	; 0x2136 <main+0xe92>
    2136:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    2138:	88 e1       	ldi	r24, 0x18	; 24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    2140:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    2144:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    2148:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			forward_mm(24);
    214c:	88 e1       	ldi	r24, 0x18	; 24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    2154:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    2158:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			//.. drop the weight box in container
			turn_right();
    215c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    2160:	86 e9       	ldi	r24, 0x96	; 150
    2162:	66 e9       	ldi	r22, 0x96	; 150
    2164:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	9f e3       	ldi	r25, 0x3F	; 63
    216c:	a2 e0       	ldi	r26, 0x02	; 2
    216e:	81 50       	subi	r24, 0x01	; 1
    2170:	90 40       	sbci	r25, 0x00	; 0
    2172:	a0 40       	sbci	r26, 0x00	; 0
    2174:	e1 f7       	brne	.-8      	; 0x216e <main+0xeca>
    2176:	00 c0       	rjmp	.+0      	; 0x2178 <main+0xed4>
    2178:	00 00       	nop
			_delay_ms(50);
			stop();
    217a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    217e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(8);
    2182:	88 e0       	ldi	r24, 0x08	; 8
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    218a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// pick the middle box
			servo_2(135);
    218e:	87 e8       	ldi	r24, 0x87	; 135
    2190:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	9f ef       	ldi	r25, 0xFF	; 255
    2198:	ac e2       	ldi	r26, 0x2C	; 44
    219a:	81 50       	subi	r24, 0x01	; 1
    219c:	90 40       	sbci	r25, 0x00	; 0
    219e:	a0 40       	sbci	r26, 0x00	; 0
    21a0:	e1 f7       	brne	.-8      	; 0x219a <main+0xef6>
    21a2:	00 c0       	rjmp	.+0      	; 0x21a4 <main+0xf00>
    21a4:	00 00       	nop
			_delay_ms(1000);
			servo_3(0);
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	9f ef       	ldi	r25, 0xFF	; 255
    21b0:	ac e2       	ldi	r26, 0x2C	; 44
    21b2:	81 50       	subi	r24, 0x01	; 1
    21b4:	90 40       	sbci	r25, 0x00	; 0
    21b6:	a0 40       	sbci	r26, 0x00	; 0
    21b8:	e1 f7       	brne	.-8      	; 0x21b2 <main+0xf0e>
    21ba:	00 c0       	rjmp	.+0      	; 0x21bc <main+0xf18>
    21bc:	00 00       	nop
    21be:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
			{
				servo_1(i);
    21c0:	8c 2f       	mov	r24, r28
    21c2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	9f ef       	ldi	r25, 0xFF	; 255
    21ca:	ac e2       	ldi	r26, 0x2C	; 44
    21cc:	81 50       	subi	r24, 0x01	; 1
    21ce:	90 40       	sbci	r25, 0x00	; 0
    21d0:	a0 40       	sbci	r26, 0x00	; 0
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <main+0xf28>
    21d4:	00 c0       	rjmp	.+0      	; 0x21d6 <main+0xf32>
    21d6:	00 00       	nop
    21d8:	cb 5f       	subi	r28, 0xFB	; 251
			// pick the middle box
			servo_2(135);
			_delay_ms(1000);
			servo_3(0);
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
    21da:	cd 32       	cpi	r28, 0x2D	; 45
    21dc:	89 f7       	brne	.-30     	; 0x21c0 <main+0xf1c>
    21de:	8f ef       	ldi	r24, 0xFF	; 255
    21e0:	9f ef       	ldi	r25, 0xFF	; 255
    21e2:	ac e2       	ldi	r26, 0x2C	; 44
    21e4:	81 50       	subi	r24, 0x01	; 1
    21e6:	90 40       	sbci	r25, 0x00	; 0
    21e8:	a0 40       	sbci	r26, 0x00	; 0
    21ea:	e1 f7       	brne	.-8      	; 0x21e4 <main+0xf40>
    21ec:	00 c0       	rjmp	.+0      	; 0x21ee <main+0xf4a>
    21ee:	00 00       	nop
				_delay_ms(1000);


			}
			_delay_ms(1000);
			servo_3(114);
    21f0:	82 e7       	ldi	r24, 0x72	; 114
    21f2:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
			turn_right();
    21f6:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    21fa:	86 e9       	ldi	r24, 0x96	; 150
    21fc:	66 e9       	ldi	r22, 0x96	; 150
    21fe:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2202:	8f ef       	ldi	r24, 0xFF	; 255
    2204:	9f e3       	ldi	r25, 0x3F	; 63
    2206:	a2 e0       	ldi	r26, 0x02	; 2
    2208:	81 50       	subi	r24, 0x01	; 1
    220a:	90 40       	sbci	r25, 0x00	; 0
    220c:	a0 40       	sbci	r26, 0x00	; 0
    220e:	e1 f7       	brne	.-8      	; 0x2208 <__stack+0x9>
    2210:	00 c0       	rjmp	.+0      	; 0x2212 <__stack+0x13>
    2212:	00 00       	nop
			_delay_ms(50);
			stop();
    2214:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			turn_right();
    2218:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    221c:	86 e9       	ldi	r24, 0x96	; 150
    221e:	66 e9       	ldi	r22, 0x96	; 150
    2220:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	9f e3       	ldi	r25, 0x3F	; 63
    2228:	a2 e0       	ldi	r26, 0x02	; 2
    222a:	81 50       	subi	r24, 0x01	; 1
    222c:	90 40       	sbci	r25, 0x00	; 0
    222e:	a0 40       	sbci	r26, 0x00	; 0
    2230:	e1 f7       	brne	.-8      	; 0x222a <__stack+0x2b>
    2232:	00 c0       	rjmp	.+0      	; 0x2234 <__stack+0x35>
    2234:	00 00       	nop
			_delay_ms(50);
			stop();
    2236:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    223a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// now crossing the bridge second time
			forward_mm(40);
    223e:	88 e2       	ldi	r24, 0x28	; 40
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	9f ef       	ldi	r25, 0xFF	; 255
    224a:	ac e2       	ldi	r26, 0x2C	; 44
    224c:	81 50       	subi	r24, 0x01	; 1
    224e:	90 40       	sbci	r25, 0x00	; 0
    2250:	a0 40       	sbci	r26, 0x00	; 0
    2252:	e1 f7       	brne	.-8      	; 0x224c <__stack+0x4d>
    2254:	00 c0       	rjmp	.+0      	; 0x2256 <__stack+0x57>
    2256:	00 00       	nop
			_delay_ms(1000);
			rotation_using_blackline_left();
    2258:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    225c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(112);
    2260:	80 e7       	ldi	r24, 0x70	; 112
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
    2268:	8f ef       	ldi	r24, 0xFF	; 255
    226a:	9f ef       	ldi	r25, 0xFF	; 255
    226c:	ac e2       	ldi	r26, 0x2C	; 44
    226e:	81 50       	subi	r24, 0x01	; 1
    2270:	90 40       	sbci	r25, 0x00	; 0
    2272:	a0 40       	sbci	r26, 0x00	; 0
    2274:	e1 f7       	brne	.-8      	; 0x226e <__stack+0x6f>
    2276:	00 c0       	rjmp	.+0      	; 0x2278 <__stack+0x79>
    2278:	00 00       	nop
			_delay_ms(1000);
			rotation_using_blackline_right();
    227a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    227e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// drop the color box at C
			drop_the_block();
    2282:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(50);
    2286:	82 e3       	ldi	r24, 0x32	; 50
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    228e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    2292:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			
			// pick the weight box from W4

			servo_2(155);
    2296:	8b e9       	ldi	r24, 0x9B	; 155
    2298:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    229c:	8f ef       	ldi	r24, 0xFF	; 255
    229e:	9f ef       	ldi	r25, 0xFF	; 255
    22a0:	ac e2       	ldi	r26, 0x2C	; 44
    22a2:	81 50       	subi	r24, 0x01	; 1
    22a4:	90 40       	sbci	r25, 0x00	; 0
    22a6:	a0 40       	sbci	r26, 0x00	; 0
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <__stack+0xa3>
    22aa:	00 c0       	rjmp	.+0      	; 0x22ac <__stack+0xad>
    22ac:	00 00       	nop
    22ae:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    22b0:	8c 2f       	mov	r24, r28
    22b2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	a8 e0       	ldi	r26, 0x08	; 8
    22bc:	81 50       	subi	r24, 0x01	; 1
    22be:	90 40       	sbci	r25, 0x00	; 0
    22c0:	a0 40       	sbci	r26, 0x00	; 0
    22c2:	e1 f7       	brne	.-8      	; 0x22bc <__stack+0xbd>
    22c4:	00 c0       	rjmp	.+0      	; 0x22c6 <__stack+0xc7>
    22c6:	00 00       	nop
    22c8:	ce 5f       	subi	r28, 0xFE	; 254
			
			// pick the weight box from W4

			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    22ca:	c8 33       	cpi	r28, 0x38	; 56
    22cc:	89 f7       	brne	.-30     	; 0x22b0 <__stack+0xb1>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    22ce:	83 e8       	ldi	r24, 0x83	; 131
    22d0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	9f ef       	ldi	r25, 0xFF	; 255
    22d8:	a9 e5       	ldi	r26, 0x59	; 89
    22da:	81 50       	subi	r24, 0x01	; 1
    22dc:	90 40       	sbci	r25, 0x00	; 0
    22de:	a0 40       	sbci	r26, 0x00	; 0
    22e0:	e1 f7       	brne	.-8      	; 0x22da <__stack+0xdb>
    22e2:	00 c0       	rjmp	.+0      	; 0x22e4 <__stack+0xe5>
    22e4:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    22e6:	88 e1       	ldi	r24, 0x18	; 24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    22ee:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    22f2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);
    22f6:	87 e1       	ldi	r24, 0x17	; 23
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			velocity(190,180);
    22fe:	8e eb       	ldi	r24, 0xBE	; 190
    2300:	64 eb       	ldi	r22, 0xB4	; 180
    2302:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    2306:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    230a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			rotation_using_blackline_right();
    230e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			/// drop the weight box in container
			drop_the_block();
    2312:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);//
    2316:	88 e1       	ldi	r24, 0x18	; 24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    231e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
    2322:	8f ef       	ldi	r24, 0xFF	; 255
    2324:	9f ef       	ldi	r25, 0xFF	; 255
    2326:	ac e2       	ldi	r26, 0x2C	; 44
    2328:	81 50       	subi	r24, 0x01	; 1
    232a:	90 40       	sbci	r25, 0x00	; 0
    232c:	a0 40       	sbci	r26, 0x00	; 0
    232e:	e1 f7       	brne	.-8      	; 0x2328 <__stack+0x129>
    2330:	00 c0       	rjmp	.+0      	; 0x2332 <__stack+0x133>
    2332:	00 00       	nop
			_delay_ms(1000);
			blackline();
    2334:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// pick the weight box from weight W3
			servo_2(155);
    2338:	8b e9       	ldi	r24, 0x9B	; 155
    233a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    233e:	8f ef       	ldi	r24, 0xFF	; 255
    2340:	9f ef       	ldi	r25, 0xFF	; 255
    2342:	ac e2       	ldi	r26, 0x2C	; 44
    2344:	81 50       	subi	r24, 0x01	; 1
    2346:	90 40       	sbci	r25, 0x00	; 0
    2348:	a0 40       	sbci	r26, 0x00	; 0
    234a:	e1 f7       	brne	.-8      	; 0x2344 <__stack+0x145>
    234c:	00 c0       	rjmp	.+0      	; 0x234e <__stack+0x14f>
    234e:	00 00       	nop
    2350:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    2352:	8c 2f       	mov	r24, r28
    2354:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	9f ef       	ldi	r25, 0xFF	; 255
    235c:	a8 e0       	ldi	r26, 0x08	; 8
    235e:	81 50       	subi	r24, 0x01	; 1
    2360:	90 40       	sbci	r25, 0x00	; 0
    2362:	a0 40       	sbci	r26, 0x00	; 0
    2364:	e1 f7       	brne	.-8      	; 0x235e <__stack+0x15f>
    2366:	00 c0       	rjmp	.+0      	; 0x2368 <__stack+0x169>
    2368:	00 00       	nop
    236a:	ce 5f       	subi	r28, 0xFE	; 254
			_delay_ms(1000);
			blackline();
			// pick the weight box from weight W3
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    236c:	c8 33       	cpi	r28, 0x38	; 56
    236e:	89 f7       	brne	.-30     	; 0x2352 <__stack+0x153>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    2370:	83 e8       	ldi	r24, 0x83	; 131
    2372:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2376:	8f ef       	ldi	r24, 0xFF	; 255
    2378:	9f ef       	ldi	r25, 0xFF	; 255
    237a:	a9 e5       	ldi	r26, 0x59	; 89
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	90 40       	sbci	r25, 0x00	; 0
    2380:	a0 40       	sbci	r26, 0x00	; 0
    2382:	e1 f7       	brne	.-8      	; 0x237c <__stack+0x17d>
    2384:	00 c0       	rjmp	.+0      	; 0x2386 <__stack+0x187>
    2386:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);//
    2388:	88 e1       	ldi	r24, 0x18	; 24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    2390:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    2394:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(24);
    2398:	88 e1       	ldi	r24, 0x18	; 24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    23a0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			// drop the weight box in container
			drop_the_block();
    23a4:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);//
    23a8:	88 e1       	ldi	r24, 0x18	; 24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    23b0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    23b4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(23);///
    23b8:	87 e1       	ldi	r24, 0x17	; 23
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			turn_left();
    23c0:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(190,180);
    23c4:	8e eb       	ldi	r24, 0xBE	; 190
    23c6:	64 eb       	ldi	r22, 0xB4	; 180
    23c8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    23cc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	9f ef       	ldi	r25, 0xFF	; 255
    23d4:	ac e2       	ldi	r26, 0x2C	; 44
    23d6:	81 50       	subi	r24, 0x01	; 1
    23d8:	90 40       	sbci	r25, 0x00	; 0
    23da:	a0 40       	sbci	r26, 0x00	; 0
    23dc:	e1 f7       	brne	.-8      	; 0x23d6 <__stack+0x1d7>
    23de:	00 c0       	rjmp	.+0      	; 0x23e0 <__stack+0x1e1>
    23e0:	00 00       	nop
			_delay_ms(1000);
			blackline();
    23e2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// CROSSING THE BRIDGE
			// NOW WE ARE IN CITY 1
			turn_left();
    23e6:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
			velocity(150,150);
    23ea:	86 e9       	ldi	r24, 0x96	; 150
    23ec:	66 e9       	ldi	r22, 0x96	; 150
    23ee:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    23f2:	8f ef       	ldi	r24, 0xFF	; 255
    23f4:	9f e3       	ldi	r25, 0x3F	; 63
    23f6:	a2 e0       	ldi	r26, 0x02	; 2
    23f8:	81 50       	subi	r24, 0x01	; 1
    23fa:	90 40       	sbci	r25, 0x00	; 0
    23fc:	a0 40       	sbci	r26, 0x00	; 0
    23fe:	e1 f7       	brne	.-8      	; 0x23f8 <__stack+0x1f9>
    2400:	00 c0       	rjmp	.+0      	; 0x2402 <__stack+0x203>
    2402:	00 00       	nop
			_delay_ms(50);
			stop();
    2404:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    2408:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			velocity(190,180);
    240c:	8e eb       	ldi	r24, 0xBE	; 190
    240e:	64 eb       	ldi	r22, 0xB4	; 180
    2410:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(113);
    2414:	81 e7       	ldi	r24, 0x71	; 113
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			stop();
    241c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2420:	8f ef       	ldi	r24, 0xFF	; 255
    2422:	9f ef       	ldi	r25, 0xFF	; 255
    2424:	ac e2       	ldi	r26, 0x2C	; 44
    2426:	81 50       	subi	r24, 0x01	; 1
    2428:	90 40       	sbci	r25, 0x00	; 0
    242a:	a0 40       	sbci	r26, 0x00	; 0
    242c:	e1 f7       	brne	.-8      	; 0x2426 <__stack+0x227>
    242e:	00 c0       	rjmp	.+0      	; 0x2430 <__stack+0x231>
    2430:	00 00       	nop
			_delay_ms(1000);
			velocity(190,180);
    2432:	8e eb       	ldi	r24, 0xBE	; 190
    2434:	64 eb       	ldi	r22, 0xB4	; 180
    2436:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			left_degrees(88);
    243a:	88 e5       	ldi	r24, 0x58	; 88
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
			velocity(190,180);
    2442:	8e eb       	ldi	r24, 0xBE	; 190
    2444:	64 eb       	ldi	r22, 0xB4	; 180
    2446:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    244a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	9f e7       	ldi	r25, 0x7F	; 127
    2452:	a6 e1       	ldi	r26, 0x16	; 22
    2454:	81 50       	subi	r24, 0x01	; 1
    2456:	90 40       	sbci	r25, 0x00	; 0
    2458:	a0 40       	sbci	r26, 0x00	; 0
    245a:	e1 f7       	brne	.-8      	; 0x2454 <__stack+0x255>
    245c:	00 c0       	rjmp	.+0      	; 0x245e <__stack+0x25f>
    245e:	00 00       	nop
			_delay_ms(500);
			velocity(182,180);
    2460:	86 eb       	ldi	r24, 0xB6	; 182
    2462:	64 eb       	ldi	r22, 0xB4	; 180
    2464:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			back_mm(83);
    2468:	83 e5       	ldi	r24, 0x53	; 83
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
			stop();
    2470:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	9f e7       	ldi	r25, 0x7F	; 127
    2478:	a6 e1       	ldi	r26, 0x16	; 22
    247a:	81 50       	subi	r24, 0x01	; 1
    247c:	90 40       	sbci	r25, 0x00	; 0
    247e:	a0 40       	sbci	r26, 0x00	; 0
    2480:	e1 f7       	brne	.-8      	; 0x247a <__stack+0x27b>
    2482:	00 c0       	rjmp	.+0      	; 0x2484 <__stack+0x285>
    2484:	00 00       	nop
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
    2486:	8b e9       	ldi	r24, 0x9B	; 155
    2488:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	9f ef       	ldi	r25, 0xFF	; 255
    2490:	ac e2       	ldi	r26, 0x2C	; 44
    2492:	81 50       	subi	r24, 0x01	; 1
    2494:	90 40       	sbci	r25, 0x00	; 0
    2496:	a0 40       	sbci	r26, 0x00	; 0
    2498:	e1 f7       	brne	.-8      	; 0x2492 <__stack+0x293>
    249a:	00 c0       	rjmp	.+0      	; 0x249c <__stack+0x29d>
    249c:	00 00       	nop
    249e:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    24a0:	8c 2f       	mov	r24, r28
    24a2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	9f ef       	ldi	r25, 0xFF	; 255
    24aa:	a8 e0       	ldi	r26, 0x08	; 8
    24ac:	81 50       	subi	r24, 0x01	; 1
    24ae:	90 40       	sbci	r25, 0x00	; 0
    24b0:	a0 40       	sbci	r26, 0x00	; 0
    24b2:	e1 f7       	brne	.-8      	; 0x24ac <__stack+0x2ad>
    24b4:	00 c0       	rjmp	.+0      	; 0x24b6 <__stack+0x2b7>
    24b6:	00 00       	nop
    24b8:	ce 5f       	subi	r28, 0xFE	; 254
			stop();
			_delay_ms(500);
			// PICK THE WEIGTH BOX FROM W3
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    24ba:	c8 33       	cpi	r28, 0x38	; 56
    24bc:	89 f7       	brne	.-30     	; 0x24a0 <__stack+0x2a1>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    24be:	83 e8       	ldi	r24, 0x83	; 131
    24c0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	9f ef       	ldi	r25, 0xFF	; 255
    24c8:	a9 e5       	ldi	r26, 0x59	; 89
    24ca:	81 50       	subi	r24, 0x01	; 1
    24cc:	90 40       	sbci	r25, 0x00	; 0
    24ce:	a0 40       	sbci	r26, 0x00	; 0
    24d0:	e1 f7       	brne	.-8      	; 0x24ca <__stack+0x2cb>
    24d2:	00 c0       	rjmp	.+0      	; 0x24d4 <__stack+0x2d5>
    24d4:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    24d6:	88 e1       	ldi	r24, 0x18	; 24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    24de:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    24e2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    24e6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	9f e7       	ldi	r25, 0x7F	; 127
    24ee:	a6 e1       	ldi	r26, 0x16	; 22
    24f0:	81 50       	subi	r24, 0x01	; 1
    24f2:	90 40       	sbci	r25, 0x00	; 0
    24f4:	a0 40       	sbci	r26, 0x00	; 0
    24f6:	e1 f7       	brne	.-8      	; 0x24f0 <__stack+0x2f1>
    24f8:	00 c0       	rjmp	.+0      	; 0x24fa <__stack+0x2fb>
    24fa:	00 00       	nop
			_delay_ms(500);
			velocity(150,150);
    24fc:	86 e9       	ldi	r24, 0x96	; 150
    24fe:	66 e9       	ldi	r22, 0x96	; 150
    2500:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(39);
    2504:	87 e2       	ldi	r24, 0x27	; 39
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			blackline();
    250c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(3);
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    2518:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// DROP THE BOX IN CONTAINER
			drop_the_block();
    251c:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			forward_mm(24);//
    2520:	88 e1       	ldi	r24, 0x18	; 24
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    2528:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    252c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// pick the weight box from W5
			servo_2(155);
    2530:	8b e9       	ldi	r24, 0x9B	; 155
    2532:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2536:	8f ef       	ldi	r24, 0xFF	; 255
    2538:	9f ef       	ldi	r25, 0xFF	; 255
    253a:	ac e2       	ldi	r26, 0x2C	; 44
    253c:	81 50       	subi	r24, 0x01	; 1
    253e:	90 40       	sbci	r25, 0x00	; 0
    2540:	a0 40       	sbci	r26, 0x00	; 0
    2542:	e1 f7       	brne	.-8      	; 0x253c <__stack+0x33d>
    2544:	00 c0       	rjmp	.+0      	; 0x2546 <__stack+0x347>
    2546:	00 00       	nop
    2548:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
			{


				servo_1(i);
    254a:	8c 2f       	mov	r24, r28
    254c:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2550:	8f ef       	ldi	r24, 0xFF	; 255
    2552:	9f ef       	ldi	r25, 0xFF	; 255
    2554:	a8 e0       	ldi	r26, 0x08	; 8
    2556:	81 50       	subi	r24, 0x01	; 1
    2558:	90 40       	sbci	r25, 0x00	; 0
    255a:	a0 40       	sbci	r26, 0x00	; 0
    255c:	e1 f7       	brne	.-8      	; 0x2556 <__stack+0x357>
    255e:	00 c0       	rjmp	.+0      	; 0x2560 <__stack+0x361>
    2560:	00 00       	nop
    2562:	ce 5f       	subi	r28, 0xFE	; 254
			rotation_using_blackline_left();
			blackline();
			// pick the weight box from W5
			servo_2(155);
			_delay_ms(1000);
			for(int i=0;i<=54;i+=2)
    2564:	c8 33       	cpi	r28, 0x38	; 56
    2566:	89 f7       	brne	.-30     	; 0x254a <__stack+0x34b>

				servo_1(i);
				_delay_ms(200);
			}
			
			servo_3(131);
    2568:	83 e8       	ldi	r24, 0x83	; 131
    256a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    256e:	8f ef       	ldi	r24, 0xFF	; 255
    2570:	9f ef       	ldi	r25, 0xFF	; 255
    2572:	a9 e5       	ldi	r26, 0x59	; 89
    2574:	81 50       	subi	r24, 0x01	; 1
    2576:	90 40       	sbci	r25, 0x00	; 0
    2578:	a0 40       	sbci	r26, 0x00	; 0
    257a:	e1 f7       	brne	.-8      	; 0x2574 <__stack+0x375>
    257c:	00 c0       	rjmp	.+0      	; 0x257e <__stack+0x37f>
    257e:	00 00       	nop
			_delay_ms(2000);
			forward_mm(24);
    2580:	88 e1       	ldi	r24, 0x18	; 24
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    2588:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    258c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			stop();
    2590:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			forward_mm(24);//
    2594:	88 e1       	ldi	r24, 0x18	; 24
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_left();
    259c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
			blackline();
    25a0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			//.. drop the weight box in container
			turn_right();
    25a4:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    25a8:	86 e9       	ldi	r24, 0x96	; 150
    25aa:	66 e9       	ldi	r22, 0x96	; 150
    25ac:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	9f e3       	ldi	r25, 0x3F	; 63
    25b4:	a2 e0       	ldi	r26, 0x02	; 2
    25b6:	81 50       	subi	r24, 0x01	; 1
    25b8:	90 40       	sbci	r25, 0x00	; 0
    25ba:	a0 40       	sbci	r26, 0x00	; 0
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <__stack+0x3b7>
    25be:	00 c0       	rjmp	.+0      	; 0x25c0 <__stack+0x3c1>
    25c0:	00 00       	nop
			_delay_ms(50);
			stop();
    25c2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    25c6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward_mm(8);
    25ca:	88 e0       	ldi	r24, 0x08	; 8
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    25d2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			// pick the bottom box
			servo_2(135);
    25d6:	87 e8       	ldi	r24, 0x87	; 135
    25d8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    25dc:	8f ef       	ldi	r24, 0xFF	; 255
    25de:	9f ef       	ldi	r25, 0xFF	; 255
    25e0:	ac e2       	ldi	r26, 0x2C	; 44
    25e2:	81 50       	subi	r24, 0x01	; 1
    25e4:	90 40       	sbci	r25, 0x00	; 0
    25e6:	a0 40       	sbci	r26, 0x00	; 0
    25e8:	e1 f7       	brne	.-8      	; 0x25e2 <__stack+0x3e3>
    25ea:	00 c0       	rjmp	.+0      	; 0x25ec <__stack+0x3ed>
    25ec:	00 00       	nop
			_delay_ms(1000);
			servo_3(0);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    25f4:	8f ef       	ldi	r24, 0xFF	; 255
    25f6:	9f ef       	ldi	r25, 0xFF	; 255
    25f8:	ac e2       	ldi	r26, 0x2C	; 44
    25fa:	81 50       	subi	r24, 0x01	; 1
    25fc:	90 40       	sbci	r25, 0x00	; 0
    25fe:	a0 40       	sbci	r26, 0x00	; 0
    2600:	e1 f7       	brne	.-8      	; 0x25fa <__stack+0x3fb>
    2602:	00 c0       	rjmp	.+0      	; 0x2604 <__stack+0x405>
    2604:	00 00       	nop
    2606:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
			{
				servo_1(i);
    2608:	8c 2f       	mov	r24, r28
    260a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    260e:	8f ef       	ldi	r24, 0xFF	; 255
    2610:	9f ef       	ldi	r25, 0xFF	; 255
    2612:	ac e2       	ldi	r26, 0x2C	; 44
    2614:	81 50       	subi	r24, 0x01	; 1
    2616:	90 40       	sbci	r25, 0x00	; 0
    2618:	a0 40       	sbci	r26, 0x00	; 0
    261a:	e1 f7       	brne	.-8      	; 0x2614 <__stack+0x415>
    261c:	00 c0       	rjmp	.+0      	; 0x261e <__stack+0x41f>
    261e:	00 00       	nop
    2620:	cb 5f       	subi	r28, 0xFB	; 251
			// pick the bottom box
			servo_2(135);
			_delay_ms(1000);
			servo_3(0);
			_delay_ms(1000);
			for(int i=0;i<=40;i+=5)
    2622:	cd 32       	cpi	r28, 0x2D	; 45
    2624:	89 f7       	brne	.-30     	; 0x2608 <__stack+0x409>
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	9f ef       	ldi	r25, 0xFF	; 255
    262a:	ac e2       	ldi	r26, 0x2C	; 44
    262c:	81 50       	subi	r24, 0x01	; 1
    262e:	90 40       	sbci	r25, 0x00	; 0
    2630:	a0 40       	sbci	r26, 0x00	; 0
    2632:	e1 f7       	brne	.-8      	; 0x262c <__stack+0x42d>
    2634:	00 c0       	rjmp	.+0      	; 0x2636 <__stack+0x437>
    2636:	00 00       	nop
				_delay_ms(1000);


			}
			_delay_ms(1000);
			servo_3(114);
    2638:	82 e7       	ldi	r24, 0x72	; 114
    263a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
			turn_right();
    263e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    2642:	86 e9       	ldi	r24, 0x96	; 150
    2644:	66 e9       	ldi	r22, 0x96	; 150
    2646:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	9f e3       	ldi	r25, 0x3F	; 63
    264e:	a2 e0       	ldi	r26, 0x02	; 2
    2650:	81 50       	subi	r24, 0x01	; 1
    2652:	90 40       	sbci	r25, 0x00	; 0
    2654:	a0 40       	sbci	r26, 0x00	; 0
    2656:	e1 f7       	brne	.-8      	; 0x2650 <__stack+0x451>
    2658:	00 c0       	rjmp	.+0      	; 0x265a <__stack+0x45b>
    265a:	00 00       	nop
			_delay_ms(50);
			stop();
    265c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			turn_right();
    2660:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
			velocity(150,150);
    2664:	86 e9       	ldi	r24, 0x96	; 150
    2666:	66 e9       	ldi	r22, 0x96	; 150
    2668:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	9f e3       	ldi	r25, 0x3F	; 63
    2670:	a2 e0       	ldi	r26, 0x02	; 2
    2672:	81 50       	subi	r24, 0x01	; 1
    2674:	90 40       	sbci	r25, 0x00	; 0
    2676:	a0 40       	sbci	r26, 0x00	; 0
    2678:	e1 f7       	brne	.-8      	; 0x2672 <__stack+0x473>
    267a:	00 c0       	rjmp	.+0      	; 0x267c <__stack+0x47d>
    267c:	00 00       	nop
			_delay_ms(50);
			stop();
    267e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
			blackline();
    2682:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// now crossing the bridge last time
			// we are in city 2
			forward_mm(24);//
    2686:	88 e1       	ldi	r24, 0x18	; 24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			rotation_using_blackline_right();
    268e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
			blackline();
    2692:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			forward();
    2696:	0e 94 88 04 	call	0x910	; 0x910 <forward>
			velocity(190,180);
    269a:	8e eb       	ldi	r24, 0xBE	; 190
    269c:	64 eb       	ldi	r22, 0xB4	; 180
    269e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			blackline();
    26a2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>

			velocity(190,180);
    26a6:	8e eb       	ldi	r24, 0xBE	; 190
    26a8:	64 eb       	ldi	r22, 0xB4	; 180
    26aa:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			forward_mm(113);
    26ae:	81 e7       	ldi	r24, 0x71	; 113
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
			stop();
    26b6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    26ba:	8f ef       	ldi	r24, 0xFF	; 255
    26bc:	9f ef       	ldi	r25, 0xFF	; 255
    26be:	ac e2       	ldi	r26, 0x2C	; 44
    26c0:	81 50       	subi	r24, 0x01	; 1
    26c2:	90 40       	sbci	r25, 0x00	; 0
    26c4:	a0 40       	sbci	r26, 0x00	; 0
    26c6:	e1 f7       	brne	.-8      	; 0x26c0 <__stack+0x4c1>
    26c8:	00 c0       	rjmp	.+0      	; 0x26ca <__stack+0x4cb>
    26ca:	00 00       	nop
			_delay_ms(1000);
			velocity(190,180);
    26cc:	8e eb       	ldi	r24, 0xBE	; 190
    26ce:	64 eb       	ldi	r22, 0xB4	; 180
    26d0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			left_degrees(88);
    26d4:	88 e5       	ldi	r24, 0x58	; 88
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
			velocity(190,180);
    26dc:	8e eb       	ldi	r24, 0xBE	; 190
    26de:	64 eb       	ldi	r22, 0xB4	; 180
    26e0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
			stop();
    26e4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	9f e7       	ldi	r25, 0x7F	; 127
    26ec:	a6 e1       	ldi	r26, 0x16	; 22
    26ee:	81 50       	subi	r24, 0x01	; 1
    26f0:	90 40       	sbci	r25, 0x00	; 0
    26f2:	a0 40       	sbci	r26, 0x00	; 0
    26f4:	e1 f7       	brne	.-8      	; 0x26ee <__stack+0x4ef>
    26f6:	00 c0       	rjmp	.+0      	; 0x26f8 <__stack+0x4f9>
    26f8:	00 00       	nop
			_delay_ms(500);
			blackline();
    26fa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
			// drop the color box at A
			drop_the_block();
    26fe:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
			
		}}
		//////////////////////////////////////////CASE 2--BOTTOMMOST BLOCK AT LOCATION B//////////////////////////////////////////////////
		if(bottom_position=='B')
    2702:	80 91 29 02 	lds	r24, 0x0229
    2706:	82 34       	cpi	r24, 0x42	; 66
    2708:	11 f0       	breq	.+4      	; 0x270e <__stack+0x50f>
    270a:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__stack+0x158d>
		{
			if(flag3_color==top_HZ_waste_block_color) //THUS BOTTOM AT B,TOP AT C WHICH MEANS MID AT A
    270e:	80 91 10 02 	lds	r24, 0x0210
    2712:	90 91 23 02 	lds	r25, 0x0223
    2716:	98 17       	cp	r25, r24
    2718:	09 f0       	breq	.+2      	; 0x271c <__stack+0x51d>
    271a:	20 c4       	rjmp	.+2112   	; 0x2f5c <__stack+0xd5d>
			{
				rotation_using_blackline_left();
    271c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2720:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	9f ef       	ldi	r25, 0xFF	; 255
    2728:	ac e2       	ldi	r26, 0x2C	; 44
    272a:	81 50       	subi	r24, 0x01	; 1
    272c:	90 40       	sbci	r25, 0x00	; 0
    272e:	a0 40       	sbci	r26, 0x00	; 0
    2730:	e1 f7       	brne	.-8      	; 0x272a <__stack+0x52b>
    2732:	00 c0       	rjmp	.+0      	; 0x2734 <__stack+0x535>
    2734:	00 00       	nop
				_delay_ms(1000);
				rotation_using_blackline_right();
    2736:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    273a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(22);
    273e:	86 e1       	ldi	r24, 0x16	; 22
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_right();
    2746:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(190,180);
    274a:	8e eb       	ldi	r24, 0xBE	; 190
    274c:	64 eb       	ldi	r22, 0xB4	; 180
    274e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    2752:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2756:	8f ef       	ldi	r24, 0xFF	; 255
    2758:	9f ef       	ldi	r25, 0xFF	; 255
    275a:	ac e2       	ldi	r26, 0x2C	; 44
    275c:	81 50       	subi	r24, 0x01	; 1
    275e:	90 40       	sbci	r25, 0x00	; 0
    2760:	a0 40       	sbci	r26, 0x00	; 0
    2762:	e1 f7       	brne	.-8      	; 0x275c <__stack+0x55d>
    2764:	00 c0       	rjmp	.+0      	; 0x2766 <__stack+0x567>
    2766:	00 00       	nop
				_delay_ms(1000);
				blackline();
    2768:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//////now drop the color box at C
				drop_the_block();
    276c:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_left();
    2770:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
    2774:	8f ef       	ldi	r24, 0xFF	; 255
    2776:	9f ef       	ldi	r25, 0xFF	; 255
    2778:	ac e2       	ldi	r26, 0x2C	; 44
    277a:	81 50       	subi	r24, 0x01	; 1
    277c:	90 40       	sbci	r25, 0x00	; 0
    277e:	a0 40       	sbci	r26, 0x00	; 0
    2780:	e1 f7       	brne	.-8      	; 0x277a <__stack+0x57b>
    2782:	00 c0       	rjmp	.+0      	; 0x2784 <__stack+0x585>
    2784:	00 00       	nop
				_delay_ms(1000);
				blackline();
    2786:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				/// pick the weight from W4
				servo_2(155);
    278a:	8b e9       	ldi	r24, 0x9B	; 155
    278c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2790:	8f ef       	ldi	r24, 0xFF	; 255
    2792:	9f ef       	ldi	r25, 0xFF	; 255
    2794:	ac e2       	ldi	r26, 0x2C	; 44
    2796:	81 50       	subi	r24, 0x01	; 1
    2798:	90 40       	sbci	r25, 0x00	; 0
    279a:	a0 40       	sbci	r26, 0x00	; 0
    279c:	e1 f7       	brne	.-8      	; 0x2796 <__stack+0x597>
    279e:	00 c0       	rjmp	.+0      	; 0x27a0 <__stack+0x5a1>
    27a0:	00 00       	nop
    27a2:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{
					servo_1(i);
    27a4:	8c 2f       	mov	r24, r28
    27a6:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    27aa:	8f ef       	ldi	r24, 0xFF	; 255
    27ac:	9f ef       	ldi	r25, 0xFF	; 255
    27ae:	a8 e0       	ldi	r26, 0x08	; 8
    27b0:	81 50       	subi	r24, 0x01	; 1
    27b2:	90 40       	sbci	r25, 0x00	; 0
    27b4:	a0 40       	sbci	r26, 0x00	; 0
    27b6:	e1 f7       	brne	.-8      	; 0x27b0 <__stack+0x5b1>
    27b8:	00 c0       	rjmp	.+0      	; 0x27ba <__stack+0x5bb>
    27ba:	00 00       	nop
    27bc:	ce 5f       	subi	r28, 0xFE	; 254
				_delay_ms(1000);
				blackline();
				/// pick the weight from W4
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    27be:	c8 33       	cpi	r28, 0x38	; 56
    27c0:	89 f7       	brne	.-30     	; 0x27a4 <__stack+0x5a5>
				{
					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    27c2:	83 e8       	ldi	r24, 0x83	; 131
    27c4:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
    27ca:	9f ef       	ldi	r25, 0xFF	; 255
    27cc:	a9 e5       	ldi	r26, 0x59	; 89
    27ce:	81 50       	subi	r24, 0x01	; 1
    27d0:	90 40       	sbci	r25, 0x00	; 0
    27d2:	a0 40       	sbci	r26, 0x00	; 0
    27d4:	e1 f7       	brne	.-8      	; 0x27ce <__stack+0x5cf>
    27d6:	00 c0       	rjmp	.+0      	; 0x27d8 <__stack+0x5d9>
    27d8:	00 00       	nop
				_delay_ms(2000);
				rotation_using_blackline_left();
    27da:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    27de:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);//
    27e2:	87 e1       	ldi	r24, 0x17	; 23
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				velocity(190,180);
    27ea:	8e eb       	ldi	r24, 0xBE	; 190
    27ec:	64 eb       	ldi	r22, 0xB4	; 180
    27ee:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    27f2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    27f6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    27fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				/// drop the weight box in container
				drop_the_block();
    27fe:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    2802:	88 e1       	ldi	r24, 0x18	; 24
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    280a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    280e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);
    2812:	87 e1       	ldi	r24, 0x17	; 23
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left();
    281a:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    281e:	8e eb       	ldi	r24, 0xBE	; 190
    2820:	64 eb       	ldi	r22, 0xB4	; 180
    2822:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    2826:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    282a:	8f ef       	ldi	r24, 0xFF	; 255
    282c:	9f ef       	ldi	r25, 0xFF	; 255
    282e:	ac e2       	ldi	r26, 0x2C	; 44
    2830:	81 50       	subi	r24, 0x01	; 1
    2832:	90 40       	sbci	r25, 0x00	; 0
    2834:	a0 40       	sbci	r26, 0x00	; 0
    2836:	e1 f7       	brne	.-8      	; 0x2830 <__stack+0x631>
    2838:	00 c0       	rjmp	.+0      	; 0x283a <__stack+0x63b>
    283a:	00 00       	nop
				_delay_ms(1000);
				blackline();
    283c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// Now we are in CITY 1
				turn_left();
    2840:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    2844:	86 e9       	ldi	r24, 0x96	; 150
    2846:	66 e9       	ldi	r22, 0x96	; 150
    2848:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    284c:	8f ef       	ldi	r24, 0xFF	; 255
    284e:	9f e3       	ldi	r25, 0x3F	; 63
    2850:	a2 e0       	ldi	r26, 0x02	; 2
    2852:	81 50       	subi	r24, 0x01	; 1
    2854:	90 40       	sbci	r25, 0x00	; 0
    2856:	a0 40       	sbci	r26, 0x00	; 0
    2858:	e1 f7       	brne	.-8      	; 0x2852 <__stack+0x653>
    285a:	00 c0       	rjmp	.+0      	; 0x285c <__stack+0x65d>
    285c:	00 00       	nop
				_delay_ms(50);
				stop();
    285e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    2862:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    2866:	8e eb       	ldi	r24, 0xBE	; 190
    2868:	64 eb       	ldi	r22, 0xB4	; 180
    286a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    286e:	81 e7       	ldi	r24, 0x71	; 113
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    2876:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	9f ef       	ldi	r25, 0xFF	; 255
    287e:	ac e2       	ldi	r26, 0x2C	; 44
    2880:	81 50       	subi	r24, 0x01	; 1
    2882:	90 40       	sbci	r25, 0x00	; 0
    2884:	a0 40       	sbci	r26, 0x00	; 0
    2886:	e1 f7       	brne	.-8      	; 0x2880 <__stack+0x681>
    2888:	00 c0       	rjmp	.+0      	; 0x288a <__stack+0x68b>
    288a:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    288c:	8e eb       	ldi	r24, 0xBE	; 190
    288e:	64 eb       	ldi	r22, 0xB4	; 180
    2890:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    2894:	88 e5       	ldi	r24, 0x58	; 88
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    289c:	8e eb       	ldi	r24, 0xBE	; 190
    289e:	64 eb       	ldi	r22, 0xB4	; 180
    28a0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    28a4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    28a8:	8f ef       	ldi	r24, 0xFF	; 255
    28aa:	9f e7       	ldi	r25, 0x7F	; 127
    28ac:	a6 e1       	ldi	r26, 0x16	; 22
    28ae:	81 50       	subi	r24, 0x01	; 1
    28b0:	90 40       	sbci	r25, 0x00	; 0
    28b2:	a0 40       	sbci	r26, 0x00	; 0
    28b4:	e1 f7       	brne	.-8      	; 0x28ae <__stack+0x6af>
    28b6:	00 c0       	rjmp	.+0      	; 0x28b8 <__stack+0x6b9>
    28b8:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    28ba:	86 eb       	ldi	r24, 0xB6	; 182
    28bc:	64 eb       	ldi	r22, 0xB4	; 180
    28be:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    28c2:	83 e5       	ldi	r24, 0x53	; 83
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    28ca:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    28ce:	8f ef       	ldi	r24, 0xFF	; 255
    28d0:	9f e7       	ldi	r25, 0x7F	; 127
    28d2:	a6 e1       	ldi	r26, 0x16	; 22
    28d4:	81 50       	subi	r24, 0x01	; 1
    28d6:	90 40       	sbci	r25, 0x00	; 0
    28d8:	a0 40       	sbci	r26, 0x00	; 0
    28da:	e1 f7       	brne	.-8      	; 0x28d4 <__stack+0x6d5>
    28dc:	00 c0       	rjmp	.+0      	; 0x28de <__stack+0x6df>
    28de:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    28e0:	8b e9       	ldi	r24, 0x9B	; 155
    28e2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    28e6:	8f ef       	ldi	r24, 0xFF	; 255
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	ac e2       	ldi	r26, 0x2C	; 44
    28ec:	81 50       	subi	r24, 0x01	; 1
    28ee:	90 40       	sbci	r25, 0x00	; 0
    28f0:	a0 40       	sbci	r26, 0x00	; 0
    28f2:	e1 f7       	brne	.-8      	; 0x28ec <__stack+0x6ed>
    28f4:	00 c0       	rjmp	.+0      	; 0x28f6 <__stack+0x6f7>
    28f6:	00 00       	nop
    28f8:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    28fa:	8c 2f       	mov	r24, r28
    28fc:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2900:	8f ef       	ldi	r24, 0xFF	; 255
    2902:	9f ef       	ldi	r25, 0xFF	; 255
    2904:	a8 e0       	ldi	r26, 0x08	; 8
    2906:	81 50       	subi	r24, 0x01	; 1
    2908:	90 40       	sbci	r25, 0x00	; 0
    290a:	a0 40       	sbci	r26, 0x00	; 0
    290c:	e1 f7       	brne	.-8      	; 0x2906 <__stack+0x707>
    290e:	00 c0       	rjmp	.+0      	; 0x2910 <__stack+0x711>
    2910:	00 00       	nop
    2912:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    2914:	c8 33       	cpi	r28, 0x38	; 56
    2916:	89 f7       	brne	.-30     	; 0x28fa <__stack+0x6fb>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    2918:	83 e8       	ldi	r24, 0x83	; 131
    291a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    291e:	8f ef       	ldi	r24, 0xFF	; 255
    2920:	9f ef       	ldi	r25, 0xFF	; 255
    2922:	a9 e5       	ldi	r26, 0x59	; 89
    2924:	81 50       	subi	r24, 0x01	; 1
    2926:	90 40       	sbci	r25, 0x00	; 0
    2928:	a0 40       	sbci	r26, 0x00	; 0
    292a:	e1 f7       	brne	.-8      	; 0x2924 <__stack+0x725>
    292c:	00 c0       	rjmp	.+0      	; 0x292e <__stack+0x72f>
    292e:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    2930:	88 e1       	ldi	r24, 0x18	; 24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2938:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    293c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    2940:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2944:	8f ef       	ldi	r24, 0xFF	; 255
    2946:	9f e7       	ldi	r25, 0x7F	; 127
    2948:	a6 e1       	ldi	r26, 0x16	; 22
    294a:	81 50       	subi	r24, 0x01	; 1
    294c:	90 40       	sbci	r25, 0x00	; 0
    294e:	a0 40       	sbci	r26, 0x00	; 0
    2950:	e1 f7       	brne	.-8      	; 0x294a <__stack+0x74b>
    2952:	00 c0       	rjmp	.+0      	; 0x2954 <__stack+0x755>
    2954:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    2956:	86 e9       	ldi	r24, 0x96	; 150
    2958:	66 e9       	ldi	r22, 0x96	; 150
    295a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    295e:	87 e2       	ldi	r24, 0x27	; 39
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    2966:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2972:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE BOX IN CONTAINER OF CITY 1
				drop_the_block();
    2976:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    297a:	88 e1       	ldi	r24, 0x18	; 24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2982:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2986:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    298a:	8b e9       	ldi	r24, 0x9B	; 155
    298c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2990:	8f ef       	ldi	r24, 0xFF	; 255
    2992:	9f ef       	ldi	r25, 0xFF	; 255
    2994:	ac e2       	ldi	r26, 0x2C	; 44
    2996:	81 50       	subi	r24, 0x01	; 1
    2998:	90 40       	sbci	r25, 0x00	; 0
    299a:	a0 40       	sbci	r26, 0x00	; 0
    299c:	e1 f7       	brne	.-8      	; 0x2996 <__stack+0x797>
    299e:	00 c0       	rjmp	.+0      	; 0x29a0 <__stack+0x7a1>
    29a0:	00 00       	nop
    29a2:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    29a4:	8c 2f       	mov	r24, r28
    29a6:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	9f ef       	ldi	r25, 0xFF	; 255
    29ae:	a8 e0       	ldi	r26, 0x08	; 8
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	90 40       	sbci	r25, 0x00	; 0
    29b4:	a0 40       	sbci	r26, 0x00	; 0
    29b6:	e1 f7       	brne	.-8      	; 0x29b0 <__stack+0x7b1>
    29b8:	00 c0       	rjmp	.+0      	; 0x29ba <__stack+0x7bb>
    29ba:	00 00       	nop
    29bc:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    29be:	c8 33       	cpi	r28, 0x38	; 56
    29c0:	89 f7       	brne	.-30     	; 0x29a4 <__stack+0x7a5>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    29c2:	83 e8       	ldi	r24, 0x83	; 131
    29c4:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    29c8:	8f ef       	ldi	r24, 0xFF	; 255
    29ca:	9f ef       	ldi	r25, 0xFF	; 255
    29cc:	a9 e5       	ldi	r26, 0x59	; 89
    29ce:	81 50       	subi	r24, 0x01	; 1
    29d0:	90 40       	sbci	r25, 0x00	; 0
    29d2:	a0 40       	sbci	r26, 0x00	; 0
    29d4:	e1 f7       	brne	.-8      	; 0x29ce <__stack+0x7cf>
    29d6:	00 c0       	rjmp	.+0      	; 0x29d8 <__stack+0x7d9>
    29d8:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    29da:	88 e1       	ldi	r24, 0x18	; 24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    29e2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    29e6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    29ea:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    29ee:	88 e1       	ldi	r24, 0x18	; 24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    29f6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    29fa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    29fe:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    2a02:	86 e9       	ldi	r24, 0x96	; 150
    2a04:	66 e9       	ldi	r22, 0x96	; 150
    2a06:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2a0a:	8f ef       	ldi	r24, 0xFF	; 255
    2a0c:	9f e3       	ldi	r25, 0x3F	; 63
    2a0e:	a2 e0       	ldi	r26, 0x02	; 2
    2a10:	81 50       	subi	r24, 0x01	; 1
    2a12:	90 40       	sbci	r25, 0x00	; 0
    2a14:	a0 40       	sbci	r26, 0x00	; 0
    2a16:	e1 f7       	brne	.-8      	; 0x2a10 <__stack+0x811>
    2a18:	00 c0       	rjmp	.+0      	; 0x2a1a <__stack+0x81b>
    2a1a:	00 00       	nop
				_delay_ms(50);
				stop();
    2a1c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    2a20:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    2a24:	88 e0       	ldi	r24, 0x08	; 8
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2a2c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the middle box
				servo_2(135);
    2a30:	87 e8       	ldi	r24, 0x87	; 135
    2a32:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	9f ef       	ldi	r25, 0xFF	; 255
    2a3a:	ac e2       	ldi	r26, 0x2C	; 44
    2a3c:	81 50       	subi	r24, 0x01	; 1
    2a3e:	90 40       	sbci	r25, 0x00	; 0
    2a40:	a0 40       	sbci	r26, 0x00	; 0
    2a42:	e1 f7       	brne	.-8      	; 0x2a3c <__stack+0x83d>
    2a44:	00 c0       	rjmp	.+0      	; 0x2a46 <__stack+0x847>
    2a46:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2a4e:	8f ef       	ldi	r24, 0xFF	; 255
    2a50:	9f ef       	ldi	r25, 0xFF	; 255
    2a52:	ac e2       	ldi	r26, 0x2C	; 44
    2a54:	81 50       	subi	r24, 0x01	; 1
    2a56:	90 40       	sbci	r25, 0x00	; 0
    2a58:	a0 40       	sbci	r26, 0x00	; 0
    2a5a:	e1 f7       	brne	.-8      	; 0x2a54 <__stack+0x855>
    2a5c:	00 c0       	rjmp	.+0      	; 0x2a5e <__stack+0x85f>
    2a5e:	00 00       	nop
    2a60:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    2a62:	8c 2f       	mov	r24, r28
    2a64:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2a68:	8f ef       	ldi	r24, 0xFF	; 255
    2a6a:	9f ef       	ldi	r25, 0xFF	; 255
    2a6c:	ac e2       	ldi	r26, 0x2C	; 44
    2a6e:	81 50       	subi	r24, 0x01	; 1
    2a70:	90 40       	sbci	r25, 0x00	; 0
    2a72:	a0 40       	sbci	r26, 0x00	; 0
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <__stack+0x86f>
    2a76:	00 c0       	rjmp	.+0      	; 0x2a78 <__stack+0x879>
    2a78:	00 00       	nop
    2a7a:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the middle box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    2a7c:	cd 32       	cpi	r28, 0x2D	; 45
    2a7e:	89 f7       	brne	.-30     	; 0x2a62 <__stack+0x863>
    2a80:	8f ef       	ldi	r24, 0xFF	; 255
    2a82:	9f ef       	ldi	r25, 0xFF	; 255
    2a84:	ac e2       	ldi	r26, 0x2C	; 44
    2a86:	81 50       	subi	r24, 0x01	; 1
    2a88:	90 40       	sbci	r25, 0x00	; 0
    2a8a:	a0 40       	sbci	r26, 0x00	; 0
    2a8c:	e1 f7       	brne	.-8      	; 0x2a86 <__stack+0x887>
    2a8e:	00 c0       	rjmp	.+0      	; 0x2a90 <__stack+0x891>
    2a90:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    2a92:	82 e7       	ldi	r24, 0x72	; 114
    2a94:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    2a98:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    2a9c:	86 e9       	ldi	r24, 0x96	; 150
    2a9e:	66 e9       	ldi	r22, 0x96	; 150
    2aa0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	9f e3       	ldi	r25, 0x3F	; 63
    2aa8:	a2 e0       	ldi	r26, 0x02	; 2
    2aaa:	81 50       	subi	r24, 0x01	; 1
    2aac:	90 40       	sbci	r25, 0x00	; 0
    2aae:	a0 40       	sbci	r26, 0x00	; 0
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <__stack+0x8ab>
    2ab2:	00 c0       	rjmp	.+0      	; 0x2ab4 <__stack+0x8b5>
    2ab4:	00 00       	nop
				_delay_ms(50);
				stop();
    2ab6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    2aba:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    2abe:	86 e9       	ldi	r24, 0x96	; 150
    2ac0:	66 e9       	ldi	r22, 0x96	; 150
    2ac2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2ac6:	8f ef       	ldi	r24, 0xFF	; 255
    2ac8:	9f e3       	ldi	r25, 0x3F	; 63
    2aca:	a2 e0       	ldi	r26, 0x02	; 2
    2acc:	81 50       	subi	r24, 0x01	; 1
    2ace:	90 40       	sbci	r25, 0x00	; 0
    2ad0:	a0 40       	sbci	r26, 0x00	; 0
    2ad2:	e1 f7       	brne	.-8      	; 0x2acc <__stack+0x8cd>
    2ad4:	00 c0       	rjmp	.+0      	; 0x2ad6 <__stack+0x8d7>
    2ad6:	00 00       	nop
				_delay_ms(50);
				stop();
    2ad8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    2adc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge second time
				forward_mm(24);//
    2ae0:	88 e1       	ldi	r24, 0x18	; 24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2ae8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    2aec:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward();
    2af0:	0e 94 88 04 	call	0x910	; 0x910 <forward>
				velocity(190,180);
    2af4:	8e eb       	ldi	r24, 0xBE	; 190
    2af6:	64 eb       	ldi	r22, 0xB4	; 180
    2af8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				blackline();
    2afc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>

				velocity(190,180);
    2b00:	8e eb       	ldi	r24, 0xBE	; 190
    2b02:	64 eb       	ldi	r22, 0xB4	; 180
    2b04:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    2b08:	81 e7       	ldi	r24, 0x71	; 113
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    2b10:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2b14:	8f ef       	ldi	r24, 0xFF	; 255
    2b16:	9f ef       	ldi	r25, 0xFF	; 255
    2b18:	ac e2       	ldi	r26, 0x2C	; 44
    2b1a:	81 50       	subi	r24, 0x01	; 1
    2b1c:	90 40       	sbci	r25, 0x00	; 0
    2b1e:	a0 40       	sbci	r26, 0x00	; 0
    2b20:	e1 f7       	brne	.-8      	; 0x2b1a <__stack+0x91b>
    2b22:	00 c0       	rjmp	.+0      	; 0x2b24 <__stack+0x925>
    2b24:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    2b26:	8e eb       	ldi	r24, 0xBE	; 190
    2b28:	64 eb       	ldi	r22, 0xB4	; 180
    2b2a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    2b2e:	88 e5       	ldi	r24, 0x58	; 88
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    2b36:	8e eb       	ldi	r24, 0xBE	; 190
    2b38:	64 eb       	ldi	r22, 0xB4	; 180
    2b3a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    2b3e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2b42:	8f ef       	ldi	r24, 0xFF	; 255
    2b44:	9f e7       	ldi	r25, 0x7F	; 127
    2b46:	a6 e1       	ldi	r26, 0x16	; 22
    2b48:	81 50       	subi	r24, 0x01	; 1
    2b4a:	90 40       	sbci	r25, 0x00	; 0
    2b4c:	a0 40       	sbci	r26, 0x00	; 0
    2b4e:	e1 f7       	brne	.-8      	; 0x2b48 <__stack+0x949>
    2b50:	00 c0       	rjmp	.+0      	; 0x2b52 <__stack+0x953>
    2b52:	00 00       	nop
				_delay_ms(500);
				blackline();
    2b54:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//DROP THE COLOR BOX AT A
				drop_the_block();
    2b58:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				
				forward_mm(40);
    2b5c:	88 e2       	ldi	r24, 0x28	; 40
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2b64:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    2b68:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(100);
    2b6c:	84 e6       	ldi	r24, 0x64	; 100
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left(88);
    2b74:	88 e5       	ldi	r24, 0x58	; 88
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				// pick the weight box from W3
				servo_2(155);
    2b7c:	8b e9       	ldi	r24, 0x9B	; 155
    2b7e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2b82:	8f ef       	ldi	r24, 0xFF	; 255
    2b84:	9f ef       	ldi	r25, 0xFF	; 255
    2b86:	ac e2       	ldi	r26, 0x2C	; 44
    2b88:	81 50       	subi	r24, 0x01	; 1
    2b8a:	90 40       	sbci	r25, 0x00	; 0
    2b8c:	a0 40       	sbci	r26, 0x00	; 0
    2b8e:	e1 f7       	brne	.-8      	; 0x2b88 <__stack+0x989>
    2b90:	00 c0       	rjmp	.+0      	; 0x2b92 <__stack+0x993>
    2b92:	00 00       	nop
    2b94:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    2b96:	8c 2f       	mov	r24, r28
    2b98:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	9f ef       	ldi	r25, 0xFF	; 255
    2ba0:	a8 e0       	ldi	r26, 0x08	; 8
    2ba2:	81 50       	subi	r24, 0x01	; 1
    2ba4:	90 40       	sbci	r25, 0x00	; 0
    2ba6:	a0 40       	sbci	r26, 0x00	; 0
    2ba8:	e1 f7       	brne	.-8      	; 0x2ba2 <__stack+0x9a3>
    2baa:	00 c0       	rjmp	.+0      	; 0x2bac <__stack+0x9ad>
    2bac:	00 00       	nop
    2bae:	ce 5f       	subi	r28, 0xFE	; 254
				forward_mm(100);
				turn_left(88);
				// pick the weight box from W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    2bb0:	c8 33       	cpi	r28, 0x38	; 56
    2bb2:	89 f7       	brne	.-30     	; 0x2b96 <__stack+0x997>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    2bb4:	83 e8       	ldi	r24, 0x83	; 131
    2bb6:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2bba:	8f ef       	ldi	r24, 0xFF	; 255
    2bbc:	9f ef       	ldi	r25, 0xFF	; 255
    2bbe:	a9 e5       	ldi	r26, 0x59	; 89
    2bc0:	81 50       	subi	r24, 0x01	; 1
    2bc2:	90 40       	sbci	r25, 0x00	; 0
    2bc4:	a0 40       	sbci	r26, 0x00	; 0
    2bc6:	e1 f7       	brne	.-8      	; 0x2bc0 <__stack+0x9c1>
    2bc8:	00 c0       	rjmp	.+0      	; 0x2bca <__stack+0x9cb>
    2bca:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);//
    2bcc:	88 e1       	ldi	r24, 0x18	; 24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2bd4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2bd8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    2bdc:	88 e1       	ldi	r24, 0x18	; 24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2be4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				// drop the weight box in container
				drop_the_block();
    2be8:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_left();
    2bec:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2bf0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// PICK THE WEIGHT BOX FROM WEIGTH W3
				servo_2(155);
    2bf4:	8b e9       	ldi	r24, 0x9B	; 155
    2bf6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2bfa:	8f ef       	ldi	r24, 0xFF	; 255
    2bfc:	9f ef       	ldi	r25, 0xFF	; 255
    2bfe:	ac e2       	ldi	r26, 0x2C	; 44
    2c00:	81 50       	subi	r24, 0x01	; 1
    2c02:	90 40       	sbci	r25, 0x00	; 0
    2c04:	a0 40       	sbci	r26, 0x00	; 0
    2c06:	e1 f7       	brne	.-8      	; 0x2c00 <__stack+0xa01>
    2c08:	00 c0       	rjmp	.+0      	; 0x2c0a <__stack+0xa0b>
    2c0a:	00 00       	nop
    2c0c:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    2c0e:	8c 2f       	mov	r24, r28
    2c10:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2c14:	8f ef       	ldi	r24, 0xFF	; 255
    2c16:	9f ef       	ldi	r25, 0xFF	; 255
    2c18:	a8 e0       	ldi	r26, 0x08	; 8
    2c1a:	81 50       	subi	r24, 0x01	; 1
    2c1c:	90 40       	sbci	r25, 0x00	; 0
    2c1e:	a0 40       	sbci	r26, 0x00	; 0
    2c20:	e1 f7       	brne	.-8      	; 0x2c1a <__stack+0xa1b>
    2c22:	00 c0       	rjmp	.+0      	; 0x2c24 <__stack+0xa25>
    2c24:	00 00       	nop
    2c26:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// PICK THE WEIGHT BOX FROM WEIGTH W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    2c28:	c8 33       	cpi	r28, 0x38	; 56
    2c2a:	89 f7       	brne	.-30     	; 0x2c0e <__stack+0xa0f>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    2c2c:	83 e8       	ldi	r24, 0x83	; 131
    2c2e:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2c32:	8f ef       	ldi	r24, 0xFF	; 255
    2c34:	9f ef       	ldi	r25, 0xFF	; 255
    2c36:	a9 e5       	ldi	r26, 0x59	; 89
    2c38:	81 50       	subi	r24, 0x01	; 1
    2c3a:	90 40       	sbci	r25, 0x00	; 0
    2c3c:	a0 40       	sbci	r26, 0x00	; 0
    2c3e:	e1 f7       	brne	.-8      	; 0x2c38 <__stack+0xa39>
    2c40:	00 c0       	rjmp	.+0      	; 0x2c42 <__stack+0xa43>
    2c42:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);//
    2c44:	88 e1       	ldi	r24, 0x18	; 24
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2c4c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2c50:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    2c54:	88 e1       	ldi	r24, 0x18	; 24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2c5c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				// drop the weight box in container
				drop_the_block();
    2c60:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>

				forward_mm(24);//
    2c64:	88 e1       	ldi	r24, 0x18	; 24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2c6c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    2c70:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);///
    2c74:	87 e1       	ldi	r24, 0x17	; 23
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left();
    2c7c:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    2c80:	8e eb       	ldi	r24, 0xBE	; 190
    2c82:	64 eb       	ldi	r22, 0xB4	; 180
    2c84:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    2c88:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2c8c:	8f ef       	ldi	r24, 0xFF	; 255
    2c8e:	9f ef       	ldi	r25, 0xFF	; 255
    2c90:	ac e2       	ldi	r26, 0x2C	; 44
    2c92:	81 50       	subi	r24, 0x01	; 1
    2c94:	90 40       	sbci	r25, 0x00	; 0
    2c96:	a0 40       	sbci	r26, 0x00	; 0
    2c98:	e1 f7       	brne	.-8      	; 0x2c92 <__stack+0xa93>
    2c9a:	00 c0       	rjmp	.+0      	; 0x2c9c <__stack+0xa9d>
    2c9c:	00 00       	nop
				_delay_ms(1000);
				blackline();
    2c9e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// NOW WE ARE IN CITY 1
				turn_left();
    2ca2:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    2ca6:	86 e9       	ldi	r24, 0x96	; 150
    2ca8:	66 e9       	ldi	r22, 0x96	; 150
    2caa:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2cae:	8f ef       	ldi	r24, 0xFF	; 255
    2cb0:	9f e3       	ldi	r25, 0x3F	; 63
    2cb2:	a2 e0       	ldi	r26, 0x02	; 2
    2cb4:	81 50       	subi	r24, 0x01	; 1
    2cb6:	90 40       	sbci	r25, 0x00	; 0
    2cb8:	a0 40       	sbci	r26, 0x00	; 0
    2cba:	e1 f7       	brne	.-8      	; 0x2cb4 <__stack+0xab5>
    2cbc:	00 c0       	rjmp	.+0      	; 0x2cbe <__stack+0xabf>
    2cbe:	00 00       	nop
				_delay_ms(50);
				stop();
    2cc0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    2cc4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    2cc8:	8e eb       	ldi	r24, 0xBE	; 190
    2cca:	64 eb       	ldi	r22, 0xB4	; 180
    2ccc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    2cd0:	81 e7       	ldi	r24, 0x71	; 113
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    2cd8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	9f ef       	ldi	r25, 0xFF	; 255
    2ce0:	ac e2       	ldi	r26, 0x2C	; 44
    2ce2:	81 50       	subi	r24, 0x01	; 1
    2ce4:	90 40       	sbci	r25, 0x00	; 0
    2ce6:	a0 40       	sbci	r26, 0x00	; 0
    2ce8:	e1 f7       	brne	.-8      	; 0x2ce2 <__stack+0xae3>
    2cea:	00 c0       	rjmp	.+0      	; 0x2cec <__stack+0xaed>
    2cec:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    2cee:	8e eb       	ldi	r24, 0xBE	; 190
    2cf0:	64 eb       	ldi	r22, 0xB4	; 180
    2cf2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    2cf6:	88 e5       	ldi	r24, 0x58	; 88
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    2cfe:	8e eb       	ldi	r24, 0xBE	; 190
    2d00:	64 eb       	ldi	r22, 0xB4	; 180
    2d02:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    2d06:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2d0a:	8f ef       	ldi	r24, 0xFF	; 255
    2d0c:	9f e7       	ldi	r25, 0x7F	; 127
    2d0e:	a6 e1       	ldi	r26, 0x16	; 22
    2d10:	81 50       	subi	r24, 0x01	; 1
    2d12:	90 40       	sbci	r25, 0x00	; 0
    2d14:	a0 40       	sbci	r26, 0x00	; 0
    2d16:	e1 f7       	brne	.-8      	; 0x2d10 <__stack+0xb11>
    2d18:	00 c0       	rjmp	.+0      	; 0x2d1a <__stack+0xb1b>
    2d1a:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    2d1c:	86 eb       	ldi	r24, 0xB6	; 182
    2d1e:	64 eb       	ldi	r22, 0xB4	; 180
    2d20:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    2d24:	83 e5       	ldi	r24, 0x53	; 83
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    2d2c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2d30:	8f ef       	ldi	r24, 0xFF	; 255
    2d32:	9f e7       	ldi	r25, 0x7F	; 127
    2d34:	a6 e1       	ldi	r26, 0x16	; 22
    2d36:	81 50       	subi	r24, 0x01	; 1
    2d38:	90 40       	sbci	r25, 0x00	; 0
    2d3a:	a0 40       	sbci	r26, 0x00	; 0
    2d3c:	e1 f7       	brne	.-8      	; 0x2d36 <__stack+0xb37>
    2d3e:	00 c0       	rjmp	.+0      	; 0x2d40 <__stack+0xb41>
    2d40:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    2d42:	8b e9       	ldi	r24, 0x9B	; 155
    2d44:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	9f ef       	ldi	r25, 0xFF	; 255
    2d4c:	ac e2       	ldi	r26, 0x2C	; 44
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	90 40       	sbci	r25, 0x00	; 0
    2d52:	a0 40       	sbci	r26, 0x00	; 0
    2d54:	e1 f7       	brne	.-8      	; 0x2d4e <__stack+0xb4f>
    2d56:	00 c0       	rjmp	.+0      	; 0x2d58 <__stack+0xb59>
    2d58:	00 00       	nop
    2d5a:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    2d5c:	8c 2f       	mov	r24, r28
    2d5e:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2d62:	8f ef       	ldi	r24, 0xFF	; 255
    2d64:	9f ef       	ldi	r25, 0xFF	; 255
    2d66:	a8 e0       	ldi	r26, 0x08	; 8
    2d68:	81 50       	subi	r24, 0x01	; 1
    2d6a:	90 40       	sbci	r25, 0x00	; 0
    2d6c:	a0 40       	sbci	r26, 0x00	; 0
    2d6e:	e1 f7       	brne	.-8      	; 0x2d68 <__stack+0xb69>
    2d70:	00 c0       	rjmp	.+0      	; 0x2d72 <__stack+0xb73>
    2d72:	00 00       	nop
    2d74:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    2d76:	c8 33       	cpi	r28, 0x38	; 56
    2d78:	89 f7       	brne	.-30     	; 0x2d5c <__stack+0xb5d>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    2d7a:	83 e8       	ldi	r24, 0x83	; 131
    2d7c:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2d80:	8f ef       	ldi	r24, 0xFF	; 255
    2d82:	9f ef       	ldi	r25, 0xFF	; 255
    2d84:	a9 e5       	ldi	r26, 0x59	; 89
    2d86:	81 50       	subi	r24, 0x01	; 1
    2d88:	90 40       	sbci	r25, 0x00	; 0
    2d8a:	a0 40       	sbci	r26, 0x00	; 0
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <__stack+0xb87>
    2d8e:	00 c0       	rjmp	.+0      	; 0x2d90 <__stack+0xb91>
    2d90:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    2d92:	88 e1       	ldi	r24, 0x18	; 24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2d9a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2d9e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    2da2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2da6:	8f ef       	ldi	r24, 0xFF	; 255
    2da8:	9f e7       	ldi	r25, 0x7F	; 127
    2daa:	a6 e1       	ldi	r26, 0x16	; 22
    2dac:	81 50       	subi	r24, 0x01	; 1
    2dae:	90 40       	sbci	r25, 0x00	; 0
    2db0:	a0 40       	sbci	r26, 0x00	; 0
    2db2:	e1 f7       	brne	.-8      	; 0x2dac <__stack+0xbad>
    2db4:	00 c0       	rjmp	.+0      	; 0x2db6 <__stack+0xbb7>
    2db6:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    2db8:	86 e9       	ldi	r24, 0x96	; 150
    2dba:	66 e9       	ldi	r22, 0x96	; 150
    2dbc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    2dc0:	87 e2       	ldi	r24, 0x27	; 39
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    2dc8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    2dcc:	83 e0       	ldi	r24, 0x03	; 3
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2dd4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE BOX IN CONTAINER
				drop_the_block();
    2dd8:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    2ddc:	88 e1       	ldi	r24, 0x18	; 24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2de4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2de8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    2dec:	8b e9       	ldi	r24, 0x9B	; 155
    2dee:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2df2:	8f ef       	ldi	r24, 0xFF	; 255
    2df4:	9f ef       	ldi	r25, 0xFF	; 255
    2df6:	ac e2       	ldi	r26, 0x2C	; 44
    2df8:	81 50       	subi	r24, 0x01	; 1
    2dfa:	90 40       	sbci	r25, 0x00	; 0
    2dfc:	a0 40       	sbci	r26, 0x00	; 0
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <__stack+0xbf9>
    2e00:	00 c0       	rjmp	.+0      	; 0x2e02 <__stack+0xc03>
    2e02:	00 00       	nop
    2e04:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    2e06:	8c 2f       	mov	r24, r28
    2e08:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2e0c:	8f ef       	ldi	r24, 0xFF	; 255
    2e0e:	9f ef       	ldi	r25, 0xFF	; 255
    2e10:	a8 e0       	ldi	r26, 0x08	; 8
    2e12:	81 50       	subi	r24, 0x01	; 1
    2e14:	90 40       	sbci	r25, 0x00	; 0
    2e16:	a0 40       	sbci	r26, 0x00	; 0
    2e18:	e1 f7       	brne	.-8      	; 0x2e12 <__stack+0xc13>
    2e1a:	00 c0       	rjmp	.+0      	; 0x2e1c <__stack+0xc1d>
    2e1c:	00 00       	nop
    2e1e:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    2e20:	c8 33       	cpi	r28, 0x38	; 56
    2e22:	89 f7       	brne	.-30     	; 0x2e06 <__stack+0xc07>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    2e24:	83 e8       	ldi	r24, 0x83	; 131
    2e26:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2e2a:	8f ef       	ldi	r24, 0xFF	; 255
    2e2c:	9f ef       	ldi	r25, 0xFF	; 255
    2e2e:	a9 e5       	ldi	r26, 0x59	; 89
    2e30:	81 50       	subi	r24, 0x01	; 1
    2e32:	90 40       	sbci	r25, 0x00	; 0
    2e34:	a0 40       	sbci	r26, 0x00	; 0
    2e36:	e1 f7       	brne	.-8      	; 0x2e30 <__stack+0xc31>
    2e38:	00 c0       	rjmp	.+0      	; 0x2e3a <__stack+0xc3b>
    2e3a:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    2e3c:	88 e1       	ldi	r24, 0x18	; 24
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2e44:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2e48:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    2e4c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    2e50:	88 e1       	ldi	r24, 0x18	; 24
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    2e58:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2e5c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    2e60:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    2e64:	86 e9       	ldi	r24, 0x96	; 150
    2e66:	66 e9       	ldi	r22, 0x96	; 150
    2e68:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2e6c:	8f ef       	ldi	r24, 0xFF	; 255
    2e6e:	9f e3       	ldi	r25, 0x3F	; 63
    2e70:	a2 e0       	ldi	r26, 0x02	; 2
    2e72:	81 50       	subi	r24, 0x01	; 1
    2e74:	90 40       	sbci	r25, 0x00	; 0
    2e76:	a0 40       	sbci	r26, 0x00	; 0
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <__stack+0xc73>
    2e7a:	00 c0       	rjmp	.+0      	; 0x2e7c <__stack+0xc7d>
    2e7c:	00 00       	nop
				_delay_ms(50);
				stop();
    2e7e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    2e82:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    2e86:	88 e0       	ldi	r24, 0x08	; 8
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2e8e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the bottom box
				servo_2(135);
    2e92:	87 e8       	ldi	r24, 0x87	; 135
    2e94:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2e98:	8f ef       	ldi	r24, 0xFF	; 255
    2e9a:	9f ef       	ldi	r25, 0xFF	; 255
    2e9c:	ac e2       	ldi	r26, 0x2C	; 44
    2e9e:	81 50       	subi	r24, 0x01	; 1
    2ea0:	90 40       	sbci	r25, 0x00	; 0
    2ea2:	a0 40       	sbci	r26, 0x00	; 0
    2ea4:	e1 f7       	brne	.-8      	; 0x2e9e <__stack+0xc9f>
    2ea6:	00 c0       	rjmp	.+0      	; 0x2ea8 <__stack+0xca9>
    2ea8:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    2eb0:	8f ef       	ldi	r24, 0xFF	; 255
    2eb2:	9f ef       	ldi	r25, 0xFF	; 255
    2eb4:	ac e2       	ldi	r26, 0x2C	; 44
    2eb6:	81 50       	subi	r24, 0x01	; 1
    2eb8:	90 40       	sbci	r25, 0x00	; 0
    2eba:	a0 40       	sbci	r26, 0x00	; 0
    2ebc:	e1 f7       	brne	.-8      	; 0x2eb6 <__stack+0xcb7>
    2ebe:	00 c0       	rjmp	.+0      	; 0x2ec0 <__stack+0xcc1>
    2ec0:	00 00       	nop
    2ec2:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    2ec4:	8c 2f       	mov	r24, r28
    2ec6:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    2eca:	8f ef       	ldi	r24, 0xFF	; 255
    2ecc:	9f ef       	ldi	r25, 0xFF	; 255
    2ece:	ac e2       	ldi	r26, 0x2C	; 44
    2ed0:	81 50       	subi	r24, 0x01	; 1
    2ed2:	90 40       	sbci	r25, 0x00	; 0
    2ed4:	a0 40       	sbci	r26, 0x00	; 0
    2ed6:	e1 f7       	brne	.-8      	; 0x2ed0 <__stack+0xcd1>
    2ed8:	00 c0       	rjmp	.+0      	; 0x2eda <__stack+0xcdb>
    2eda:	00 00       	nop
    2edc:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the bottom box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    2ede:	cd 32       	cpi	r28, 0x2D	; 45
    2ee0:	89 f7       	brne	.-30     	; 0x2ec4 <__stack+0xcc5>
    2ee2:	8f ef       	ldi	r24, 0xFF	; 255
    2ee4:	9f ef       	ldi	r25, 0xFF	; 255
    2ee6:	ac e2       	ldi	r26, 0x2C	; 44
    2ee8:	81 50       	subi	r24, 0x01	; 1
    2eea:	90 40       	sbci	r25, 0x00	; 0
    2eec:	a0 40       	sbci	r26, 0x00	; 0
    2eee:	e1 f7       	brne	.-8      	; 0x2ee8 <__stack+0xce9>
    2ef0:	00 c0       	rjmp	.+0      	; 0x2ef2 <__stack+0xcf3>
    2ef2:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    2ef4:	82 e7       	ldi	r24, 0x72	; 114
    2ef6:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    2efa:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    2efe:	86 e9       	ldi	r24, 0x96	; 150
    2f00:	66 e9       	ldi	r22, 0x96	; 150
    2f02:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2f06:	8f ef       	ldi	r24, 0xFF	; 255
    2f08:	9f e3       	ldi	r25, 0x3F	; 63
    2f0a:	a2 e0       	ldi	r26, 0x02	; 2
    2f0c:	81 50       	subi	r24, 0x01	; 1
    2f0e:	90 40       	sbci	r25, 0x00	; 0
    2f10:	a0 40       	sbci	r26, 0x00	; 0
    2f12:	e1 f7       	brne	.-8      	; 0x2f0c <__stack+0xd0d>
    2f14:	00 c0       	rjmp	.+0      	; 0x2f16 <__stack+0xd17>
    2f16:	00 00       	nop
				_delay_ms(50);
				stop();
    2f18:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    2f1c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    2f20:	86 e9       	ldi	r24, 0x96	; 150
    2f22:	66 e9       	ldi	r22, 0x96	; 150
    2f24:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    2f28:	8f ef       	ldi	r24, 0xFF	; 255
    2f2a:	9f e3       	ldi	r25, 0x3F	; 63
    2f2c:	a2 e0       	ldi	r26, 0x02	; 2
    2f2e:	81 50       	subi	r24, 0x01	; 1
    2f30:	90 40       	sbci	r25, 0x00	; 0
    2f32:	a0 40       	sbci	r26, 0x00	; 0
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <__stack+0xd2f>
    2f36:	00 c0       	rjmp	.+0      	; 0x2f38 <__stack+0xd39>
    2f38:	00 00       	nop
				_delay_ms(50);
				stop();
    2f3a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    2f3e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge last time
				// we are in city 2
				forward_mm(24);
    2f42:	88 e1       	ldi	r24, 0x18	; 24
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				velocity(140,140);
    2f4a:	8c e8       	ldi	r24, 0x8C	; 140
    2f4c:	6c e8       	ldi	r22, 0x8C	; 140
    2f4e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				blackline();
    2f52:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// drop the color box at B
				drop_the_block();
    2f56:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
    2f5a:	18 c4       	rjmp	.+2096   	; 0x378c <__stack+0x158d>
				
			}
			
			////////////////////////////////////////////////////////////////////////////////////////////////
			
			else if(flag1_color==top_HZ_waste_block_color) //THUS BOTTOM AT B,TOP AT A WHICH MEANS MID AT C
    2f5c:	90 91 1a 02 	lds	r25, 0x021A
    2f60:	89 17       	cp	r24, r25
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <__stack+0xd67>
    2f64:	13 c4       	rjmp	.+2086   	; 0x378c <__stack+0x158d>
			{
				rotation_using_blackline_left();
    2f66:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2f6a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    2f6e:	8f ef       	ldi	r24, 0xFF	; 255
    2f70:	9f ef       	ldi	r25, 0xFF	; 255
    2f72:	ac e2       	ldi	r26, 0x2C	; 44
    2f74:	81 50       	subi	r24, 0x01	; 1
    2f76:	90 40       	sbci	r25, 0x00	; 0
    2f78:	a0 40       	sbci	r26, 0x00	; 0
    2f7a:	e1 f7       	brne	.-8      	; 0x2f74 <__stack+0xd75>
    2f7c:	00 c0       	rjmp	.+0      	; 0x2f7e <__stack+0xd7f>
    2f7e:	00 00       	nop
				_delay_ms(1000);
				rotation_using_blackline_left();
    2f80:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    2f84:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(22);
    2f88:	86 e1       	ldi	r24, 0x16	; 22
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				velocity(140,140);
    2f90:	8c e8       	ldi	r24, 0x8C	; 140
    2f92:	6c e8       	ldi	r22, 0x8C	; 140
    2f94:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				blackline();
    2f98:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				turn_left();
    2f9c:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    2fa0:	8e eb       	ldi	r24, 0xBE	; 190
    2fa2:	64 eb       	ldi	r22, 0xB4	; 180
    2fa4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    2fa8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    2fac:	8f ef       	ldi	r24, 0xFF	; 255
    2fae:	9f ef       	ldi	r25, 0xFF	; 255
    2fb0:	ac e2       	ldi	r26, 0x2C	; 44
    2fb2:	81 50       	subi	r24, 0x01	; 1
    2fb4:	90 40       	sbci	r25, 0x00	; 0
    2fb6:	a0 40       	sbci	r26, 0x00	; 0
    2fb8:	e1 f7       	brne	.-8      	; 0x2fb2 <__stack+0xdb3>
    2fba:	00 c0       	rjmp	.+0      	; 0x2fbc <__stack+0xdbd>
    2fbc:	00 00       	nop
				_delay_ms(1000);
				blackline();
    2fbe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//////now drop the color box at A
				drop_the_block();
    2fc2:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				/////////////////////////////////////
				forward_mm(40);
    2fc6:	88 e2       	ldi	r24, 0x28	; 40
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    2fce:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    2fd2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(100);
    2fd6:	84 e6       	ldi	r24, 0x64	; 100
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left(88);
    2fde:	88 e5       	ldi	r24, 0x58	; 88
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				// pick the weight box from W3
				servo_2(155);
    2fe6:	8b e9       	ldi	r24, 0x9B	; 155
    2fe8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    2fec:	8f ef       	ldi	r24, 0xFF	; 255
    2fee:	9f ef       	ldi	r25, 0xFF	; 255
    2ff0:	ac e2       	ldi	r26, 0x2C	; 44
    2ff2:	81 50       	subi	r24, 0x01	; 1
    2ff4:	90 40       	sbci	r25, 0x00	; 0
    2ff6:	a0 40       	sbci	r26, 0x00	; 0
    2ff8:	e1 f7       	brne	.-8      	; 0x2ff2 <__stack+0xdf3>
    2ffa:	00 c0       	rjmp	.+0      	; 0x2ffc <__stack+0xdfd>
    2ffc:	00 00       	nop
    2ffe:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3000:	8c 2f       	mov	r24, r28
    3002:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3006:	8f ef       	ldi	r24, 0xFF	; 255
    3008:	9f ef       	ldi	r25, 0xFF	; 255
    300a:	a8 e0       	ldi	r26, 0x08	; 8
    300c:	81 50       	subi	r24, 0x01	; 1
    300e:	90 40       	sbci	r25, 0x00	; 0
    3010:	a0 40       	sbci	r26, 0x00	; 0
    3012:	e1 f7       	brne	.-8      	; 0x300c <__stack+0xe0d>
    3014:	00 c0       	rjmp	.+0      	; 0x3016 <__stack+0xe17>
    3016:	00 00       	nop
    3018:	ce 5f       	subi	r28, 0xFE	; 254
				forward_mm(100);
				turn_left(88);
				// pick the weight box from W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    301a:	c8 33       	cpi	r28, 0x38	; 56
    301c:	89 f7       	brne	.-30     	; 0x3000 <__stack+0xe01>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    301e:	83 e8       	ldi	r24, 0x83	; 131
    3020:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3024:	8f ef       	ldi	r24, 0xFF	; 255
    3026:	9f ef       	ldi	r25, 0xFF	; 255
    3028:	a9 e5       	ldi	r26, 0x59	; 89
    302a:	81 50       	subi	r24, 0x01	; 1
    302c:	90 40       	sbci	r25, 0x00	; 0
    302e:	a0 40       	sbci	r26, 0x00	; 0
    3030:	e1 f7       	brne	.-8      	; 0x302a <__stack+0xe2b>
    3032:	00 c0       	rjmp	.+0      	; 0x3034 <__stack+0xe35>
    3034:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);//
    3036:	88 e1       	ldi	r24, 0x18	; 24
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    303e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3042:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    3046:	88 e1       	ldi	r24, 0x18	; 24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    304e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				// drop the weight box in container
				drop_the_block();
    3052:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_right();
    3056:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    305a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward();
    305e:	0e 94 88 04 	call	0x910	; 0x910 <forward>
				blackline();
    3062:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				/////PICK THE WEIGHT BOX FROM W5
				servo_2(135);
    3066:	87 e8       	ldi	r24, 0x87	; 135
    3068:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    306c:	8f ef       	ldi	r24, 0xFF	; 255
    306e:	9f ef       	ldi	r25, 0xFF	; 255
    3070:	ac e2       	ldi	r26, 0x2C	; 44
    3072:	81 50       	subi	r24, 0x01	; 1
    3074:	90 40       	sbci	r25, 0x00	; 0
    3076:	a0 40       	sbci	r26, 0x00	; 0
    3078:	e1 f7       	brne	.-8      	; 0x3072 <__stack+0xe73>
    307a:	00 c0       	rjmp	.+0      	; 0x307c <__stack+0xe7d>
    307c:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3084:	8f ef       	ldi	r24, 0xFF	; 255
    3086:	9f ef       	ldi	r25, 0xFF	; 255
    3088:	ac e2       	ldi	r26, 0x2C	; 44
    308a:	81 50       	subi	r24, 0x01	; 1
    308c:	90 40       	sbci	r25, 0x00	; 0
    308e:	a0 40       	sbci	r26, 0x00	; 0
    3090:	e1 f7       	brne	.-8      	; 0x308a <__stack+0xe8b>
    3092:	00 c0       	rjmp	.+0      	; 0x3094 <__stack+0xe95>
    3094:	00 00       	nop
    3096:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    3098:	8c 2f       	mov	r24, r28
    309a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    309e:	8f ef       	ldi	r24, 0xFF	; 255
    30a0:	9f ef       	ldi	r25, 0xFF	; 255
    30a2:	ac e2       	ldi	r26, 0x2C	; 44
    30a4:	81 50       	subi	r24, 0x01	; 1
    30a6:	90 40       	sbci	r25, 0x00	; 0
    30a8:	a0 40       	sbci	r26, 0x00	; 0
    30aa:	e1 f7       	brne	.-8      	; 0x30a4 <__stack+0xea5>
    30ac:	00 c0       	rjmp	.+0      	; 0x30ae <__stack+0xeaf>
    30ae:	00 00       	nop
    30b0:	cb 5f       	subi	r28, 0xFB	; 251
				/////PICK THE WEIGHT BOX FROM W5
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    30b2:	cd 32       	cpi	r28, 0x2D	; 45
    30b4:	89 f7       	brne	.-30     	; 0x3098 <__stack+0xe99>
    30b6:	8f ef       	ldi	r24, 0xFF	; 255
    30b8:	9f ef       	ldi	r25, 0xFF	; 255
    30ba:	ac e2       	ldi	r26, 0x2C	; 44
    30bc:	81 50       	subi	r24, 0x01	; 1
    30be:	90 40       	sbci	r25, 0x00	; 0
    30c0:	a0 40       	sbci	r26, 0x00	; 0
    30c2:	e1 f7       	brne	.-8      	; 0x30bc <__stack+0xebd>
    30c4:	00 c0       	rjmp	.+0      	; 0x30c6 <__stack+0xec7>
    30c6:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    30c8:	82 e7       	ldi	r24, 0x72	; 114
    30ca:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				rotation_using_blackline_left();
    30ce:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    30d2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward();
    30d6:	0e 94 88 04 	call	0x910	; 0x910 <forward>
				blackline();
    30da:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    30de:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				//// drop the weight box in container
				drop_the_block();
    30e2:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_right();
    30e6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    30ea:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_left();
    30ee:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    30f2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// Now we are in CITY 1
				turn_left();
    30f6:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    30fa:	86 e9       	ldi	r24, 0x96	; 150
    30fc:	66 e9       	ldi	r22, 0x96	; 150
    30fe:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3102:	8f ef       	ldi	r24, 0xFF	; 255
    3104:	9f e3       	ldi	r25, 0x3F	; 63
    3106:	a2 e0       	ldi	r26, 0x02	; 2
    3108:	81 50       	subi	r24, 0x01	; 1
    310a:	90 40       	sbci	r25, 0x00	; 0
    310c:	a0 40       	sbci	r26, 0x00	; 0
    310e:	e1 f7       	brne	.-8      	; 0x3108 <__stack+0xf09>
    3110:	00 c0       	rjmp	.+0      	; 0x3112 <__stack+0xf13>
    3112:	00 00       	nop
				_delay_ms(50);
				stop();
    3114:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3118:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    311c:	8e eb       	ldi	r24, 0xBE	; 190
    311e:	64 eb       	ldi	r22, 0xB4	; 180
    3120:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    3124:	81 e7       	ldi	r24, 0x71	; 113
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    312c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3130:	8f ef       	ldi	r24, 0xFF	; 255
    3132:	9f ef       	ldi	r25, 0xFF	; 255
    3134:	ac e2       	ldi	r26, 0x2C	; 44
    3136:	81 50       	subi	r24, 0x01	; 1
    3138:	90 40       	sbci	r25, 0x00	; 0
    313a:	a0 40       	sbci	r26, 0x00	; 0
    313c:	e1 f7       	brne	.-8      	; 0x3136 <__stack+0xf37>
    313e:	00 c0       	rjmp	.+0      	; 0x3140 <__stack+0xf41>
    3140:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    3142:	8e eb       	ldi	r24, 0xBE	; 190
    3144:	64 eb       	ldi	r22, 0xB4	; 180
    3146:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    314a:	88 e5       	ldi	r24, 0x58	; 88
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    3152:	8e eb       	ldi	r24, 0xBE	; 190
    3154:	64 eb       	ldi	r22, 0xB4	; 180
    3156:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    315a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    315e:	8f ef       	ldi	r24, 0xFF	; 255
    3160:	9f e7       	ldi	r25, 0x7F	; 127
    3162:	a6 e1       	ldi	r26, 0x16	; 22
    3164:	81 50       	subi	r24, 0x01	; 1
    3166:	90 40       	sbci	r25, 0x00	; 0
    3168:	a0 40       	sbci	r26, 0x00	; 0
    316a:	e1 f7       	brne	.-8      	; 0x3164 <__stack+0xf65>
    316c:	00 c0       	rjmp	.+0      	; 0x316e <__stack+0xf6f>
    316e:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    3170:	86 eb       	ldi	r24, 0xB6	; 182
    3172:	64 eb       	ldi	r22, 0xB4	; 180
    3174:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    3178:	83 e5       	ldi	r24, 0x53	; 83
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    3180:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3184:	8f ef       	ldi	r24, 0xFF	; 255
    3186:	9f e7       	ldi	r25, 0x7F	; 127
    3188:	a6 e1       	ldi	r26, 0x16	; 22
    318a:	81 50       	subi	r24, 0x01	; 1
    318c:	90 40       	sbci	r25, 0x00	; 0
    318e:	a0 40       	sbci	r26, 0x00	; 0
    3190:	e1 f7       	brne	.-8      	; 0x318a <__stack+0xf8b>
    3192:	00 c0       	rjmp	.+0      	; 0x3194 <__stack+0xf95>
    3194:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    3196:	8b e9       	ldi	r24, 0x9B	; 155
    3198:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	9f ef       	ldi	r25, 0xFF	; 255
    31a0:	ac e2       	ldi	r26, 0x2C	; 44
    31a2:	81 50       	subi	r24, 0x01	; 1
    31a4:	90 40       	sbci	r25, 0x00	; 0
    31a6:	a0 40       	sbci	r26, 0x00	; 0
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <__stack+0xfa3>
    31aa:	00 c0       	rjmp	.+0      	; 0x31ac <__stack+0xfad>
    31ac:	00 00       	nop
    31ae:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    31b0:	8c 2f       	mov	r24, r28
    31b2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    31b6:	8f ef       	ldi	r24, 0xFF	; 255
    31b8:	9f ef       	ldi	r25, 0xFF	; 255
    31ba:	a8 e0       	ldi	r26, 0x08	; 8
    31bc:	81 50       	subi	r24, 0x01	; 1
    31be:	90 40       	sbci	r25, 0x00	; 0
    31c0:	a0 40       	sbci	r26, 0x00	; 0
    31c2:	e1 f7       	brne	.-8      	; 0x31bc <__stack+0xfbd>
    31c4:	00 c0       	rjmp	.+0      	; 0x31c6 <__stack+0xfc7>
    31c6:	00 00       	nop
    31c8:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    31ca:	c8 33       	cpi	r28, 0x38	; 56
    31cc:	89 f7       	brne	.-30     	; 0x31b0 <__stack+0xfb1>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    31ce:	83 e8       	ldi	r24, 0x83	; 131
    31d0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    31d4:	8f ef       	ldi	r24, 0xFF	; 255
    31d6:	9f ef       	ldi	r25, 0xFF	; 255
    31d8:	a9 e5       	ldi	r26, 0x59	; 89
    31da:	81 50       	subi	r24, 0x01	; 1
    31dc:	90 40       	sbci	r25, 0x00	; 0
    31de:	a0 40       	sbci	r26, 0x00	; 0
    31e0:	e1 f7       	brne	.-8      	; 0x31da <__stack+0xfdb>
    31e2:	00 c0       	rjmp	.+0      	; 0x31e4 <__stack+0xfe5>
    31e4:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    31e6:	88 e1       	ldi	r24, 0x18	; 24
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    31ee:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    31f2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    31f6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    31fa:	8f ef       	ldi	r24, 0xFF	; 255
    31fc:	9f e7       	ldi	r25, 0x7F	; 127
    31fe:	a6 e1       	ldi	r26, 0x16	; 22
    3200:	81 50       	subi	r24, 0x01	; 1
    3202:	90 40       	sbci	r25, 0x00	; 0
    3204:	a0 40       	sbci	r26, 0x00	; 0
    3206:	e1 f7       	brne	.-8      	; 0x3200 <__stack+0x1001>
    3208:	00 c0       	rjmp	.+0      	; 0x320a <__stack+0x100b>
    320a:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    320c:	86 e9       	ldi	r24, 0x96	; 150
    320e:	66 e9       	ldi	r22, 0x96	; 150
    3210:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    3214:	87 e2       	ldi	r24, 0x27	; 39
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    321c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    3220:	83 e0       	ldi	r24, 0x03	; 3
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3228:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE BOX IN CONTAINER OF CITY 1
				drop_the_block();
    322c:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    3230:	88 e1       	ldi	r24, 0x18	; 24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3238:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    323c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    3240:	8b e9       	ldi	r24, 0x9B	; 155
    3242:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3246:	8f ef       	ldi	r24, 0xFF	; 255
    3248:	9f ef       	ldi	r25, 0xFF	; 255
    324a:	ac e2       	ldi	r26, 0x2C	; 44
    324c:	81 50       	subi	r24, 0x01	; 1
    324e:	90 40       	sbci	r25, 0x00	; 0
    3250:	a0 40       	sbci	r26, 0x00	; 0
    3252:	e1 f7       	brne	.-8      	; 0x324c <__stack+0x104d>
    3254:	00 c0       	rjmp	.+0      	; 0x3256 <__stack+0x1057>
    3256:	00 00       	nop
    3258:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    325a:	8c 2f       	mov	r24, r28
    325c:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3260:	8f ef       	ldi	r24, 0xFF	; 255
    3262:	9f ef       	ldi	r25, 0xFF	; 255
    3264:	a8 e0       	ldi	r26, 0x08	; 8
    3266:	81 50       	subi	r24, 0x01	; 1
    3268:	90 40       	sbci	r25, 0x00	; 0
    326a:	a0 40       	sbci	r26, 0x00	; 0
    326c:	e1 f7       	brne	.-8      	; 0x3266 <__stack+0x1067>
    326e:	00 c0       	rjmp	.+0      	; 0x3270 <__stack+0x1071>
    3270:	00 00       	nop
    3272:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3274:	c8 33       	cpi	r28, 0x38	; 56
    3276:	89 f7       	brne	.-30     	; 0x325a <__stack+0x105b>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3278:	83 e8       	ldi	r24, 0x83	; 131
    327a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    327e:	8f ef       	ldi	r24, 0xFF	; 255
    3280:	9f ef       	ldi	r25, 0xFF	; 255
    3282:	a9 e5       	ldi	r26, 0x59	; 89
    3284:	81 50       	subi	r24, 0x01	; 1
    3286:	90 40       	sbci	r25, 0x00	; 0
    3288:	a0 40       	sbci	r26, 0x00	; 0
    328a:	e1 f7       	brne	.-8      	; 0x3284 <__stack+0x1085>
    328c:	00 c0       	rjmp	.+0      	; 0x328e <__stack+0x108f>
    328e:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    3290:	88 e1       	ldi	r24, 0x18	; 24
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3298:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    329c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    32a0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    32a4:	88 e1       	ldi	r24, 0x18	; 24
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    32ac:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    32b0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    32b4:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    32b8:	86 e9       	ldi	r24, 0x96	; 150
    32ba:	66 e9       	ldi	r22, 0x96	; 150
    32bc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	9f e3       	ldi	r25, 0x3F	; 63
    32c4:	a2 e0       	ldi	r26, 0x02	; 2
    32c6:	81 50       	subi	r24, 0x01	; 1
    32c8:	90 40       	sbci	r25, 0x00	; 0
    32ca:	a0 40       	sbci	r26, 0x00	; 0
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <__stack+0x10c7>
    32ce:	00 c0       	rjmp	.+0      	; 0x32d0 <__stack+0x10d1>
    32d0:	00 00       	nop
				_delay_ms(50);
				stop();
    32d2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    32d6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    32da:	88 e0       	ldi	r24, 0x08	; 8
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    32e2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the middle box
				servo_2(135);
    32e6:	87 e8       	ldi	r24, 0x87	; 135
    32e8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    32ec:	8f ef       	ldi	r24, 0xFF	; 255
    32ee:	9f ef       	ldi	r25, 0xFF	; 255
    32f0:	ac e2       	ldi	r26, 0x2C	; 44
    32f2:	81 50       	subi	r24, 0x01	; 1
    32f4:	90 40       	sbci	r25, 0x00	; 0
    32f6:	a0 40       	sbci	r26, 0x00	; 0
    32f8:	e1 f7       	brne	.-8      	; 0x32f2 <__stack+0x10f3>
    32fa:	00 c0       	rjmp	.+0      	; 0x32fc <__stack+0x10fd>
    32fc:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3304:	8f ef       	ldi	r24, 0xFF	; 255
    3306:	9f ef       	ldi	r25, 0xFF	; 255
    3308:	ac e2       	ldi	r26, 0x2C	; 44
    330a:	81 50       	subi	r24, 0x01	; 1
    330c:	90 40       	sbci	r25, 0x00	; 0
    330e:	a0 40       	sbci	r26, 0x00	; 0
    3310:	e1 f7       	brne	.-8      	; 0x330a <__stack+0x110b>
    3312:	00 c0       	rjmp	.+0      	; 0x3314 <__stack+0x1115>
    3314:	00 00       	nop
    3316:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    3318:	8c 2f       	mov	r24, r28
    331a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    331e:	8f ef       	ldi	r24, 0xFF	; 255
    3320:	9f ef       	ldi	r25, 0xFF	; 255
    3322:	ac e2       	ldi	r26, 0x2C	; 44
    3324:	81 50       	subi	r24, 0x01	; 1
    3326:	90 40       	sbci	r25, 0x00	; 0
    3328:	a0 40       	sbci	r26, 0x00	; 0
    332a:	e1 f7       	brne	.-8      	; 0x3324 <__stack+0x1125>
    332c:	00 c0       	rjmp	.+0      	; 0x332e <__stack+0x112f>
    332e:	00 00       	nop
    3330:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the middle box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    3332:	cd 32       	cpi	r28, 0x2D	; 45
    3334:	89 f7       	brne	.-30     	; 0x3318 <__stack+0x1119>
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	9f ef       	ldi	r25, 0xFF	; 255
    333a:	ac e2       	ldi	r26, 0x2C	; 44
    333c:	81 50       	subi	r24, 0x01	; 1
    333e:	90 40       	sbci	r25, 0x00	; 0
    3340:	a0 40       	sbci	r26, 0x00	; 0
    3342:	e1 f7       	brne	.-8      	; 0x333c <__stack+0x113d>
    3344:	00 c0       	rjmp	.+0      	; 0x3346 <__stack+0x1147>
    3346:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    3348:	82 e7       	ldi	r24, 0x72	; 114
    334a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    334e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3352:	86 e9       	ldi	r24, 0x96	; 150
    3354:	66 e9       	ldi	r22, 0x96	; 150
    3356:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    335a:	8f ef       	ldi	r24, 0xFF	; 255
    335c:	9f e3       	ldi	r25, 0x3F	; 63
    335e:	a2 e0       	ldi	r26, 0x02	; 2
    3360:	81 50       	subi	r24, 0x01	; 1
    3362:	90 40       	sbci	r25, 0x00	; 0
    3364:	a0 40       	sbci	r26, 0x00	; 0
    3366:	e1 f7       	brne	.-8      	; 0x3360 <__stack+0x1161>
    3368:	00 c0       	rjmp	.+0      	; 0x336a <__stack+0x116b>
    336a:	00 00       	nop
				_delay_ms(50);
				stop();
    336c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    3370:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3374:	86 e9       	ldi	r24, 0x96	; 150
    3376:	66 e9       	ldi	r22, 0x96	; 150
    3378:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    337c:	8f ef       	ldi	r24, 0xFF	; 255
    337e:	9f e3       	ldi	r25, 0x3F	; 63
    3380:	a2 e0       	ldi	r26, 0x02	; 2
    3382:	81 50       	subi	r24, 0x01	; 1
    3384:	90 40       	sbci	r25, 0x00	; 0
    3386:	a0 40       	sbci	r26, 0x00	; 0
    3388:	e1 f7       	brne	.-8      	; 0x3382 <__stack+0x1183>
    338a:	00 c0       	rjmp	.+0      	; 0x338c <__stack+0x118d>
    338c:	00 00       	nop
				_delay_ms(50);
				stop();
    338e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3392:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge second time
				rotation_using_blackline_left();
    3396:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    339a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    339e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    33a2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//DROP THE COLOR BOX AT C
				drop_the_block();
    33a6:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_right();
    33aa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    33ae:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W4
				servo_2(155);
    33b2:	8b e9       	ldi	r24, 0x9B	; 155
    33b4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    33b8:	8f ef       	ldi	r24, 0xFF	; 255
    33ba:	9f ef       	ldi	r25, 0xFF	; 255
    33bc:	ac e2       	ldi	r26, 0x2C	; 44
    33be:	81 50       	subi	r24, 0x01	; 1
    33c0:	90 40       	sbci	r25, 0x00	; 0
    33c2:	a0 40       	sbci	r26, 0x00	; 0
    33c4:	e1 f7       	brne	.-8      	; 0x33be <__stack+0x11bf>
    33c6:	00 c0       	rjmp	.+0      	; 0x33c8 <__stack+0x11c9>
    33c8:	00 00       	nop
    33ca:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    33cc:	8c 2f       	mov	r24, r28
    33ce:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    33d2:	8f ef       	ldi	r24, 0xFF	; 255
    33d4:	9f ef       	ldi	r25, 0xFF	; 255
    33d6:	a8 e0       	ldi	r26, 0x08	; 8
    33d8:	81 50       	subi	r24, 0x01	; 1
    33da:	90 40       	sbci	r25, 0x00	; 0
    33dc:	a0 40       	sbci	r26, 0x00	; 0
    33de:	e1 f7       	brne	.-8      	; 0x33d8 <__stack+0x11d9>
    33e0:	00 c0       	rjmp	.+0      	; 0x33e2 <__stack+0x11e3>
    33e2:	00 00       	nop
    33e4:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_right();
				blackline();
				// pick the weight box from W4
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    33e6:	c8 33       	cpi	r28, 0x38	; 56
    33e8:	89 f7       	brne	.-30     	; 0x33cc <__stack+0x11cd>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    33ea:	83 e8       	ldi	r24, 0x83	; 131
    33ec:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    33f0:	8f ef       	ldi	r24, 0xFF	; 255
    33f2:	9f ef       	ldi	r25, 0xFF	; 255
    33f4:	a9 e5       	ldi	r26, 0x59	; 89
    33f6:	81 50       	subi	r24, 0x01	; 1
    33f8:	90 40       	sbci	r25, 0x00	; 0
    33fa:	a0 40       	sbci	r26, 0x00	; 0
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <__stack+0x11f7>
    33fe:	00 c0       	rjmp	.+0      	; 0x3400 <__stack+0x1201>
    3400:	00 00       	nop
				_delay_ms(2000);
				rotation_using_blackline_left();
    3402:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3406:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    340a:	88 e1       	ldi	r24, 0x18	; 24
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    3412:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    3416:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// drop the box in container
				drop_the_block();
    341a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_left();
    341e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3422:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// PICK THE WEIGHT BOX FROM W3
				servo_2(155);
    3426:	8b e9       	ldi	r24, 0x9B	; 155
    3428:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    342c:	8f ef       	ldi	r24, 0xFF	; 255
    342e:	9f ef       	ldi	r25, 0xFF	; 255
    3430:	ac e2       	ldi	r26, 0x2C	; 44
    3432:	81 50       	subi	r24, 0x01	; 1
    3434:	90 40       	sbci	r25, 0x00	; 0
    3436:	a0 40       	sbci	r26, 0x00	; 0
    3438:	e1 f7       	brne	.-8      	; 0x3432 <__stack+0x1233>
    343a:	00 c0       	rjmp	.+0      	; 0x343c <__stack+0x123d>
    343c:	00 00       	nop
    343e:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3440:	8c 2f       	mov	r24, r28
    3442:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3446:	8f ef       	ldi	r24, 0xFF	; 255
    3448:	9f ef       	ldi	r25, 0xFF	; 255
    344a:	a8 e0       	ldi	r26, 0x08	; 8
    344c:	81 50       	subi	r24, 0x01	; 1
    344e:	90 40       	sbci	r25, 0x00	; 0
    3450:	a0 40       	sbci	r26, 0x00	; 0
    3452:	e1 f7       	brne	.-8      	; 0x344c <__stack+0x124d>
    3454:	00 c0       	rjmp	.+0      	; 0x3456 <__stack+0x1257>
    3456:	00 00       	nop
    3458:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// PICK THE WEIGHT BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    345a:	c8 33       	cpi	r28, 0x38	; 56
    345c:	89 f7       	brne	.-30     	; 0x3440 <__stack+0x1241>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    345e:	83 e8       	ldi	r24, 0x83	; 131
    3460:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3464:	8f ef       	ldi	r24, 0xFF	; 255
    3466:	9f ef       	ldi	r25, 0xFF	; 255
    3468:	a9 e5       	ldi	r26, 0x59	; 89
    346a:	81 50       	subi	r24, 0x01	; 1
    346c:	90 40       	sbci	r25, 0x00	; 0
    346e:	a0 40       	sbci	r26, 0x00	; 0
    3470:	e1 f7       	brne	.-8      	; 0x346a <__stack+0x126b>
    3472:	00 c0       	rjmp	.+0      	; 0x3474 <__stack+0x1275>
    3474:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);//
    3476:	88 e1       	ldi	r24, 0x18	; 24
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    347e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3482:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    3486:	88 e1       	ldi	r24, 0x18	; 24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    348e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				// drop the weight box in container
				drop_the_block();
    3492:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>

				forward_mm(24);//
    3496:	88 e1       	ldi	r24, 0x18	; 24
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    349e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    34a2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);///
    34a6:	87 e1       	ldi	r24, 0x17	; 23
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left();
    34ae:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    34b2:	8e eb       	ldi	r24, 0xBE	; 190
    34b4:	64 eb       	ldi	r22, 0xB4	; 180
    34b6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    34ba:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    34be:	8f ef       	ldi	r24, 0xFF	; 255
    34c0:	9f ef       	ldi	r25, 0xFF	; 255
    34c2:	ac e2       	ldi	r26, 0x2C	; 44
    34c4:	81 50       	subi	r24, 0x01	; 1
    34c6:	90 40       	sbci	r25, 0x00	; 0
    34c8:	a0 40       	sbci	r26, 0x00	; 0
    34ca:	e1 f7       	brne	.-8      	; 0x34c4 <__stack+0x12c5>
    34cc:	00 c0       	rjmp	.+0      	; 0x34ce <__stack+0x12cf>
    34ce:	00 00       	nop
				_delay_ms(1000);
				blackline();
    34d0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// NOW WE ARE IN CITY 1
				turn_left();
    34d4:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    34d8:	86 e9       	ldi	r24, 0x96	; 150
    34da:	66 e9       	ldi	r22, 0x96	; 150
    34dc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    34e0:	8f ef       	ldi	r24, 0xFF	; 255
    34e2:	9f e3       	ldi	r25, 0x3F	; 63
    34e4:	a2 e0       	ldi	r26, 0x02	; 2
    34e6:	81 50       	subi	r24, 0x01	; 1
    34e8:	90 40       	sbci	r25, 0x00	; 0
    34ea:	a0 40       	sbci	r26, 0x00	; 0
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <__stack+0x12e7>
    34ee:	00 c0       	rjmp	.+0      	; 0x34f0 <__stack+0x12f1>
    34f0:	00 00       	nop
				_delay_ms(50);
				stop();
    34f2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    34f6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    34fa:	8e eb       	ldi	r24, 0xBE	; 190
    34fc:	64 eb       	ldi	r22, 0xB4	; 180
    34fe:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    3502:	81 e7       	ldi	r24, 0x71	; 113
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    350a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    350e:	8f ef       	ldi	r24, 0xFF	; 255
    3510:	9f ef       	ldi	r25, 0xFF	; 255
    3512:	ac e2       	ldi	r26, 0x2C	; 44
    3514:	81 50       	subi	r24, 0x01	; 1
    3516:	90 40       	sbci	r25, 0x00	; 0
    3518:	a0 40       	sbci	r26, 0x00	; 0
    351a:	e1 f7       	brne	.-8      	; 0x3514 <__stack+0x1315>
    351c:	00 c0       	rjmp	.+0      	; 0x351e <__stack+0x131f>
    351e:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    3520:	8e eb       	ldi	r24, 0xBE	; 190
    3522:	64 eb       	ldi	r22, 0xB4	; 180
    3524:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    3528:	88 e5       	ldi	r24, 0x58	; 88
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    3530:	8e eb       	ldi	r24, 0xBE	; 190
    3532:	64 eb       	ldi	r22, 0xB4	; 180
    3534:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    3538:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    353c:	8f ef       	ldi	r24, 0xFF	; 255
    353e:	9f e7       	ldi	r25, 0x7F	; 127
    3540:	a6 e1       	ldi	r26, 0x16	; 22
    3542:	81 50       	subi	r24, 0x01	; 1
    3544:	90 40       	sbci	r25, 0x00	; 0
    3546:	a0 40       	sbci	r26, 0x00	; 0
    3548:	e1 f7       	brne	.-8      	; 0x3542 <__stack+0x1343>
    354a:	00 c0       	rjmp	.+0      	; 0x354c <__stack+0x134d>
    354c:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    354e:	86 eb       	ldi	r24, 0xB6	; 182
    3550:	64 eb       	ldi	r22, 0xB4	; 180
    3552:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    3556:	83 e5       	ldi	r24, 0x53	; 83
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    355e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3562:	8f ef       	ldi	r24, 0xFF	; 255
    3564:	9f e7       	ldi	r25, 0x7F	; 127
    3566:	a6 e1       	ldi	r26, 0x16	; 22
    3568:	81 50       	subi	r24, 0x01	; 1
    356a:	90 40       	sbci	r25, 0x00	; 0
    356c:	a0 40       	sbci	r26, 0x00	; 0
    356e:	e1 f7       	brne	.-8      	; 0x3568 <__stack+0x1369>
    3570:	00 c0       	rjmp	.+0      	; 0x3572 <__stack+0x1373>
    3572:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    3574:	8b e9       	ldi	r24, 0x9B	; 155
    3576:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    357a:	8f ef       	ldi	r24, 0xFF	; 255
    357c:	9f ef       	ldi	r25, 0xFF	; 255
    357e:	ac e2       	ldi	r26, 0x2C	; 44
    3580:	81 50       	subi	r24, 0x01	; 1
    3582:	90 40       	sbci	r25, 0x00	; 0
    3584:	a0 40       	sbci	r26, 0x00	; 0
    3586:	e1 f7       	brne	.-8      	; 0x3580 <__stack+0x1381>
    3588:	00 c0       	rjmp	.+0      	; 0x358a <__stack+0x138b>
    358a:	00 00       	nop
    358c:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    358e:	8c 2f       	mov	r24, r28
    3590:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3594:	8f ef       	ldi	r24, 0xFF	; 255
    3596:	9f ef       	ldi	r25, 0xFF	; 255
    3598:	a8 e0       	ldi	r26, 0x08	; 8
    359a:	81 50       	subi	r24, 0x01	; 1
    359c:	90 40       	sbci	r25, 0x00	; 0
    359e:	a0 40       	sbci	r26, 0x00	; 0
    35a0:	e1 f7       	brne	.-8      	; 0x359a <__stack+0x139b>
    35a2:	00 c0       	rjmp	.+0      	; 0x35a4 <__stack+0x13a5>
    35a4:	00 00       	nop
    35a6:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    35a8:	c8 33       	cpi	r28, 0x38	; 56
    35aa:	89 f7       	brne	.-30     	; 0x358e <__stack+0x138f>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    35ac:	83 e8       	ldi	r24, 0x83	; 131
    35ae:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    35b2:	8f ef       	ldi	r24, 0xFF	; 255
    35b4:	9f ef       	ldi	r25, 0xFF	; 255
    35b6:	a9 e5       	ldi	r26, 0x59	; 89
    35b8:	81 50       	subi	r24, 0x01	; 1
    35ba:	90 40       	sbci	r25, 0x00	; 0
    35bc:	a0 40       	sbci	r26, 0x00	; 0
    35be:	e1 f7       	brne	.-8      	; 0x35b8 <__stack+0x13b9>
    35c0:	00 c0       	rjmp	.+0      	; 0x35c2 <__stack+0x13c3>
    35c2:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    35c4:	88 e1       	ldi	r24, 0x18	; 24
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    35cc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    35d0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    35d4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    35d8:	8f ef       	ldi	r24, 0xFF	; 255
    35da:	9f e7       	ldi	r25, 0x7F	; 127
    35dc:	a6 e1       	ldi	r26, 0x16	; 22
    35de:	81 50       	subi	r24, 0x01	; 1
    35e0:	90 40       	sbci	r25, 0x00	; 0
    35e2:	a0 40       	sbci	r26, 0x00	; 0
    35e4:	e1 f7       	brne	.-8      	; 0x35de <__stack+0x13df>
    35e6:	00 c0       	rjmp	.+0      	; 0x35e8 <__stack+0x13e9>
    35e8:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    35ea:	86 e9       	ldi	r24, 0x96	; 150
    35ec:	66 e9       	ldi	r22, 0x96	; 150
    35ee:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    35f2:	87 e2       	ldi	r24, 0x27	; 39
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    35fa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    35fe:	83 e0       	ldi	r24, 0x03	; 3
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3606:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE BOX IN CONTAINER
				drop_the_block();
    360a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    360e:	88 e1       	ldi	r24, 0x18	; 24
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3616:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    361a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    361e:	8b e9       	ldi	r24, 0x9B	; 155
    3620:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	9f ef       	ldi	r25, 0xFF	; 255
    3628:	ac e2       	ldi	r26, 0x2C	; 44
    362a:	81 50       	subi	r24, 0x01	; 1
    362c:	90 40       	sbci	r25, 0x00	; 0
    362e:	a0 40       	sbci	r26, 0x00	; 0
    3630:	e1 f7       	brne	.-8      	; 0x362a <__stack+0x142b>
    3632:	00 c0       	rjmp	.+0      	; 0x3634 <__stack+0x1435>
    3634:	00 00       	nop
    3636:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3638:	8c 2f       	mov	r24, r28
    363a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    363e:	8f ef       	ldi	r24, 0xFF	; 255
    3640:	9f ef       	ldi	r25, 0xFF	; 255
    3642:	a8 e0       	ldi	r26, 0x08	; 8
    3644:	81 50       	subi	r24, 0x01	; 1
    3646:	90 40       	sbci	r25, 0x00	; 0
    3648:	a0 40       	sbci	r26, 0x00	; 0
    364a:	e1 f7       	brne	.-8      	; 0x3644 <__stack+0x1445>
    364c:	00 c0       	rjmp	.+0      	; 0x364e <__stack+0x144f>
    364e:	00 00       	nop
    3650:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3652:	c8 33       	cpi	r28, 0x38	; 56
    3654:	89 f7       	brne	.-30     	; 0x3638 <__stack+0x1439>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3656:	83 e8       	ldi	r24, 0x83	; 131
    3658:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    365c:	8f ef       	ldi	r24, 0xFF	; 255
    365e:	9f ef       	ldi	r25, 0xFF	; 255
    3660:	a9 e5       	ldi	r26, 0x59	; 89
    3662:	81 50       	subi	r24, 0x01	; 1
    3664:	90 40       	sbci	r25, 0x00	; 0
    3666:	a0 40       	sbci	r26, 0x00	; 0
    3668:	e1 f7       	brne	.-8      	; 0x3662 <__stack+0x1463>
    366a:	00 c0       	rjmp	.+0      	; 0x366c <__stack+0x146d>
    366c:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    366e:	88 e1       	ldi	r24, 0x18	; 24
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3676:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    367a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    367e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    3682:	88 e1       	ldi	r24, 0x18	; 24
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    368a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    368e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    3692:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3696:	86 e9       	ldi	r24, 0x96	; 150
    3698:	66 e9       	ldi	r22, 0x96	; 150
    369a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    369e:	8f ef       	ldi	r24, 0xFF	; 255
    36a0:	9f e3       	ldi	r25, 0x3F	; 63
    36a2:	a2 e0       	ldi	r26, 0x02	; 2
    36a4:	81 50       	subi	r24, 0x01	; 1
    36a6:	90 40       	sbci	r25, 0x00	; 0
    36a8:	a0 40       	sbci	r26, 0x00	; 0
    36aa:	e1 f7       	brne	.-8      	; 0x36a4 <__stack+0x14a5>
    36ac:	00 c0       	rjmp	.+0      	; 0x36ae <__stack+0x14af>
    36ae:	00 00       	nop
				_delay_ms(50);
				stop();
    36b0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    36b4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    36b8:	88 e0       	ldi	r24, 0x08	; 8
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    36c0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the bottom box
				servo_2(135);
    36c4:	87 e8       	ldi	r24, 0x87	; 135
    36c6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    36ca:	8f ef       	ldi	r24, 0xFF	; 255
    36cc:	9f ef       	ldi	r25, 0xFF	; 255
    36ce:	ac e2       	ldi	r26, 0x2C	; 44
    36d0:	81 50       	subi	r24, 0x01	; 1
    36d2:	90 40       	sbci	r25, 0x00	; 0
    36d4:	a0 40       	sbci	r26, 0x00	; 0
    36d6:	e1 f7       	brne	.-8      	; 0x36d0 <__stack+0x14d1>
    36d8:	00 c0       	rjmp	.+0      	; 0x36da <__stack+0x14db>
    36da:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    36e2:	8f ef       	ldi	r24, 0xFF	; 255
    36e4:	9f ef       	ldi	r25, 0xFF	; 255
    36e6:	ac e2       	ldi	r26, 0x2C	; 44
    36e8:	81 50       	subi	r24, 0x01	; 1
    36ea:	90 40       	sbci	r25, 0x00	; 0
    36ec:	a0 40       	sbci	r26, 0x00	; 0
    36ee:	e1 f7       	brne	.-8      	; 0x36e8 <__stack+0x14e9>
    36f0:	00 c0       	rjmp	.+0      	; 0x36f2 <__stack+0x14f3>
    36f2:	00 00       	nop
    36f4:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    36f6:	8c 2f       	mov	r24, r28
    36f8:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    36fc:	8f ef       	ldi	r24, 0xFF	; 255
    36fe:	9f ef       	ldi	r25, 0xFF	; 255
    3700:	ac e2       	ldi	r26, 0x2C	; 44
    3702:	81 50       	subi	r24, 0x01	; 1
    3704:	90 40       	sbci	r25, 0x00	; 0
    3706:	a0 40       	sbci	r26, 0x00	; 0
    3708:	e1 f7       	brne	.-8      	; 0x3702 <__stack+0x1503>
    370a:	00 c0       	rjmp	.+0      	; 0x370c <__stack+0x150d>
    370c:	00 00       	nop
    370e:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the bottom box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    3710:	cd 32       	cpi	r28, 0x2D	; 45
    3712:	89 f7       	brne	.-30     	; 0x36f6 <__stack+0x14f7>
    3714:	8f ef       	ldi	r24, 0xFF	; 255
    3716:	9f ef       	ldi	r25, 0xFF	; 255
    3718:	ac e2       	ldi	r26, 0x2C	; 44
    371a:	81 50       	subi	r24, 0x01	; 1
    371c:	90 40       	sbci	r25, 0x00	; 0
    371e:	a0 40       	sbci	r26, 0x00	; 0
    3720:	e1 f7       	brne	.-8      	; 0x371a <__stack+0x151b>
    3722:	00 c0       	rjmp	.+0      	; 0x3724 <__stack+0x1525>
    3724:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    3726:	82 e7       	ldi	r24, 0x72	; 114
    3728:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    372c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3730:	86 e9       	ldi	r24, 0x96	; 150
    3732:	66 e9       	ldi	r22, 0x96	; 150
    3734:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3738:	8f ef       	ldi	r24, 0xFF	; 255
    373a:	9f e3       	ldi	r25, 0x3F	; 63
    373c:	a2 e0       	ldi	r26, 0x02	; 2
    373e:	81 50       	subi	r24, 0x01	; 1
    3740:	90 40       	sbci	r25, 0x00	; 0
    3742:	a0 40       	sbci	r26, 0x00	; 0
    3744:	e1 f7       	brne	.-8      	; 0x373e <__stack+0x153f>
    3746:	00 c0       	rjmp	.+0      	; 0x3748 <__stack+0x1549>
    3748:	00 00       	nop
				_delay_ms(50);
				stop();
    374a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    374e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3752:	86 e9       	ldi	r24, 0x96	; 150
    3754:	66 e9       	ldi	r22, 0x96	; 150
    3756:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    375a:	8f ef       	ldi	r24, 0xFF	; 255
    375c:	9f e3       	ldi	r25, 0x3F	; 63
    375e:	a2 e0       	ldi	r26, 0x02	; 2
    3760:	81 50       	subi	r24, 0x01	; 1
    3762:	90 40       	sbci	r25, 0x00	; 0
    3764:	a0 40       	sbci	r26, 0x00	; 0
    3766:	e1 f7       	brne	.-8      	; 0x3760 <__stack+0x1561>
    3768:	00 c0       	rjmp	.+0      	; 0x376a <__stack+0x156b>
    376a:	00 00       	nop
				_delay_ms(50);
				stop();
    376c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3770:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge last time
				// we are in city 2
				forward_mm(24);
    3774:	88 e1       	ldi	r24, 0x18	; 24
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				velocity(140,140);
    377c:	8c e8       	ldi	r24, 0x8C	; 140
    377e:	6c e8       	ldi	r22, 0x8C	; 140
    3780:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				blackline();
    3784:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// drop the color box at B
				drop_the_block();
    3788:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				
			}
		}
		////////////////////////////////////////////////CASE 3-IN FAVOUR-BOTTOMMOST BLOCK AT LOCATION C//////////////////////////////////////
		if(bottom_position)
    378c:	80 91 29 02 	lds	r24, 0x0229
    3790:	88 23       	and	r24, r24
    3792:	11 f4       	brne	.+4      	; 0x3798 <__stack+0x1599>
    3794:	0c 94 63 33 	jmp	0x66c6	; 0x66c6 <__stack+0x44c7>
		{
			if(top_HZ_waste_block_color==flag1_color)///THUS BOTTOM AT C ,TOP AT A,WHICH MEANS MID AT B
    3798:	90 91 10 02 	lds	r25, 0x0210
    379c:	80 91 1a 02 	lds	r24, 0x021A
    37a0:	98 17       	cp	r25, r24
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <__stack+0x15a7>
    37a4:	e6 c3       	rjmp	.+1996   	; 0x3f72 <__stack+0x1d73>
			{
				rotation_using_blackline_left();
    37a6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    37aa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    37ae:	8f ef       	ldi	r24, 0xFF	; 255
    37b0:	9f ef       	ldi	r25, 0xFF	; 255
    37b2:	ac e2       	ldi	r26, 0x2C	; 44
    37b4:	81 50       	subi	r24, 0x01	; 1
    37b6:	90 40       	sbci	r25, 0x00	; 0
    37b8:	a0 40       	sbci	r26, 0x00	; 0
    37ba:	e1 f7       	brne	.-8      	; 0x37b4 <__stack+0x15b5>
    37bc:	00 c0       	rjmp	.+0      	; 0x37be <__stack+0x15bf>
    37be:	00 00       	nop
				_delay_ms(1000);
				rotation_using_blackline_left();
    37c0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    37c4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(22);
    37c8:	86 e1       	ldi	r24, 0x16	; 22
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				velocity(140,140);
    37d0:	8c e8       	ldi	r24, 0x8C	; 140
    37d2:	6c e8       	ldi	r22, 0x8C	; 140
    37d4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				blackline();
    37d8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				turn_left();
    37dc:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    37e0:	8e eb       	ldi	r24, 0xBE	; 190
    37e2:	64 eb       	ldi	r22, 0xB4	; 180
    37e4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    37e8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    37ec:	8f ef       	ldi	r24, 0xFF	; 255
    37ee:	9f ef       	ldi	r25, 0xFF	; 255
    37f0:	ac e2       	ldi	r26, 0x2C	; 44
    37f2:	81 50       	subi	r24, 0x01	; 1
    37f4:	90 40       	sbci	r25, 0x00	; 0
    37f6:	a0 40       	sbci	r26, 0x00	; 0
    37f8:	e1 f7       	brne	.-8      	; 0x37f2 <__stack+0x15f3>
    37fa:	00 c0       	rjmp	.+0      	; 0x37fc <__stack+0x15fd>
    37fc:	00 00       	nop
				_delay_ms(1000);
				blackline();
    37fe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//////now drop the color box at A
				drop_the_block();
    3802:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				/////////////////////////////////////
				forward_mm(40);
    3806:	88 e2       	ldi	r24, 0x28	; 40
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    380e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    3812:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(100);
    3816:	84 e6       	ldi	r24, 0x64	; 100
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left(88);
    381e:	88 e5       	ldi	r24, 0x58	; 88
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				// pick the weight box from W3
				servo_2(155);
    3826:	8b e9       	ldi	r24, 0x9B	; 155
    3828:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    382c:	8f ef       	ldi	r24, 0xFF	; 255
    382e:	9f ef       	ldi	r25, 0xFF	; 255
    3830:	ac e2       	ldi	r26, 0x2C	; 44
    3832:	81 50       	subi	r24, 0x01	; 1
    3834:	90 40       	sbci	r25, 0x00	; 0
    3836:	a0 40       	sbci	r26, 0x00	; 0
    3838:	e1 f7       	brne	.-8      	; 0x3832 <__stack+0x1633>
    383a:	00 c0       	rjmp	.+0      	; 0x383c <__stack+0x163d>
    383c:	00 00       	nop
    383e:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3840:	8c 2f       	mov	r24, r28
    3842:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3846:	8f ef       	ldi	r24, 0xFF	; 255
    3848:	9f ef       	ldi	r25, 0xFF	; 255
    384a:	a8 e0       	ldi	r26, 0x08	; 8
    384c:	81 50       	subi	r24, 0x01	; 1
    384e:	90 40       	sbci	r25, 0x00	; 0
    3850:	a0 40       	sbci	r26, 0x00	; 0
    3852:	e1 f7       	brne	.-8      	; 0x384c <__stack+0x164d>
    3854:	00 c0       	rjmp	.+0      	; 0x3856 <__stack+0x1657>
    3856:	00 00       	nop
    3858:	ce 5f       	subi	r28, 0xFE	; 254
				forward_mm(100);
				turn_left(88);
				// pick the weight box from W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    385a:	c8 33       	cpi	r28, 0x38	; 56
    385c:	89 f7       	brne	.-30     	; 0x3840 <__stack+0x1641>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    385e:	83 e8       	ldi	r24, 0x83	; 131
    3860:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3864:	8f ef       	ldi	r24, 0xFF	; 255
    3866:	9f ef       	ldi	r25, 0xFF	; 255
    3868:	a9 e5       	ldi	r26, 0x59	; 89
    386a:	81 50       	subi	r24, 0x01	; 1
    386c:	90 40       	sbci	r25, 0x00	; 0
    386e:	a0 40       	sbci	r26, 0x00	; 0
    3870:	e1 f7       	brne	.-8      	; 0x386a <__stack+0x166b>
    3872:	00 c0       	rjmp	.+0      	; 0x3874 <__stack+0x1675>
    3874:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);//
    3876:	88 e1       	ldi	r24, 0x18	; 24
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    387e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3882:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    3886:	88 e1       	ldi	r24, 0x18	; 24
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    388e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				// drop the weight box in container
				drop_the_block();
    3892:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    3896:	88 e1       	ldi	r24, 0x18	; 24
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    389e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    38a2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);///
    38a6:	87 e1       	ldi	r24, 0x17	; 23
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left();
    38ae:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    38b2:	8e eb       	ldi	r24, 0xBE	; 190
    38b4:	64 eb       	ldi	r22, 0xB4	; 180
    38b6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    38ba:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    38be:	8f ef       	ldi	r24, 0xFF	; 255
    38c0:	9f ef       	ldi	r25, 0xFF	; 255
    38c2:	ac e2       	ldi	r26, 0x2C	; 44
    38c4:	81 50       	subi	r24, 0x01	; 1
    38c6:	90 40       	sbci	r25, 0x00	; 0
    38c8:	a0 40       	sbci	r26, 0x00	; 0
    38ca:	e1 f7       	brne	.-8      	; 0x38c4 <__stack+0x16c5>
    38cc:	00 c0       	rjmp	.+0      	; 0x38ce <__stack+0x16cf>
    38ce:	00 00       	nop
				_delay_ms(1000);
				blackline();
    38d0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// Now we are in CITY 1
				turn_left();
    38d4:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    38d8:	86 e9       	ldi	r24, 0x96	; 150
    38da:	66 e9       	ldi	r22, 0x96	; 150
    38dc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    38e0:	8f ef       	ldi	r24, 0xFF	; 255
    38e2:	9f e3       	ldi	r25, 0x3F	; 63
    38e4:	a2 e0       	ldi	r26, 0x02	; 2
    38e6:	81 50       	subi	r24, 0x01	; 1
    38e8:	90 40       	sbci	r25, 0x00	; 0
    38ea:	a0 40       	sbci	r26, 0x00	; 0
    38ec:	e1 f7       	brne	.-8      	; 0x38e6 <__stack+0x16e7>
    38ee:	00 c0       	rjmp	.+0      	; 0x38f0 <__stack+0x16f1>
    38f0:	00 00       	nop
				_delay_ms(50);
				stop();
    38f2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    38f6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    38fa:	8e eb       	ldi	r24, 0xBE	; 190
    38fc:	64 eb       	ldi	r22, 0xB4	; 180
    38fe:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    3902:	81 e7       	ldi	r24, 0x71	; 113
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    390a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    390e:	8f ef       	ldi	r24, 0xFF	; 255
    3910:	9f ef       	ldi	r25, 0xFF	; 255
    3912:	ac e2       	ldi	r26, 0x2C	; 44
    3914:	81 50       	subi	r24, 0x01	; 1
    3916:	90 40       	sbci	r25, 0x00	; 0
    3918:	a0 40       	sbci	r26, 0x00	; 0
    391a:	e1 f7       	brne	.-8      	; 0x3914 <__stack+0x1715>
    391c:	00 c0       	rjmp	.+0      	; 0x391e <__stack+0x171f>
    391e:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    3920:	8e eb       	ldi	r24, 0xBE	; 190
    3922:	64 eb       	ldi	r22, 0xB4	; 180
    3924:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    3928:	88 e5       	ldi	r24, 0x58	; 88
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    3930:	8e eb       	ldi	r24, 0xBE	; 190
    3932:	64 eb       	ldi	r22, 0xB4	; 180
    3934:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    3938:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    393c:	8f ef       	ldi	r24, 0xFF	; 255
    393e:	9f e7       	ldi	r25, 0x7F	; 127
    3940:	a6 e1       	ldi	r26, 0x16	; 22
    3942:	81 50       	subi	r24, 0x01	; 1
    3944:	90 40       	sbci	r25, 0x00	; 0
    3946:	a0 40       	sbci	r26, 0x00	; 0
    3948:	e1 f7       	brne	.-8      	; 0x3942 <__stack+0x1743>
    394a:	00 c0       	rjmp	.+0      	; 0x394c <__stack+0x174d>
    394c:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    394e:	86 eb       	ldi	r24, 0xB6	; 182
    3950:	64 eb       	ldi	r22, 0xB4	; 180
    3952:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    3956:	83 e5       	ldi	r24, 0x53	; 83
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    395e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3962:	8f ef       	ldi	r24, 0xFF	; 255
    3964:	9f e7       	ldi	r25, 0x7F	; 127
    3966:	a6 e1       	ldi	r26, 0x16	; 22
    3968:	81 50       	subi	r24, 0x01	; 1
    396a:	90 40       	sbci	r25, 0x00	; 0
    396c:	a0 40       	sbci	r26, 0x00	; 0
    396e:	e1 f7       	brne	.-8      	; 0x3968 <__stack+0x1769>
    3970:	00 c0       	rjmp	.+0      	; 0x3972 <__stack+0x1773>
    3972:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    3974:	8b e9       	ldi	r24, 0x9B	; 155
    3976:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    397a:	8f ef       	ldi	r24, 0xFF	; 255
    397c:	9f ef       	ldi	r25, 0xFF	; 255
    397e:	ac e2       	ldi	r26, 0x2C	; 44
    3980:	81 50       	subi	r24, 0x01	; 1
    3982:	90 40       	sbci	r25, 0x00	; 0
    3984:	a0 40       	sbci	r26, 0x00	; 0
    3986:	e1 f7       	brne	.-8      	; 0x3980 <__stack+0x1781>
    3988:	00 c0       	rjmp	.+0      	; 0x398a <__stack+0x178b>
    398a:	00 00       	nop
    398c:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    398e:	8c 2f       	mov	r24, r28
    3990:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3994:	8f ef       	ldi	r24, 0xFF	; 255
    3996:	9f ef       	ldi	r25, 0xFF	; 255
    3998:	a8 e0       	ldi	r26, 0x08	; 8
    399a:	81 50       	subi	r24, 0x01	; 1
    399c:	90 40       	sbci	r25, 0x00	; 0
    399e:	a0 40       	sbci	r26, 0x00	; 0
    39a0:	e1 f7       	brne	.-8      	; 0x399a <__stack+0x179b>
    39a2:	00 c0       	rjmp	.+0      	; 0x39a4 <__stack+0x17a5>
    39a4:	00 00       	nop
    39a6:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    39a8:	c8 33       	cpi	r28, 0x38	; 56
    39aa:	89 f7       	brne	.-30     	; 0x398e <__stack+0x178f>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    39ac:	83 e8       	ldi	r24, 0x83	; 131
    39ae:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    39b2:	8f ef       	ldi	r24, 0xFF	; 255
    39b4:	9f ef       	ldi	r25, 0xFF	; 255
    39b6:	a9 e5       	ldi	r26, 0x59	; 89
    39b8:	81 50       	subi	r24, 0x01	; 1
    39ba:	90 40       	sbci	r25, 0x00	; 0
    39bc:	a0 40       	sbci	r26, 0x00	; 0
    39be:	e1 f7       	brne	.-8      	; 0x39b8 <__stack+0x17b9>
    39c0:	00 c0       	rjmp	.+0      	; 0x39c2 <__stack+0x17c3>
    39c2:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    39c4:	88 e1       	ldi	r24, 0x18	; 24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    39cc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    39d0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    39d4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    39d8:	8f ef       	ldi	r24, 0xFF	; 255
    39da:	9f e7       	ldi	r25, 0x7F	; 127
    39dc:	a6 e1       	ldi	r26, 0x16	; 22
    39de:	81 50       	subi	r24, 0x01	; 1
    39e0:	90 40       	sbci	r25, 0x00	; 0
    39e2:	a0 40       	sbci	r26, 0x00	; 0
    39e4:	e1 f7       	brne	.-8      	; 0x39de <__stack+0x17df>
    39e6:	00 c0       	rjmp	.+0      	; 0x39e8 <__stack+0x17e9>
    39e8:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    39ea:	86 e9       	ldi	r24, 0x96	; 150
    39ec:	66 e9       	ldi	r22, 0x96	; 150
    39ee:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    39f2:	87 e2       	ldi	r24, 0x27	; 39
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    39fa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    39fe:	83 e0       	ldi	r24, 0x03	; 3
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3a06:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE BOX IN CONTAINER OF CITY 1
				drop_the_block();
    3a0a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    3a0e:	88 e1       	ldi	r24, 0x18	; 24
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3a16:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3a1a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    3a1e:	8b e9       	ldi	r24, 0x9B	; 155
    3a20:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3a24:	8f ef       	ldi	r24, 0xFF	; 255
    3a26:	9f ef       	ldi	r25, 0xFF	; 255
    3a28:	ac e2       	ldi	r26, 0x2C	; 44
    3a2a:	81 50       	subi	r24, 0x01	; 1
    3a2c:	90 40       	sbci	r25, 0x00	; 0
    3a2e:	a0 40       	sbci	r26, 0x00	; 0
    3a30:	e1 f7       	brne	.-8      	; 0x3a2a <__stack+0x182b>
    3a32:	00 c0       	rjmp	.+0      	; 0x3a34 <__stack+0x1835>
    3a34:	00 00       	nop
    3a36:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3a38:	8c 2f       	mov	r24, r28
    3a3a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3a3e:	8f ef       	ldi	r24, 0xFF	; 255
    3a40:	9f ef       	ldi	r25, 0xFF	; 255
    3a42:	a8 e0       	ldi	r26, 0x08	; 8
    3a44:	81 50       	subi	r24, 0x01	; 1
    3a46:	90 40       	sbci	r25, 0x00	; 0
    3a48:	a0 40       	sbci	r26, 0x00	; 0
    3a4a:	e1 f7       	brne	.-8      	; 0x3a44 <__stack+0x1845>
    3a4c:	00 c0       	rjmp	.+0      	; 0x3a4e <__stack+0x184f>
    3a4e:	00 00       	nop
    3a50:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3a52:	c8 33       	cpi	r28, 0x38	; 56
    3a54:	89 f7       	brne	.-30     	; 0x3a38 <__stack+0x1839>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3a56:	83 e8       	ldi	r24, 0x83	; 131
    3a58:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3a5c:	8f ef       	ldi	r24, 0xFF	; 255
    3a5e:	9f ef       	ldi	r25, 0xFF	; 255
    3a60:	a9 e5       	ldi	r26, 0x59	; 89
    3a62:	81 50       	subi	r24, 0x01	; 1
    3a64:	90 40       	sbci	r25, 0x00	; 0
    3a66:	a0 40       	sbci	r26, 0x00	; 0
    3a68:	e1 f7       	brne	.-8      	; 0x3a62 <__stack+0x1863>
    3a6a:	00 c0       	rjmp	.+0      	; 0x3a6c <__stack+0x186d>
    3a6c:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    3a6e:	88 e1       	ldi	r24, 0x18	; 24
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3a76:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3a7a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    3a7e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    3a82:	88 e1       	ldi	r24, 0x18	; 24
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3a8a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3a8e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    3a92:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3a96:	86 e9       	ldi	r24, 0x96	; 150
    3a98:	66 e9       	ldi	r22, 0x96	; 150
    3a9a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3a9e:	8f ef       	ldi	r24, 0xFF	; 255
    3aa0:	9f e3       	ldi	r25, 0x3F	; 63
    3aa2:	a2 e0       	ldi	r26, 0x02	; 2
    3aa4:	81 50       	subi	r24, 0x01	; 1
    3aa6:	90 40       	sbci	r25, 0x00	; 0
    3aa8:	a0 40       	sbci	r26, 0x00	; 0
    3aaa:	e1 f7       	brne	.-8      	; 0x3aa4 <__stack+0x18a5>
    3aac:	00 c0       	rjmp	.+0      	; 0x3aae <__stack+0x18af>
    3aae:	00 00       	nop
				_delay_ms(50);
				stop();
    3ab0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3ab4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    3ab8:	88 e0       	ldi	r24, 0x08	; 8
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3ac0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the middle box
				servo_2(135);
    3ac4:	87 e8       	ldi	r24, 0x87	; 135
    3ac6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3aca:	8f ef       	ldi	r24, 0xFF	; 255
    3acc:	9f ef       	ldi	r25, 0xFF	; 255
    3ace:	ac e2       	ldi	r26, 0x2C	; 44
    3ad0:	81 50       	subi	r24, 0x01	; 1
    3ad2:	90 40       	sbci	r25, 0x00	; 0
    3ad4:	a0 40       	sbci	r26, 0x00	; 0
    3ad6:	e1 f7       	brne	.-8      	; 0x3ad0 <__stack+0x18d1>
    3ad8:	00 c0       	rjmp	.+0      	; 0x3ada <__stack+0x18db>
    3ada:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3ae2:	8f ef       	ldi	r24, 0xFF	; 255
    3ae4:	9f ef       	ldi	r25, 0xFF	; 255
    3ae6:	ac e2       	ldi	r26, 0x2C	; 44
    3ae8:	81 50       	subi	r24, 0x01	; 1
    3aea:	90 40       	sbci	r25, 0x00	; 0
    3aec:	a0 40       	sbci	r26, 0x00	; 0
    3aee:	e1 f7       	brne	.-8      	; 0x3ae8 <__stack+0x18e9>
    3af0:	00 c0       	rjmp	.+0      	; 0x3af2 <__stack+0x18f3>
    3af2:	00 00       	nop
    3af4:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    3af6:	8c 2f       	mov	r24, r28
    3af8:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3afc:	8f ef       	ldi	r24, 0xFF	; 255
    3afe:	9f ef       	ldi	r25, 0xFF	; 255
    3b00:	ac e2       	ldi	r26, 0x2C	; 44
    3b02:	81 50       	subi	r24, 0x01	; 1
    3b04:	90 40       	sbci	r25, 0x00	; 0
    3b06:	a0 40       	sbci	r26, 0x00	; 0
    3b08:	e1 f7       	brne	.-8      	; 0x3b02 <__stack+0x1903>
    3b0a:	00 c0       	rjmp	.+0      	; 0x3b0c <__stack+0x190d>
    3b0c:	00 00       	nop
    3b0e:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the middle box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    3b10:	cd 32       	cpi	r28, 0x2D	; 45
    3b12:	89 f7       	brne	.-30     	; 0x3af6 <__stack+0x18f7>
    3b14:	8f ef       	ldi	r24, 0xFF	; 255
    3b16:	9f ef       	ldi	r25, 0xFF	; 255
    3b18:	ac e2       	ldi	r26, 0x2C	; 44
    3b1a:	81 50       	subi	r24, 0x01	; 1
    3b1c:	90 40       	sbci	r25, 0x00	; 0
    3b1e:	a0 40       	sbci	r26, 0x00	; 0
    3b20:	e1 f7       	brne	.-8      	; 0x3b1a <__stack+0x191b>
    3b22:	00 c0       	rjmp	.+0      	; 0x3b24 <__stack+0x1925>
    3b24:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    3b26:	82 e7       	ldi	r24, 0x72	; 114
    3b28:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    3b2c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3b30:	86 e9       	ldi	r24, 0x96	; 150
    3b32:	66 e9       	ldi	r22, 0x96	; 150
    3b34:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3b38:	8f ef       	ldi	r24, 0xFF	; 255
    3b3a:	9f e3       	ldi	r25, 0x3F	; 63
    3b3c:	a2 e0       	ldi	r26, 0x02	; 2
    3b3e:	81 50       	subi	r24, 0x01	; 1
    3b40:	90 40       	sbci	r25, 0x00	; 0
    3b42:	a0 40       	sbci	r26, 0x00	; 0
    3b44:	e1 f7       	brne	.-8      	; 0x3b3e <__stack+0x193f>
    3b46:	00 c0       	rjmp	.+0      	; 0x3b48 <__stack+0x1949>
    3b48:	00 00       	nop
				_delay_ms(50);
				stop();
    3b4a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    3b4e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3b52:	86 e9       	ldi	r24, 0x96	; 150
    3b54:	66 e9       	ldi	r22, 0x96	; 150
    3b56:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3b5a:	8f ef       	ldi	r24, 0xFF	; 255
    3b5c:	9f e3       	ldi	r25, 0x3F	; 63
    3b5e:	a2 e0       	ldi	r26, 0x02	; 2
    3b60:	81 50       	subi	r24, 0x01	; 1
    3b62:	90 40       	sbci	r25, 0x00	; 0
    3b64:	a0 40       	sbci	r26, 0x00	; 0
    3b66:	e1 f7       	brne	.-8      	; 0x3b60 <__stack+0x1961>
    3b68:	00 c0       	rjmp	.+0      	; 0x3b6a <__stack+0x196b>
    3b6a:	00 00       	nop
				_delay_ms(50);
				stop();
    3b6c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3b70:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge second time
				forward_mm(24);
    3b74:	88 e1       	ldi	r24, 0x18	; 24
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    3b7c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//DROP THE COLOR BOX AT B
				drop_the_block();
    3b80:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_right();
    3b84:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    3b88:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    3b8c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    3b90:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from B
				servo_2(155);
    3b94:	8b e9       	ldi	r24, 0x9B	; 155
    3b96:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3b9a:	8f ef       	ldi	r24, 0xFF	; 255
    3b9c:	9f ef       	ldi	r25, 0xFF	; 255
    3b9e:	ac e2       	ldi	r26, 0x2C	; 44
    3ba0:	81 50       	subi	r24, 0x01	; 1
    3ba2:	90 40       	sbci	r25, 0x00	; 0
    3ba4:	a0 40       	sbci	r26, 0x00	; 0
    3ba6:	e1 f7       	brne	.-8      	; 0x3ba0 <__stack+0x19a1>
    3ba8:	00 c0       	rjmp	.+0      	; 0x3baa <__stack+0x19ab>
    3baa:	00 00       	nop
    3bac:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3bae:	8c 2f       	mov	r24, r28
    3bb0:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3bb4:	8f ef       	ldi	r24, 0xFF	; 255
    3bb6:	9f ef       	ldi	r25, 0xFF	; 255
    3bb8:	a8 e0       	ldi	r26, 0x08	; 8
    3bba:	81 50       	subi	r24, 0x01	; 1
    3bbc:	90 40       	sbci	r25, 0x00	; 0
    3bbe:	a0 40       	sbci	r26, 0x00	; 0
    3bc0:	e1 f7       	brne	.-8      	; 0x3bba <__stack+0x19bb>
    3bc2:	00 c0       	rjmp	.+0      	; 0x3bc4 <__stack+0x19c5>
    3bc4:	00 00       	nop
    3bc6:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_right();
				blackline();
				// pick the weight box from B
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3bc8:	c8 33       	cpi	r28, 0x38	; 56
    3bca:	89 f7       	brne	.-30     	; 0x3bae <__stack+0x19af>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3bcc:	83 e8       	ldi	r24, 0x83	; 131
    3bce:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3bd2:	8f ef       	ldi	r24, 0xFF	; 255
    3bd4:	9f ef       	ldi	r25, 0xFF	; 255
    3bd6:	a9 e5       	ldi	r26, 0x59	; 89
    3bd8:	81 50       	subi	r24, 0x01	; 1
    3bda:	90 40       	sbci	r25, 0x00	; 0
    3bdc:	a0 40       	sbci	r26, 0x00	; 0
    3bde:	e1 f7       	brne	.-8      	; 0x3bd8 <__stack+0x19d9>
    3be0:	00 c0       	rjmp	.+0      	; 0x3be2 <__stack+0x19e3>
    3be2:	00 00       	nop
				_delay_ms(2000);
				rotation_using_blackline_left();
    3be4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3be8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    3bec:	88 e1       	ldi	r24, 0x18	; 24
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    3bf4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    3bf8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// drop the box in container
				drop_the_block();
    3bfc:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_left();
    3c00:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3c04:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// PICK THE WEIGHT BOX FROM W3
				servo_2(155);
    3c08:	8b e9       	ldi	r24, 0x9B	; 155
    3c0a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3c0e:	8f ef       	ldi	r24, 0xFF	; 255
    3c10:	9f ef       	ldi	r25, 0xFF	; 255
    3c12:	ac e2       	ldi	r26, 0x2C	; 44
    3c14:	81 50       	subi	r24, 0x01	; 1
    3c16:	90 40       	sbci	r25, 0x00	; 0
    3c18:	a0 40       	sbci	r26, 0x00	; 0
    3c1a:	e1 f7       	brne	.-8      	; 0x3c14 <__stack+0x1a15>
    3c1c:	00 c0       	rjmp	.+0      	; 0x3c1e <__stack+0x1a1f>
    3c1e:	00 00       	nop
    3c20:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3c22:	8c 2f       	mov	r24, r28
    3c24:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3c28:	8f ef       	ldi	r24, 0xFF	; 255
    3c2a:	9f ef       	ldi	r25, 0xFF	; 255
    3c2c:	a8 e0       	ldi	r26, 0x08	; 8
    3c2e:	81 50       	subi	r24, 0x01	; 1
    3c30:	90 40       	sbci	r25, 0x00	; 0
    3c32:	a0 40       	sbci	r26, 0x00	; 0
    3c34:	e1 f7       	brne	.-8      	; 0x3c2e <__stack+0x1a2f>
    3c36:	00 c0       	rjmp	.+0      	; 0x3c38 <__stack+0x1a39>
    3c38:	00 00       	nop
    3c3a:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// PICK THE WEIGHT BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3c3c:	c8 33       	cpi	r28, 0x38	; 56
    3c3e:	89 f7       	brne	.-30     	; 0x3c22 <__stack+0x1a23>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3c40:	83 e8       	ldi	r24, 0x83	; 131
    3c42:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3c46:	8f ef       	ldi	r24, 0xFF	; 255
    3c48:	9f ef       	ldi	r25, 0xFF	; 255
    3c4a:	a9 e5       	ldi	r26, 0x59	; 89
    3c4c:	81 50       	subi	r24, 0x01	; 1
    3c4e:	90 40       	sbci	r25, 0x00	; 0
    3c50:	a0 40       	sbci	r26, 0x00	; 0
    3c52:	e1 f7       	brne	.-8      	; 0x3c4c <__stack+0x1a4d>
    3c54:	00 c0       	rjmp	.+0      	; 0x3c56 <__stack+0x1a57>
    3c56:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);//
    3c58:	88 e1       	ldi	r24, 0x18	; 24
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3c60:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3c64:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    3c68:	88 e1       	ldi	r24, 0x18	; 24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3c70:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				// drop the weight box in container
				drop_the_block();
    3c74:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>

				forward_mm(24);//
    3c78:	88 e1       	ldi	r24, 0x18	; 24
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3c80:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    3c84:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);///
    3c88:	87 e1       	ldi	r24, 0x17	; 23
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left();
    3c90:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    3c94:	8e eb       	ldi	r24, 0xBE	; 190
    3c96:	64 eb       	ldi	r22, 0xB4	; 180
    3c98:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    3c9c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3ca0:	8f ef       	ldi	r24, 0xFF	; 255
    3ca2:	9f ef       	ldi	r25, 0xFF	; 255
    3ca4:	ac e2       	ldi	r26, 0x2C	; 44
    3ca6:	81 50       	subi	r24, 0x01	; 1
    3ca8:	90 40       	sbci	r25, 0x00	; 0
    3caa:	a0 40       	sbci	r26, 0x00	; 0
    3cac:	e1 f7       	brne	.-8      	; 0x3ca6 <__stack+0x1aa7>
    3cae:	00 c0       	rjmp	.+0      	; 0x3cb0 <__stack+0x1ab1>
    3cb0:	00 00       	nop
				_delay_ms(1000);
				blackline();
    3cb2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// NOW WE ARE IN CITY 1
				turn_left();
    3cb6:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    3cba:	86 e9       	ldi	r24, 0x96	; 150
    3cbc:	66 e9       	ldi	r22, 0x96	; 150
    3cbe:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3cc2:	8f ef       	ldi	r24, 0xFF	; 255
    3cc4:	9f e3       	ldi	r25, 0x3F	; 63
    3cc6:	a2 e0       	ldi	r26, 0x02	; 2
    3cc8:	81 50       	subi	r24, 0x01	; 1
    3cca:	90 40       	sbci	r25, 0x00	; 0
    3ccc:	a0 40       	sbci	r26, 0x00	; 0
    3cce:	e1 f7       	brne	.-8      	; 0x3cc8 <__stack+0x1ac9>
    3cd0:	00 c0       	rjmp	.+0      	; 0x3cd2 <__stack+0x1ad3>
    3cd2:	00 00       	nop
				_delay_ms(50);
				stop();
    3cd4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3cd8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    3cdc:	8e eb       	ldi	r24, 0xBE	; 190
    3cde:	64 eb       	ldi	r22, 0xB4	; 180
    3ce0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    3ce4:	81 e7       	ldi	r24, 0x71	; 113
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    3cec:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3cf0:	8f ef       	ldi	r24, 0xFF	; 255
    3cf2:	9f ef       	ldi	r25, 0xFF	; 255
    3cf4:	ac e2       	ldi	r26, 0x2C	; 44
    3cf6:	81 50       	subi	r24, 0x01	; 1
    3cf8:	90 40       	sbci	r25, 0x00	; 0
    3cfa:	a0 40       	sbci	r26, 0x00	; 0
    3cfc:	e1 f7       	brne	.-8      	; 0x3cf6 <__stack+0x1af7>
    3cfe:	00 c0       	rjmp	.+0      	; 0x3d00 <__stack+0x1b01>
    3d00:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    3d02:	8e eb       	ldi	r24, 0xBE	; 190
    3d04:	64 eb       	ldi	r22, 0xB4	; 180
    3d06:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    3d0a:	88 e5       	ldi	r24, 0x58	; 88
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    3d12:	8e eb       	ldi	r24, 0xBE	; 190
    3d14:	64 eb       	ldi	r22, 0xB4	; 180
    3d16:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    3d1a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3d1e:	8f ef       	ldi	r24, 0xFF	; 255
    3d20:	9f e7       	ldi	r25, 0x7F	; 127
    3d22:	a6 e1       	ldi	r26, 0x16	; 22
    3d24:	81 50       	subi	r24, 0x01	; 1
    3d26:	90 40       	sbci	r25, 0x00	; 0
    3d28:	a0 40       	sbci	r26, 0x00	; 0
    3d2a:	e1 f7       	brne	.-8      	; 0x3d24 <__stack+0x1b25>
    3d2c:	00 c0       	rjmp	.+0      	; 0x3d2e <__stack+0x1b2f>
    3d2e:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    3d30:	86 eb       	ldi	r24, 0xB6	; 182
    3d32:	64 eb       	ldi	r22, 0xB4	; 180
    3d34:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    3d38:	83 e5       	ldi	r24, 0x53	; 83
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    3d40:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3d44:	8f ef       	ldi	r24, 0xFF	; 255
    3d46:	9f e7       	ldi	r25, 0x7F	; 127
    3d48:	a6 e1       	ldi	r26, 0x16	; 22
    3d4a:	81 50       	subi	r24, 0x01	; 1
    3d4c:	90 40       	sbci	r25, 0x00	; 0
    3d4e:	a0 40       	sbci	r26, 0x00	; 0
    3d50:	e1 f7       	brne	.-8      	; 0x3d4a <__stack+0x1b4b>
    3d52:	00 c0       	rjmp	.+0      	; 0x3d54 <__stack+0x1b55>
    3d54:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    3d56:	8b e9       	ldi	r24, 0x9B	; 155
    3d58:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3d5c:	8f ef       	ldi	r24, 0xFF	; 255
    3d5e:	9f ef       	ldi	r25, 0xFF	; 255
    3d60:	ac e2       	ldi	r26, 0x2C	; 44
    3d62:	81 50       	subi	r24, 0x01	; 1
    3d64:	90 40       	sbci	r25, 0x00	; 0
    3d66:	a0 40       	sbci	r26, 0x00	; 0
    3d68:	e1 f7       	brne	.-8      	; 0x3d62 <__stack+0x1b63>
    3d6a:	00 c0       	rjmp	.+0      	; 0x3d6c <__stack+0x1b6d>
    3d6c:	00 00       	nop
    3d6e:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3d70:	8c 2f       	mov	r24, r28
    3d72:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3d76:	8f ef       	ldi	r24, 0xFF	; 255
    3d78:	9f ef       	ldi	r25, 0xFF	; 255
    3d7a:	a8 e0       	ldi	r26, 0x08	; 8
    3d7c:	81 50       	subi	r24, 0x01	; 1
    3d7e:	90 40       	sbci	r25, 0x00	; 0
    3d80:	a0 40       	sbci	r26, 0x00	; 0
    3d82:	e1 f7       	brne	.-8      	; 0x3d7c <__stack+0x1b7d>
    3d84:	00 c0       	rjmp	.+0      	; 0x3d86 <__stack+0x1b87>
    3d86:	00 00       	nop
    3d88:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3d8a:	c8 33       	cpi	r28, 0x38	; 56
    3d8c:	89 f7       	brne	.-30     	; 0x3d70 <__stack+0x1b71>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3d8e:	83 e8       	ldi	r24, 0x83	; 131
    3d90:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3d94:	8f ef       	ldi	r24, 0xFF	; 255
    3d96:	9f ef       	ldi	r25, 0xFF	; 255
    3d98:	a9 e5       	ldi	r26, 0x59	; 89
    3d9a:	81 50       	subi	r24, 0x01	; 1
    3d9c:	90 40       	sbci	r25, 0x00	; 0
    3d9e:	a0 40       	sbci	r26, 0x00	; 0
    3da0:	e1 f7       	brne	.-8      	; 0x3d9a <__stack+0x1b9b>
    3da2:	00 c0       	rjmp	.+0      	; 0x3da4 <__stack+0x1ba5>
    3da4:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    3da6:	88 e1       	ldi	r24, 0x18	; 24
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3dae:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3db2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    3db6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3dba:	8f ef       	ldi	r24, 0xFF	; 255
    3dbc:	9f e7       	ldi	r25, 0x7F	; 127
    3dbe:	a6 e1       	ldi	r26, 0x16	; 22
    3dc0:	81 50       	subi	r24, 0x01	; 1
    3dc2:	90 40       	sbci	r25, 0x00	; 0
    3dc4:	a0 40       	sbci	r26, 0x00	; 0
    3dc6:	e1 f7       	brne	.-8      	; 0x3dc0 <__stack+0x1bc1>
    3dc8:	00 c0       	rjmp	.+0      	; 0x3dca <__stack+0x1bcb>
    3dca:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    3dcc:	86 e9       	ldi	r24, 0x96	; 150
    3dce:	66 e9       	ldi	r22, 0x96	; 150
    3dd0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    3dd4:	87 e2       	ldi	r24, 0x27	; 39
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    3ddc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    3de0:	83 e0       	ldi	r24, 0x03	; 3
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3de8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE BOX IN CONTAINER
				drop_the_block();
    3dec:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    3df0:	88 e1       	ldi	r24, 0x18	; 24
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3df8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3dfc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    3e00:	8b e9       	ldi	r24, 0x9B	; 155
    3e02:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3e06:	8f ef       	ldi	r24, 0xFF	; 255
    3e08:	9f ef       	ldi	r25, 0xFF	; 255
    3e0a:	ac e2       	ldi	r26, 0x2C	; 44
    3e0c:	81 50       	subi	r24, 0x01	; 1
    3e0e:	90 40       	sbci	r25, 0x00	; 0
    3e10:	a0 40       	sbci	r26, 0x00	; 0
    3e12:	e1 f7       	brne	.-8      	; 0x3e0c <__stack+0x1c0d>
    3e14:	00 c0       	rjmp	.+0      	; 0x3e16 <__stack+0x1c17>
    3e16:	00 00       	nop
    3e18:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    3e1a:	8c 2f       	mov	r24, r28
    3e1c:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3e20:	8f ef       	ldi	r24, 0xFF	; 255
    3e22:	9f ef       	ldi	r25, 0xFF	; 255
    3e24:	a8 e0       	ldi	r26, 0x08	; 8
    3e26:	81 50       	subi	r24, 0x01	; 1
    3e28:	90 40       	sbci	r25, 0x00	; 0
    3e2a:	a0 40       	sbci	r26, 0x00	; 0
    3e2c:	e1 f7       	brne	.-8      	; 0x3e26 <__stack+0x1c27>
    3e2e:	00 c0       	rjmp	.+0      	; 0x3e30 <__stack+0x1c31>
    3e30:	00 00       	nop
    3e32:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3e34:	c8 33       	cpi	r28, 0x38	; 56
    3e36:	89 f7       	brne	.-30     	; 0x3e1a <__stack+0x1c1b>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3e38:	83 e8       	ldi	r24, 0x83	; 131
    3e3a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3e3e:	8f ef       	ldi	r24, 0xFF	; 255
    3e40:	9f ef       	ldi	r25, 0xFF	; 255
    3e42:	a9 e5       	ldi	r26, 0x59	; 89
    3e44:	81 50       	subi	r24, 0x01	; 1
    3e46:	90 40       	sbci	r25, 0x00	; 0
    3e48:	a0 40       	sbci	r26, 0x00	; 0
    3e4a:	e1 f7       	brne	.-8      	; 0x3e44 <__stack+0x1c45>
    3e4c:	00 c0       	rjmp	.+0      	; 0x3e4e <__stack+0x1c4f>
    3e4e:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    3e50:	88 e1       	ldi	r24, 0x18	; 24
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3e58:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3e5c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    3e60:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    3e64:	88 e1       	ldi	r24, 0x18	; 24
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    3e6c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3e70:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    3e74:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3e78:	86 e9       	ldi	r24, 0x96	; 150
    3e7a:	66 e9       	ldi	r22, 0x96	; 150
    3e7c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	9f e3       	ldi	r25, 0x3F	; 63
    3e84:	a2 e0       	ldi	r26, 0x02	; 2
    3e86:	81 50       	subi	r24, 0x01	; 1
    3e88:	90 40       	sbci	r25, 0x00	; 0
    3e8a:	a0 40       	sbci	r26, 0x00	; 0
    3e8c:	e1 f7       	brne	.-8      	; 0x3e86 <__stack+0x1c87>
    3e8e:	00 c0       	rjmp	.+0      	; 0x3e90 <__stack+0x1c91>
    3e90:	00 00       	nop
				_delay_ms(50);
				stop();
    3e92:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3e96:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    3e9a:	88 e0       	ldi	r24, 0x08	; 8
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3ea2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the bottom box
				servo_2(135);
    3ea6:	87 e8       	ldi	r24, 0x87	; 135
    3ea8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3eac:	8f ef       	ldi	r24, 0xFF	; 255
    3eae:	9f ef       	ldi	r25, 0xFF	; 255
    3eb0:	ac e2       	ldi	r26, 0x2C	; 44
    3eb2:	81 50       	subi	r24, 0x01	; 1
    3eb4:	90 40       	sbci	r25, 0x00	; 0
    3eb6:	a0 40       	sbci	r26, 0x00	; 0
    3eb8:	e1 f7       	brne	.-8      	; 0x3eb2 <__stack+0x1cb3>
    3eba:	00 c0       	rjmp	.+0      	; 0x3ebc <__stack+0x1cbd>
    3ebc:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    3ec4:	8f ef       	ldi	r24, 0xFF	; 255
    3ec6:	9f ef       	ldi	r25, 0xFF	; 255
    3ec8:	ac e2       	ldi	r26, 0x2C	; 44
    3eca:	81 50       	subi	r24, 0x01	; 1
    3ecc:	90 40       	sbci	r25, 0x00	; 0
    3ece:	a0 40       	sbci	r26, 0x00	; 0
    3ed0:	e1 f7       	brne	.-8      	; 0x3eca <__stack+0x1ccb>
    3ed2:	00 c0       	rjmp	.+0      	; 0x3ed4 <__stack+0x1cd5>
    3ed4:	00 00       	nop
    3ed6:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    3ed8:	8c 2f       	mov	r24, r28
    3eda:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3ede:	8f ef       	ldi	r24, 0xFF	; 255
    3ee0:	9f ef       	ldi	r25, 0xFF	; 255
    3ee2:	ac e2       	ldi	r26, 0x2C	; 44
    3ee4:	81 50       	subi	r24, 0x01	; 1
    3ee6:	90 40       	sbci	r25, 0x00	; 0
    3ee8:	a0 40       	sbci	r26, 0x00	; 0
    3eea:	e1 f7       	brne	.-8      	; 0x3ee4 <__stack+0x1ce5>
    3eec:	00 c0       	rjmp	.+0      	; 0x3eee <__stack+0x1cef>
    3eee:	00 00       	nop
    3ef0:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the bottom box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    3ef2:	cd 32       	cpi	r28, 0x2D	; 45
    3ef4:	89 f7       	brne	.-30     	; 0x3ed8 <__stack+0x1cd9>
    3ef6:	8f ef       	ldi	r24, 0xFF	; 255
    3ef8:	9f ef       	ldi	r25, 0xFF	; 255
    3efa:	ac e2       	ldi	r26, 0x2C	; 44
    3efc:	81 50       	subi	r24, 0x01	; 1
    3efe:	90 40       	sbci	r25, 0x00	; 0
    3f00:	a0 40       	sbci	r26, 0x00	; 0
    3f02:	e1 f7       	brne	.-8      	; 0x3efc <__stack+0x1cfd>
    3f04:	00 c0       	rjmp	.+0      	; 0x3f06 <__stack+0x1d07>
    3f06:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    3f08:	82 e7       	ldi	r24, 0x72	; 114
    3f0a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    3f0e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3f12:	86 e9       	ldi	r24, 0x96	; 150
    3f14:	66 e9       	ldi	r22, 0x96	; 150
    3f16:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3f1a:	8f ef       	ldi	r24, 0xFF	; 255
    3f1c:	9f e3       	ldi	r25, 0x3F	; 63
    3f1e:	a2 e0       	ldi	r26, 0x02	; 2
    3f20:	81 50       	subi	r24, 0x01	; 1
    3f22:	90 40       	sbci	r25, 0x00	; 0
    3f24:	a0 40       	sbci	r26, 0x00	; 0
    3f26:	e1 f7       	brne	.-8      	; 0x3f20 <__stack+0x1d21>
    3f28:	00 c0       	rjmp	.+0      	; 0x3f2a <__stack+0x1d2b>
    3f2a:	00 00       	nop
				_delay_ms(50);
				stop();
    3f2c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    3f30:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    3f34:	86 e9       	ldi	r24, 0x96	; 150
    3f36:	66 e9       	ldi	r22, 0x96	; 150
    3f38:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    3f3c:	8f ef       	ldi	r24, 0xFF	; 255
    3f3e:	9f e3       	ldi	r25, 0x3F	; 63
    3f40:	a2 e0       	ldi	r26, 0x02	; 2
    3f42:	81 50       	subi	r24, 0x01	; 1
    3f44:	90 40       	sbci	r25, 0x00	; 0
    3f46:	a0 40       	sbci	r26, 0x00	; 0
    3f48:	e1 f7       	brne	.-8      	; 0x3f42 <__stack+0x1d43>
    3f4a:	00 c0       	rjmp	.+0      	; 0x3f4c <__stack+0x1d4d>
    3f4c:	00 00       	nop
				_delay_ms(50);
				stop();
    3f4e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    3f52:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge last time
				// we are in city 2
				rotation_using_blackline_left();
    3f56:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    3f5a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(100);
    3f5e:	84 e6       	ldi	r24, 0x64	; 100
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3f66:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    3f6a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// drop the color box at C
				drop_the_block();
    3f6e:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				
			}
			////////////////////////////////////////////////////////////////////////////////////////
			if(top_HZ_waste_block_color==flag2_color)//WHICH MEANS TOP AT B ,BOTTOM AT C WHICH MEANS MID AT FLAG A
    3f72:	90 91 10 02 	lds	r25, 0x0210
    3f76:	80 91 34 02 	lds	r24, 0x0234
    3f7a:	98 17       	cp	r25, r24
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <__stack+0x1d81>
    3f7e:	ed c3       	rjmp	.+2010   	; 0x475a <__stack+0x255b>
			{
				
				rotation_using_blackline_right();
    3f80:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				//DROP THE BOX AT B
				forward_mm(35);//
    3f84:	83 e2       	ldi	r24, 0x23	; 35
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    3f8c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    3f90:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(22);
    3f94:	86 e1       	ldi	r24, 0x16	; 22
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_right();
    3f9c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(190,180);
    3fa0:	8e eb       	ldi	r24, 0xBE	; 190
    3fa2:	64 eb       	ldi	r22, 0xB4	; 180
    3fa4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    3fa8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    3fac:	8f ef       	ldi	r24, 0xFF	; 255
    3fae:	9f ef       	ldi	r25, 0xFF	; 255
    3fb0:	ac e2       	ldi	r26, 0x2C	; 44
    3fb2:	81 50       	subi	r24, 0x01	; 1
    3fb4:	90 40       	sbci	r25, 0x00	; 0
    3fb6:	a0 40       	sbci	r26, 0x00	; 0
    3fb8:	e1 f7       	brne	.-8      	; 0x3fb2 <__stack+0x1db3>
    3fba:	00 c0       	rjmp	.+0      	; 0x3fbc <__stack+0x1dbd>
    3fbc:	00 00       	nop
				_delay_ms(1000);
				blackline();
    3fbe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				/// pick the weight from W5
				servo_2(155);
    3fc2:	8b e9       	ldi	r24, 0x9B	; 155
    3fc4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    3fc8:	8f ef       	ldi	r24, 0xFF	; 255
    3fca:	9f ef       	ldi	r25, 0xFF	; 255
    3fcc:	ac e2       	ldi	r26, 0x2C	; 44
    3fce:	81 50       	subi	r24, 0x01	; 1
    3fd0:	90 40       	sbci	r25, 0x00	; 0
    3fd2:	a0 40       	sbci	r26, 0x00	; 0
    3fd4:	e1 f7       	brne	.-8      	; 0x3fce <__stack+0x1dcf>
    3fd6:	00 c0       	rjmp	.+0      	; 0x3fd8 <__stack+0x1dd9>
    3fd8:	00 00       	nop
    3fda:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{
					servo_1(i);
    3fdc:	8c 2f       	mov	r24, r28
    3fde:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    3fe2:	8f ef       	ldi	r24, 0xFF	; 255
    3fe4:	9f ef       	ldi	r25, 0xFF	; 255
    3fe6:	a8 e0       	ldi	r26, 0x08	; 8
    3fe8:	81 50       	subi	r24, 0x01	; 1
    3fea:	90 40       	sbci	r25, 0x00	; 0
    3fec:	a0 40       	sbci	r26, 0x00	; 0
    3fee:	e1 f7       	brne	.-8      	; 0x3fe8 <__stack+0x1de9>
    3ff0:	00 c0       	rjmp	.+0      	; 0x3ff2 <__stack+0x1df3>
    3ff2:	00 00       	nop
    3ff4:	ce 5f       	subi	r28, 0xFE	; 254
				_delay_ms(1000);
				blackline();
				/// pick the weight from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    3ff6:	c8 33       	cpi	r28, 0x38	; 56
    3ff8:	89 f7       	brne	.-30     	; 0x3fdc <__stack+0x1ddd>
				{
					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    3ffa:	83 e8       	ldi	r24, 0x83	; 131
    3ffc:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4000:	8f ef       	ldi	r24, 0xFF	; 255
    4002:	9f ef       	ldi	r25, 0xFF	; 255
    4004:	a9 e5       	ldi	r26, 0x59	; 89
    4006:	81 50       	subi	r24, 0x01	; 1
    4008:	90 40       	sbci	r25, 0x00	; 0
    400a:	a0 40       	sbci	r26, 0x00	; 0
    400c:	e1 f7       	brne	.-8      	; 0x4006 <__stack+0x1e07>
    400e:	00 c0       	rjmp	.+0      	; 0x4010 <__stack+0x1e11>
    4010:	00 00       	nop
				_delay_ms(2000);
				rotation_using_blackline_left();
    4012:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4016:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);//
    401a:	87 e1       	ldi	r24, 0x17	; 23
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				velocity(190,180);
    4022:	8e eb       	ldi	r24, 0xBE	; 190
    4024:	64 eb       	ldi	r22, 0xB4	; 180
    4026:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    402a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    402e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    4032:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				/// drop the weight box in container
				drop_the_block();
    4036:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    403a:	88 e1       	ldi	r24, 0x18	; 24
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    4042:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    4046:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);///
    404a:	87 e1       	ldi	r24, 0x17	; 23
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left();
    4052:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    4056:	8e eb       	ldi	r24, 0xBE	; 190
    4058:	64 eb       	ldi	r22, 0xB4	; 180
    405a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    405e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4062:	8f ef       	ldi	r24, 0xFF	; 255
    4064:	9f ef       	ldi	r25, 0xFF	; 255
    4066:	ac e2       	ldi	r26, 0x2C	; 44
    4068:	81 50       	subi	r24, 0x01	; 1
    406a:	90 40       	sbci	r25, 0x00	; 0
    406c:	a0 40       	sbci	r26, 0x00	; 0
    406e:	e1 f7       	brne	.-8      	; 0x4068 <__stack+0x1e69>
    4070:	00 c0       	rjmp	.+0      	; 0x4072 <__stack+0x1e73>
    4072:	00 00       	nop
				_delay_ms(1000);
				blackline();
    4074:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// Now we are in CITY 1
				turn_left();
    4078:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    407c:	86 e9       	ldi	r24, 0x96	; 150
    407e:	66 e9       	ldi	r22, 0x96	; 150
    4080:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4084:	8f ef       	ldi	r24, 0xFF	; 255
    4086:	9f e3       	ldi	r25, 0x3F	; 63
    4088:	a2 e0       	ldi	r26, 0x02	; 2
    408a:	81 50       	subi	r24, 0x01	; 1
    408c:	90 40       	sbci	r25, 0x00	; 0
    408e:	a0 40       	sbci	r26, 0x00	; 0
    4090:	e1 f7       	brne	.-8      	; 0x408a <__stack+0x1e8b>
    4092:	00 c0       	rjmp	.+0      	; 0x4094 <__stack+0x1e95>
    4094:	00 00       	nop
				_delay_ms(50);
				stop();
    4096:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    409a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    409e:	8e eb       	ldi	r24, 0xBE	; 190
    40a0:	64 eb       	ldi	r22, 0xB4	; 180
    40a2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    40a6:	81 e7       	ldi	r24, 0x71	; 113
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    40ae:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    40b2:	8f ef       	ldi	r24, 0xFF	; 255
    40b4:	9f ef       	ldi	r25, 0xFF	; 255
    40b6:	ac e2       	ldi	r26, 0x2C	; 44
    40b8:	81 50       	subi	r24, 0x01	; 1
    40ba:	90 40       	sbci	r25, 0x00	; 0
    40bc:	a0 40       	sbci	r26, 0x00	; 0
    40be:	e1 f7       	brne	.-8      	; 0x40b8 <__stack+0x1eb9>
    40c0:	00 c0       	rjmp	.+0      	; 0x40c2 <__stack+0x1ec3>
    40c2:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    40c4:	8e eb       	ldi	r24, 0xBE	; 190
    40c6:	64 eb       	ldi	r22, 0xB4	; 180
    40c8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    40cc:	88 e5       	ldi	r24, 0x58	; 88
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    40d4:	8e eb       	ldi	r24, 0xBE	; 190
    40d6:	64 eb       	ldi	r22, 0xB4	; 180
    40d8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    40dc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    40e0:	8f ef       	ldi	r24, 0xFF	; 255
    40e2:	9f e7       	ldi	r25, 0x7F	; 127
    40e4:	a6 e1       	ldi	r26, 0x16	; 22
    40e6:	81 50       	subi	r24, 0x01	; 1
    40e8:	90 40       	sbci	r25, 0x00	; 0
    40ea:	a0 40       	sbci	r26, 0x00	; 0
    40ec:	e1 f7       	brne	.-8      	; 0x40e6 <__stack+0x1ee7>
    40ee:	00 c0       	rjmp	.+0      	; 0x40f0 <__stack+0x1ef1>
    40f0:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    40f2:	86 eb       	ldi	r24, 0xB6	; 182
    40f4:	64 eb       	ldi	r22, 0xB4	; 180
    40f6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    40fa:	83 e5       	ldi	r24, 0x53	; 83
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    4102:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4106:	8f ef       	ldi	r24, 0xFF	; 255
    4108:	9f e7       	ldi	r25, 0x7F	; 127
    410a:	a6 e1       	ldi	r26, 0x16	; 22
    410c:	81 50       	subi	r24, 0x01	; 1
    410e:	90 40       	sbci	r25, 0x00	; 0
    4110:	a0 40       	sbci	r26, 0x00	; 0
    4112:	e1 f7       	brne	.-8      	; 0x410c <__stack+0x1f0d>
    4114:	00 c0       	rjmp	.+0      	; 0x4116 <__stack+0x1f17>
    4116:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    4118:	8b e9       	ldi	r24, 0x9B	; 155
    411a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    411e:	8f ef       	ldi	r24, 0xFF	; 255
    4120:	9f ef       	ldi	r25, 0xFF	; 255
    4122:	ac e2       	ldi	r26, 0x2C	; 44
    4124:	81 50       	subi	r24, 0x01	; 1
    4126:	90 40       	sbci	r25, 0x00	; 0
    4128:	a0 40       	sbci	r26, 0x00	; 0
    412a:	e1 f7       	brne	.-8      	; 0x4124 <__stack+0x1f25>
    412c:	00 c0       	rjmp	.+0      	; 0x412e <__stack+0x1f2f>
    412e:	00 00       	nop
    4130:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    4132:	8c 2f       	mov	r24, r28
    4134:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    4138:	8f ef       	ldi	r24, 0xFF	; 255
    413a:	9f ef       	ldi	r25, 0xFF	; 255
    413c:	a8 e0       	ldi	r26, 0x08	; 8
    413e:	81 50       	subi	r24, 0x01	; 1
    4140:	90 40       	sbci	r25, 0x00	; 0
    4142:	a0 40       	sbci	r26, 0x00	; 0
    4144:	e1 f7       	brne	.-8      	; 0x413e <__stack+0x1f3f>
    4146:	00 c0       	rjmp	.+0      	; 0x4148 <__stack+0x1f49>
    4148:	00 00       	nop
    414a:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    414c:	c8 33       	cpi	r28, 0x38	; 56
    414e:	89 f7       	brne	.-30     	; 0x4132 <__stack+0x1f33>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    4150:	83 e8       	ldi	r24, 0x83	; 131
    4152:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4156:	8f ef       	ldi	r24, 0xFF	; 255
    4158:	9f ef       	ldi	r25, 0xFF	; 255
    415a:	a9 e5       	ldi	r26, 0x59	; 89
    415c:	81 50       	subi	r24, 0x01	; 1
    415e:	90 40       	sbci	r25, 0x00	; 0
    4160:	a0 40       	sbci	r26, 0x00	; 0
    4162:	e1 f7       	brne	.-8      	; 0x415c <__stack+0x1f5d>
    4164:	00 c0       	rjmp	.+0      	; 0x4166 <__stack+0x1f67>
    4166:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    4168:	88 e1       	ldi	r24, 0x18	; 24
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    4170:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4174:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    4178:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    417c:	8f ef       	ldi	r24, 0xFF	; 255
    417e:	9f e7       	ldi	r25, 0x7F	; 127
    4180:	a6 e1       	ldi	r26, 0x16	; 22
    4182:	81 50       	subi	r24, 0x01	; 1
    4184:	90 40       	sbci	r25, 0x00	; 0
    4186:	a0 40       	sbci	r26, 0x00	; 0
    4188:	e1 f7       	brne	.-8      	; 0x4182 <__stack+0x1f83>
    418a:	00 c0       	rjmp	.+0      	; 0x418c <__stack+0x1f8d>
    418c:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    418e:	86 e9       	ldi	r24, 0x96	; 150
    4190:	66 e9       	ldi	r22, 0x96	; 150
    4192:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    4196:	87 e2       	ldi	r24, 0x27	; 39
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    419e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    41a2:	83 e0       	ldi	r24, 0x03	; 3
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    41aa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE bOX IN CONTAINER OF CITY 1
				drop_the_block();
    41ae:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    41b2:	88 e1       	ldi	r24, 0x18	; 24
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    41ba:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    41be:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    41c2:	8b e9       	ldi	r24, 0x9B	; 155
    41c4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    41c8:	8f ef       	ldi	r24, 0xFF	; 255
    41ca:	9f ef       	ldi	r25, 0xFF	; 255
    41cc:	ac e2       	ldi	r26, 0x2C	; 44
    41ce:	81 50       	subi	r24, 0x01	; 1
    41d0:	90 40       	sbci	r25, 0x00	; 0
    41d2:	a0 40       	sbci	r26, 0x00	; 0
    41d4:	e1 f7       	brne	.-8      	; 0x41ce <__stack+0x1fcf>
    41d6:	00 c0       	rjmp	.+0      	; 0x41d8 <__stack+0x1fd9>
    41d8:	00 00       	nop
    41da:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    41dc:	8c 2f       	mov	r24, r28
    41de:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    41e2:	8f ef       	ldi	r24, 0xFF	; 255
    41e4:	9f ef       	ldi	r25, 0xFF	; 255
    41e6:	a8 e0       	ldi	r26, 0x08	; 8
    41e8:	81 50       	subi	r24, 0x01	; 1
    41ea:	90 40       	sbci	r25, 0x00	; 0
    41ec:	a0 40       	sbci	r26, 0x00	; 0
    41ee:	e1 f7       	brne	.-8      	; 0x41e8 <__stack+0x1fe9>
    41f0:	00 c0       	rjmp	.+0      	; 0x41f2 <__stack+0x1ff3>
    41f2:	00 00       	nop
    41f4:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    41f6:	c8 33       	cpi	r28, 0x38	; 56
    41f8:	89 f7       	brne	.-30     	; 0x41dc <__stack+0x1fdd>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    41fa:	83 e8       	ldi	r24, 0x83	; 131
    41fc:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4200:	8f ef       	ldi	r24, 0xFF	; 255
    4202:	9f ef       	ldi	r25, 0xFF	; 255
    4204:	a9 e5       	ldi	r26, 0x59	; 89
    4206:	81 50       	subi	r24, 0x01	; 1
    4208:	90 40       	sbci	r25, 0x00	; 0
    420a:	a0 40       	sbci	r26, 0x00	; 0
    420c:	e1 f7       	brne	.-8      	; 0x4206 <__stack+0x2007>
    420e:	00 c0       	rjmp	.+0      	; 0x4210 <__stack+0x2011>
    4210:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    4212:	88 e1       	ldi	r24, 0x18	; 24
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    421a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    421e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    4222:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    4226:	88 e1       	ldi	r24, 0x18	; 24
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    422e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4232:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    4236:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    423a:	86 e9       	ldi	r24, 0x96	; 150
    423c:	66 e9       	ldi	r22, 0x96	; 150
    423e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4242:	8f ef       	ldi	r24, 0xFF	; 255
    4244:	9f e3       	ldi	r25, 0x3F	; 63
    4246:	a2 e0       	ldi	r26, 0x02	; 2
    4248:	81 50       	subi	r24, 0x01	; 1
    424a:	90 40       	sbci	r25, 0x00	; 0
    424c:	a0 40       	sbci	r26, 0x00	; 0
    424e:	e1 f7       	brne	.-8      	; 0x4248 <__stack+0x2049>
    4250:	00 c0       	rjmp	.+0      	; 0x4252 <__stack+0x2053>
    4252:	00 00       	nop
				_delay_ms(50);
				stop();
    4254:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    4258:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    425c:	88 e0       	ldi	r24, 0x08	; 8
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    4264:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the middle box
				servo_2(135);
    4268:	87 e8       	ldi	r24, 0x87	; 135
    426a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    426e:	8f ef       	ldi	r24, 0xFF	; 255
    4270:	9f ef       	ldi	r25, 0xFF	; 255
    4272:	ac e2       	ldi	r26, 0x2C	; 44
    4274:	81 50       	subi	r24, 0x01	; 1
    4276:	90 40       	sbci	r25, 0x00	; 0
    4278:	a0 40       	sbci	r26, 0x00	; 0
    427a:	e1 f7       	brne	.-8      	; 0x4274 <__stack+0x2075>
    427c:	00 c0       	rjmp	.+0      	; 0x427e <__stack+0x207f>
    427e:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    4280:	80 e0       	ldi	r24, 0x00	; 0
    4282:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4286:	8f ef       	ldi	r24, 0xFF	; 255
    4288:	9f ef       	ldi	r25, 0xFF	; 255
    428a:	ac e2       	ldi	r26, 0x2C	; 44
    428c:	81 50       	subi	r24, 0x01	; 1
    428e:	90 40       	sbci	r25, 0x00	; 0
    4290:	a0 40       	sbci	r26, 0x00	; 0
    4292:	e1 f7       	brne	.-8      	; 0x428c <__stack+0x208d>
    4294:	00 c0       	rjmp	.+0      	; 0x4296 <__stack+0x2097>
    4296:	00 00       	nop
    4298:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    429a:	8c 2f       	mov	r24, r28
    429c:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    42a0:	8f ef       	ldi	r24, 0xFF	; 255
    42a2:	9f ef       	ldi	r25, 0xFF	; 255
    42a4:	ac e2       	ldi	r26, 0x2C	; 44
    42a6:	81 50       	subi	r24, 0x01	; 1
    42a8:	90 40       	sbci	r25, 0x00	; 0
    42aa:	a0 40       	sbci	r26, 0x00	; 0
    42ac:	e1 f7       	brne	.-8      	; 0x42a6 <__stack+0x20a7>
    42ae:	00 c0       	rjmp	.+0      	; 0x42b0 <__stack+0x20b1>
    42b0:	00 00       	nop
    42b2:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the middle box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    42b4:	cd 32       	cpi	r28, 0x2D	; 45
    42b6:	89 f7       	brne	.-30     	; 0x429a <__stack+0x209b>
    42b8:	8f ef       	ldi	r24, 0xFF	; 255
    42ba:	9f ef       	ldi	r25, 0xFF	; 255
    42bc:	ac e2       	ldi	r26, 0x2C	; 44
    42be:	81 50       	subi	r24, 0x01	; 1
    42c0:	90 40       	sbci	r25, 0x00	; 0
    42c2:	a0 40       	sbci	r26, 0x00	; 0
    42c4:	e1 f7       	brne	.-8      	; 0x42be <__stack+0x20bf>
    42c6:	00 c0       	rjmp	.+0      	; 0x42c8 <__stack+0x20c9>
    42c8:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    42ca:	82 e7       	ldi	r24, 0x72	; 114
    42cc:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    42d0:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    42d4:	86 e9       	ldi	r24, 0x96	; 150
    42d6:	66 e9       	ldi	r22, 0x96	; 150
    42d8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    42dc:	8f ef       	ldi	r24, 0xFF	; 255
    42de:	9f e3       	ldi	r25, 0x3F	; 63
    42e0:	a2 e0       	ldi	r26, 0x02	; 2
    42e2:	81 50       	subi	r24, 0x01	; 1
    42e4:	90 40       	sbci	r25, 0x00	; 0
    42e6:	a0 40       	sbci	r26, 0x00	; 0
    42e8:	e1 f7       	brne	.-8      	; 0x42e2 <__stack+0x20e3>
    42ea:	00 c0       	rjmp	.+0      	; 0x42ec <__stack+0x20ed>
    42ec:	00 00       	nop
				_delay_ms(50);
				stop();
    42ee:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    42f2:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    42f6:	86 e9       	ldi	r24, 0x96	; 150
    42f8:	66 e9       	ldi	r22, 0x96	; 150
    42fa:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    42fe:	8f ef       	ldi	r24, 0xFF	; 255
    4300:	9f e3       	ldi	r25, 0x3F	; 63
    4302:	a2 e0       	ldi	r26, 0x02	; 2
    4304:	81 50       	subi	r24, 0x01	; 1
    4306:	90 40       	sbci	r25, 0x00	; 0
    4308:	a0 40       	sbci	r26, 0x00	; 0
    430a:	e1 f7       	brne	.-8      	; 0x4304 <__stack+0x2105>
    430c:	00 c0       	rjmp	.+0      	; 0x430e <__stack+0x210f>
    430e:	00 00       	nop
				_delay_ms(50);
				stop();
    4310:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    4314:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge second time
				forward_mm(40);
    4318:	88 e2       	ldi	r24, 0x28	; 40
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
    4320:	8f ef       	ldi	r24, 0xFF	; 255
    4322:	9f ef       	ldi	r25, 0xFF	; 255
    4324:	ac e2       	ldi	r26, 0x2C	; 44
    4326:	81 50       	subi	r24, 0x01	; 1
    4328:	90 40       	sbci	r25, 0x00	; 0
    432a:	a0 40       	sbci	r26, 0x00	; 0
    432c:	e1 f7       	brne	.-8      	; 0x4326 <__stack+0x2127>
    432e:	00 c0       	rjmp	.+0      	; 0x4330 <__stack+0x2131>
    4330:	00 00       	nop
				_delay_ms(1000);
				rotation_using_blackline_right();
    4332:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    4336:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(112);
    433a:	80 e7       	ldi	r24, 0x70	; 112
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
    4342:	8f ef       	ldi	r24, 0xFF	; 255
    4344:	9f ef       	ldi	r25, 0xFF	; 255
    4346:	ac e2       	ldi	r26, 0x2C	; 44
    4348:	81 50       	subi	r24, 0x01	; 1
    434a:	90 40       	sbci	r25, 0x00	; 0
    434c:	a0 40       	sbci	r26, 0x00	; 0
    434e:	e1 f7       	brne	.-8      	; 0x4348 <__stack+0x2149>
    4350:	00 c0       	rjmp	.+0      	; 0x4352 <__stack+0x2153>
    4352:	00 00       	nop
				_delay_ms(1000);
				blackline();
    4354:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_left();
    4358:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    435c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// drop the color box at A
				drop_the_block();
    4360:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				rotation_using_blackline_right();
    4364:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    4368:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(113);
    436c:	81 e7       	ldi	r24, 0x71	; 113
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left(88);
    4374:	88 e5       	ldi	r24, 0x58	; 88
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				servo_2(155);
    437c:	8b e9       	ldi	r24, 0x9B	; 155
    437e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    4382:	8f ef       	ldi	r24, 0xFF	; 255
    4384:	9f ef       	ldi	r25, 0xFF	; 255
    4386:	ac e2       	ldi	r26, 0x2C	; 44
    4388:	81 50       	subi	r24, 0x01	; 1
    438a:	90 40       	sbci	r25, 0x00	; 0
    438c:	a0 40       	sbci	r26, 0x00	; 0
    438e:	e1 f7       	brne	.-8      	; 0x4388 <__stack+0x2189>
    4390:	00 c0       	rjmp	.+0      	; 0x4392 <__stack+0x2193>
    4392:	00 00       	nop
    4394:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    4396:	8c 2f       	mov	r24, r28
    4398:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    439c:	8f ef       	ldi	r24, 0xFF	; 255
    439e:	9f ef       	ldi	r25, 0xFF	; 255
    43a0:	a8 e0       	ldi	r26, 0x08	; 8
    43a2:	81 50       	subi	r24, 0x01	; 1
    43a4:	90 40       	sbci	r25, 0x00	; 0
    43a6:	a0 40       	sbci	r26, 0x00	; 0
    43a8:	e1 f7       	brne	.-8      	; 0x43a2 <__stack+0x21a3>
    43aa:	00 c0       	rjmp	.+0      	; 0x43ac <__stack+0x21ad>
    43ac:	00 00       	nop
    43ae:	ce 5f       	subi	r28, 0xFE	; 254
				blackline();
				forward_mm(113);
				turn_left(88);
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    43b0:	c8 33       	cpi	r28, 0x38	; 56
    43b2:	89 f7       	brne	.-30     	; 0x4396 <__stack+0x2197>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    43b4:	83 e8       	ldi	r24, 0x83	; 131
    43b6:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				rotation_using_blackline_right();
    43ba:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    43be:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_left();
    43c2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				/// drop the weight box in container
				drop_the_block();
    43c6:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    43ca:	88 e1       	ldi	r24, 0x18	; 24
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    43d2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
    43d6:	8f ef       	ldi	r24, 0xFF	; 255
    43d8:	9f ef       	ldi	r25, 0xFF	; 255
    43da:	ac e2       	ldi	r26, 0x2C	; 44
    43dc:	81 50       	subi	r24, 0x01	; 1
    43de:	90 40       	sbci	r25, 0x00	; 0
    43e0:	a0 40       	sbci	r26, 0x00	; 0
    43e2:	e1 f7       	brne	.-8      	; 0x43dc <__stack+0x21dd>
    43e4:	00 c0       	rjmp	.+0      	; 0x43e6 <__stack+0x21e7>
    43e6:	00 00       	nop
				_delay_ms(1000);
				blackline();
    43e8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from weight W3
				servo_2(155);
    43ec:	8b e9       	ldi	r24, 0x9B	; 155
    43ee:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    43f2:	8f ef       	ldi	r24, 0xFF	; 255
    43f4:	9f ef       	ldi	r25, 0xFF	; 255
    43f6:	ac e2       	ldi	r26, 0x2C	; 44
    43f8:	81 50       	subi	r24, 0x01	; 1
    43fa:	90 40       	sbci	r25, 0x00	; 0
    43fc:	a0 40       	sbci	r26, 0x00	; 0
    43fe:	e1 f7       	brne	.-8      	; 0x43f8 <__stack+0x21f9>
    4400:	00 c0       	rjmp	.+0      	; 0x4402 <__stack+0x2203>
    4402:	00 00       	nop
    4404:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    4406:	8c 2f       	mov	r24, r28
    4408:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    440c:	8f ef       	ldi	r24, 0xFF	; 255
    440e:	9f ef       	ldi	r25, 0xFF	; 255
    4410:	a8 e0       	ldi	r26, 0x08	; 8
    4412:	81 50       	subi	r24, 0x01	; 1
    4414:	90 40       	sbci	r25, 0x00	; 0
    4416:	a0 40       	sbci	r26, 0x00	; 0
    4418:	e1 f7       	brne	.-8      	; 0x4412 <__stack+0x2213>
    441a:	00 c0       	rjmp	.+0      	; 0x441c <__stack+0x221d>
    441c:	00 00       	nop
    441e:	ce 5f       	subi	r28, 0xFE	; 254
				_delay_ms(1000);
				blackline();
				// pick the weight box from weight W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    4420:	c8 33       	cpi	r28, 0x38	; 56
    4422:	89 f7       	brne	.-30     	; 0x4406 <__stack+0x2207>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    4424:	83 e8       	ldi	r24, 0x83	; 131
    4426:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    442a:	8f ef       	ldi	r24, 0xFF	; 255
    442c:	9f ef       	ldi	r25, 0xFF	; 255
    442e:	a9 e5       	ldi	r26, 0x59	; 89
    4430:	81 50       	subi	r24, 0x01	; 1
    4432:	90 40       	sbci	r25, 0x00	; 0
    4434:	a0 40       	sbci	r26, 0x00	; 0
    4436:	e1 f7       	brne	.-8      	; 0x4430 <__stack+0x2231>
    4438:	00 c0       	rjmp	.+0      	; 0x443a <__stack+0x223b>
    443a:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);//
    443c:	88 e1       	ldi	r24, 0x18	; 24
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    4444:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4448:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(24);
    444c:	88 e1       	ldi	r24, 0x18	; 24
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    4454:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				// drop the weight box in container
				drop_the_block();
    4458:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    445c:	88 e1       	ldi	r24, 0x18	; 24
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    4464:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    4468:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(23);///
    446c:	87 e1       	ldi	r24, 0x17	; 23
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				turn_left();
    4474:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(190,180);
    4478:	8e eb       	ldi	r24, 0xBE	; 190
    447a:	64 eb       	ldi	r22, 0xB4	; 180
    447c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    4480:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4484:	8f ef       	ldi	r24, 0xFF	; 255
    4486:	9f ef       	ldi	r25, 0xFF	; 255
    4488:	ac e2       	ldi	r26, 0x2C	; 44
    448a:	81 50       	subi	r24, 0x01	; 1
    448c:	90 40       	sbci	r25, 0x00	; 0
    448e:	a0 40       	sbci	r26, 0x00	; 0
    4490:	e1 f7       	brne	.-8      	; 0x448a <__stack+0x228b>
    4492:	00 c0       	rjmp	.+0      	; 0x4494 <__stack+0x2295>
    4494:	00 00       	nop
				_delay_ms(1000);
				blackline();
    4496:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// CROSSING THE BRIDGE
				// NOW WE ARE IN CITY 1
				turn_left();
    449a:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
				velocity(150,150);
    449e:	86 e9       	ldi	r24, 0x96	; 150
    44a0:	66 e9       	ldi	r22, 0x96	; 150
    44a2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    44a6:	8f ef       	ldi	r24, 0xFF	; 255
    44a8:	9f e3       	ldi	r25, 0x3F	; 63
    44aa:	a2 e0       	ldi	r26, 0x02	; 2
    44ac:	81 50       	subi	r24, 0x01	; 1
    44ae:	90 40       	sbci	r25, 0x00	; 0
    44b0:	a0 40       	sbci	r26, 0x00	; 0
    44b2:	e1 f7       	brne	.-8      	; 0x44ac <__stack+0x22ad>
    44b4:	00 c0       	rjmp	.+0      	; 0x44b6 <__stack+0x22b7>
    44b6:	00 00       	nop
				_delay_ms(50);
				stop();
    44b8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    44bc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				velocity(190,180);
    44c0:	8e eb       	ldi	r24, 0xBE	; 190
    44c2:	64 eb       	ldi	r22, 0xB4	; 180
    44c4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(113);
    44c8:	81 e7       	ldi	r24, 0x71	; 113
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				stop();
    44d0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    44d4:	8f ef       	ldi	r24, 0xFF	; 255
    44d6:	9f ef       	ldi	r25, 0xFF	; 255
    44d8:	ac e2       	ldi	r26, 0x2C	; 44
    44da:	81 50       	subi	r24, 0x01	; 1
    44dc:	90 40       	sbci	r25, 0x00	; 0
    44de:	a0 40       	sbci	r26, 0x00	; 0
    44e0:	e1 f7       	brne	.-8      	; 0x44da <__stack+0x22db>
    44e2:	00 c0       	rjmp	.+0      	; 0x44e4 <__stack+0x22e5>
    44e4:	00 00       	nop
				_delay_ms(1000);
				velocity(190,180);
    44e6:	8e eb       	ldi	r24, 0xBE	; 190
    44e8:	64 eb       	ldi	r22, 0xB4	; 180
    44ea:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				left_degrees(88);
    44ee:	88 e5       	ldi	r24, 0x58	; 88
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
				velocity(190,180);
    44f6:	8e eb       	ldi	r24, 0xBE	; 190
    44f8:	64 eb       	ldi	r22, 0xB4	; 180
    44fa:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				stop();
    44fe:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4502:	8f ef       	ldi	r24, 0xFF	; 255
    4504:	9f e7       	ldi	r25, 0x7F	; 127
    4506:	a6 e1       	ldi	r26, 0x16	; 22
    4508:	81 50       	subi	r24, 0x01	; 1
    450a:	90 40       	sbci	r25, 0x00	; 0
    450c:	a0 40       	sbci	r26, 0x00	; 0
    450e:	e1 f7       	brne	.-8      	; 0x4508 <__stack+0x2309>
    4510:	00 c0       	rjmp	.+0      	; 0x4512 <__stack+0x2313>
    4512:	00 00       	nop
				_delay_ms(500);
				velocity(182,180);
    4514:	86 eb       	ldi	r24, 0xB6	; 182
    4516:	64 eb       	ldi	r22, 0xB4	; 180
    4518:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				back_mm(83);
    451c:	83 e5       	ldi	r24, 0x53	; 83
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
				stop();
    4524:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4528:	8f ef       	ldi	r24, 0xFF	; 255
    452a:	9f e7       	ldi	r25, 0x7F	; 127
    452c:	a6 e1       	ldi	r26, 0x16	; 22
    452e:	81 50       	subi	r24, 0x01	; 1
    4530:	90 40       	sbci	r25, 0x00	; 0
    4532:	a0 40       	sbci	r26, 0x00	; 0
    4534:	e1 f7       	brne	.-8      	; 0x452e <__stack+0x232f>
    4536:	00 c0       	rjmp	.+0      	; 0x4538 <__stack+0x2339>
    4538:	00 00       	nop
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
    453a:	8b e9       	ldi	r24, 0x9B	; 155
    453c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    4540:	8f ef       	ldi	r24, 0xFF	; 255
    4542:	9f ef       	ldi	r25, 0xFF	; 255
    4544:	ac e2       	ldi	r26, 0x2C	; 44
    4546:	81 50       	subi	r24, 0x01	; 1
    4548:	90 40       	sbci	r25, 0x00	; 0
    454a:	a0 40       	sbci	r26, 0x00	; 0
    454c:	e1 f7       	brne	.-8      	; 0x4546 <__stack+0x2347>
    454e:	00 c0       	rjmp	.+0      	; 0x4550 <__stack+0x2351>
    4550:	00 00       	nop
    4552:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    4554:	8c 2f       	mov	r24, r28
    4556:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    455a:	8f ef       	ldi	r24, 0xFF	; 255
    455c:	9f ef       	ldi	r25, 0xFF	; 255
    455e:	a8 e0       	ldi	r26, 0x08	; 8
    4560:	81 50       	subi	r24, 0x01	; 1
    4562:	90 40       	sbci	r25, 0x00	; 0
    4564:	a0 40       	sbci	r26, 0x00	; 0
    4566:	e1 f7       	brne	.-8      	; 0x4560 <__stack+0x2361>
    4568:	00 c0       	rjmp	.+0      	; 0x456a <__stack+0x236b>
    456a:	00 00       	nop
    456c:	ce 5f       	subi	r28, 0xFE	; 254
				stop();
				_delay_ms(500);
				// PICK THE WEIGTH BOX FROM W3
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    456e:	c8 33       	cpi	r28, 0x38	; 56
    4570:	89 f7       	brne	.-30     	; 0x4554 <__stack+0x2355>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    4572:	83 e8       	ldi	r24, 0x83	; 131
    4574:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4578:	8f ef       	ldi	r24, 0xFF	; 255
    457a:	9f ef       	ldi	r25, 0xFF	; 255
    457c:	a9 e5       	ldi	r26, 0x59	; 89
    457e:	81 50       	subi	r24, 0x01	; 1
    4580:	90 40       	sbci	r25, 0x00	; 0
    4582:	a0 40       	sbci	r26, 0x00	; 0
    4584:	e1 f7       	brne	.-8      	; 0x457e <__stack+0x237f>
    4586:	00 c0       	rjmp	.+0      	; 0x4588 <__stack+0x2389>
    4588:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    458a:	88 e1       	ldi	r24, 0x18	; 24
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    4592:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4596:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    459a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    459e:	8f ef       	ldi	r24, 0xFF	; 255
    45a0:	9f e7       	ldi	r25, 0x7F	; 127
    45a2:	a6 e1       	ldi	r26, 0x16	; 22
    45a4:	81 50       	subi	r24, 0x01	; 1
    45a6:	90 40       	sbci	r25, 0x00	; 0
    45a8:	a0 40       	sbci	r26, 0x00	; 0
    45aa:	e1 f7       	brne	.-8      	; 0x45a4 <__stack+0x23a5>
    45ac:	00 c0       	rjmp	.+0      	; 0x45ae <__stack+0x23af>
    45ae:	00 00       	nop
				_delay_ms(500);
				velocity(150,150);
    45b0:	86 e9       	ldi	r24, 0x96	; 150
    45b2:	66 e9       	ldi	r22, 0x96	; 150
    45b4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
				forward_mm(39);
    45b8:	87 e2       	ldi	r24, 0x27	; 39
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				blackline();
    45c0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(3);
    45c4:	83 e0       	ldi	r24, 0x03	; 3
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    45cc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// DROP THE BOX IN CONTAINER
				drop_the_block();
    45d0:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
				forward_mm(24);//
    45d4:	88 e1       	ldi	r24, 0x18	; 24
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    45dc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    45e0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// pick the weight box from W5
				servo_2(155);
    45e4:	8b e9       	ldi	r24, 0x9B	; 155
    45e6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    45ea:	8f ef       	ldi	r24, 0xFF	; 255
    45ec:	9f ef       	ldi	r25, 0xFF	; 255
    45ee:	ac e2       	ldi	r26, 0x2C	; 44
    45f0:	81 50       	subi	r24, 0x01	; 1
    45f2:	90 40       	sbci	r25, 0x00	; 0
    45f4:	a0 40       	sbci	r26, 0x00	; 0
    45f6:	e1 f7       	brne	.-8      	; 0x45f0 <__stack+0x23f1>
    45f8:	00 c0       	rjmp	.+0      	; 0x45fa <__stack+0x23fb>
    45fa:	00 00       	nop
    45fc:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
				{


					servo_1(i);
    45fe:	8c 2f       	mov	r24, r28
    4600:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    4604:	8f ef       	ldi	r24, 0xFF	; 255
    4606:	9f ef       	ldi	r25, 0xFF	; 255
    4608:	a8 e0       	ldi	r26, 0x08	; 8
    460a:	81 50       	subi	r24, 0x01	; 1
    460c:	90 40       	sbci	r25, 0x00	; 0
    460e:	a0 40       	sbci	r26, 0x00	; 0
    4610:	e1 f7       	brne	.-8      	; 0x460a <__stack+0x240b>
    4612:	00 c0       	rjmp	.+0      	; 0x4614 <__stack+0x2415>
    4614:	00 00       	nop
    4616:	ce 5f       	subi	r28, 0xFE	; 254
				rotation_using_blackline_left();
				blackline();
				// pick the weight box from W5
				servo_2(155);
				_delay_ms(1000);
				for(int i=0;i<=54;i+=2)
    4618:	c8 33       	cpi	r28, 0x38	; 56
    461a:	89 f7       	brne	.-30     	; 0x45fe <__stack+0x23ff>

					servo_1(i);
					_delay_ms(200);
				}
				
				servo_3(131);
    461c:	83 e8       	ldi	r24, 0x83	; 131
    461e:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4622:	8f ef       	ldi	r24, 0xFF	; 255
    4624:	9f ef       	ldi	r25, 0xFF	; 255
    4626:	a9 e5       	ldi	r26, 0x59	; 89
    4628:	81 50       	subi	r24, 0x01	; 1
    462a:	90 40       	sbci	r25, 0x00	; 0
    462c:	a0 40       	sbci	r26, 0x00	; 0
    462e:	e1 f7       	brne	.-8      	; 0x4628 <__stack+0x2429>
    4630:	00 c0       	rjmp	.+0      	; 0x4632 <__stack+0x2433>
    4632:	00 00       	nop
				_delay_ms(2000);
				forward_mm(24);
    4634:	88 e1       	ldi	r24, 0x18	; 24
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    463c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4640:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				stop();
    4644:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				forward_mm(24);//
    4648:	88 e1       	ldi	r24, 0x18	; 24
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    4650:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4654:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				//.. drop the weight box in container
				turn_right();
    4658:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    465c:	86 e9       	ldi	r24, 0x96	; 150
    465e:	66 e9       	ldi	r22, 0x96	; 150
    4660:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4664:	8f ef       	ldi	r24, 0xFF	; 255
    4666:	9f e3       	ldi	r25, 0x3F	; 63
    4668:	a2 e0       	ldi	r26, 0x02	; 2
    466a:	81 50       	subi	r24, 0x01	; 1
    466c:	90 40       	sbci	r25, 0x00	; 0
    466e:	a0 40       	sbci	r26, 0x00	; 0
    4670:	e1 f7       	brne	.-8      	; 0x466a <__stack+0x246b>
    4672:	00 c0       	rjmp	.+0      	; 0x4674 <__stack+0x2475>
    4674:	00 00       	nop
				_delay_ms(50);
				stop();
    4676:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    467a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				forward_mm(8);
    467e:	88 e0       	ldi	r24, 0x08	; 8
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_right();
    4686:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				// pick the bottom box
				servo_2(135);
    468a:	87 e8       	ldi	r24, 0x87	; 135
    468c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    4690:	8f ef       	ldi	r24, 0xFF	; 255
    4692:	9f ef       	ldi	r25, 0xFF	; 255
    4694:	ac e2       	ldi	r26, 0x2C	; 44
    4696:	81 50       	subi	r24, 0x01	; 1
    4698:	90 40       	sbci	r25, 0x00	; 0
    469a:	a0 40       	sbci	r26, 0x00	; 0
    469c:	e1 f7       	brne	.-8      	; 0x4696 <__stack+0x2497>
    469e:	00 c0       	rjmp	.+0      	; 0x46a0 <__stack+0x24a1>
    46a0:	00 00       	nop
				_delay_ms(1000);
				servo_3(0);
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    46a8:	8f ef       	ldi	r24, 0xFF	; 255
    46aa:	9f ef       	ldi	r25, 0xFF	; 255
    46ac:	ac e2       	ldi	r26, 0x2C	; 44
    46ae:	81 50       	subi	r24, 0x01	; 1
    46b0:	90 40       	sbci	r25, 0x00	; 0
    46b2:	a0 40       	sbci	r26, 0x00	; 0
    46b4:	e1 f7       	brne	.-8      	; 0x46ae <__stack+0x24af>
    46b6:	00 c0       	rjmp	.+0      	; 0x46b8 <__stack+0x24b9>
    46b8:	00 00       	nop
    46ba:	c0 e0       	ldi	r28, 0x00	; 0
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
				{
					servo_1(i);
    46bc:	8c 2f       	mov	r24, r28
    46be:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    46c2:	8f ef       	ldi	r24, 0xFF	; 255
    46c4:	9f ef       	ldi	r25, 0xFF	; 255
    46c6:	ac e2       	ldi	r26, 0x2C	; 44
    46c8:	81 50       	subi	r24, 0x01	; 1
    46ca:	90 40       	sbci	r25, 0x00	; 0
    46cc:	a0 40       	sbci	r26, 0x00	; 0
    46ce:	e1 f7       	brne	.-8      	; 0x46c8 <__stack+0x24c9>
    46d0:	00 c0       	rjmp	.+0      	; 0x46d2 <__stack+0x24d3>
    46d2:	00 00       	nop
    46d4:	cb 5f       	subi	r28, 0xFB	; 251
				// pick the bottom box
				servo_2(135);
				_delay_ms(1000);
				servo_3(0);
				_delay_ms(1000);
				for(int i=0;i<=40;i+=5)
    46d6:	cd 32       	cpi	r28, 0x2D	; 45
    46d8:	89 f7       	brne	.-30     	; 0x46bc <__stack+0x24bd>
    46da:	8f ef       	ldi	r24, 0xFF	; 255
    46dc:	9f ef       	ldi	r25, 0xFF	; 255
    46de:	ac e2       	ldi	r26, 0x2C	; 44
    46e0:	81 50       	subi	r24, 0x01	; 1
    46e2:	90 40       	sbci	r25, 0x00	; 0
    46e4:	a0 40       	sbci	r26, 0x00	; 0
    46e6:	e1 f7       	brne	.-8      	; 0x46e0 <__stack+0x24e1>
    46e8:	00 c0       	rjmp	.+0      	; 0x46ea <__stack+0x24eb>
    46ea:	00 00       	nop
					_delay_ms(1000);


				}
				_delay_ms(1000);
				servo_3(114);
    46ec:	82 e7       	ldi	r24, 0x72	; 114
    46ee:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
				turn_right();
    46f2:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    46f6:	86 e9       	ldi	r24, 0x96	; 150
    46f8:	66 e9       	ldi	r22, 0x96	; 150
    46fa:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    46fe:	8f ef       	ldi	r24, 0xFF	; 255
    4700:	9f e3       	ldi	r25, 0x3F	; 63
    4702:	a2 e0       	ldi	r26, 0x02	; 2
    4704:	81 50       	subi	r24, 0x01	; 1
    4706:	90 40       	sbci	r25, 0x00	; 0
    4708:	a0 40       	sbci	r26, 0x00	; 0
    470a:	e1 f7       	brne	.-8      	; 0x4704 <__stack+0x2505>
    470c:	00 c0       	rjmp	.+0      	; 0x470e <__stack+0x250f>
    470e:	00 00       	nop
				_delay_ms(50);
				stop();
    4710:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				turn_right();
    4714:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
				velocity(150,150);
    4718:	86 e9       	ldi	r24, 0x96	; 150
    471a:	66 e9       	ldi	r22, 0x96	; 150
    471c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4720:	8f ef       	ldi	r24, 0xFF	; 255
    4722:	9f e3       	ldi	r25, 0x3F	; 63
    4724:	a2 e0       	ldi	r26, 0x02	; 2
    4726:	81 50       	subi	r24, 0x01	; 1
    4728:	90 40       	sbci	r25, 0x00	; 0
    472a:	a0 40       	sbci	r26, 0x00	; 0
    472c:	e1 f7       	brne	.-8      	; 0x4726 <__stack+0x2527>
    472e:	00 c0       	rjmp	.+0      	; 0x4730 <__stack+0x2531>
    4730:	00 00       	nop
				_delay_ms(50);
				stop();
    4732:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
				blackline();
    4736:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// now crossing the bridge last time
				// we are in city 2
				forward_mm(24);//
    473a:	88 e1       	ldi	r24, 0x18	; 24
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
				rotation_using_blackline_left();
    4742:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
				blackline();
    4746:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				rotation_using_blackline_right();
    474a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
				blackline();
    474e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
				// drop the color box at C
				drop_the_block();
    4752:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
    4756:	0c 94 63 33 	jmp	0x66c6	; 0x66c6 <__stack+0x44c7>

	////////////////////////////BRIDGE IS "NOT IN FAVOUR"/////////////////////////////////////////////////////////////////////////
	else //which means bridge is not in favour
	{
		
		forward_mm(37);
    475a:	85 e2       	ldi	r24, 0x25	; 37
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		velocity(144,135);
    4762:	80 e9       	ldi	r24, 0x90	; 144
    4764:	67 e8       	ldi	r22, 0x87	; 135
    4766:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    476a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    476e:	8f ef       	ldi	r24, 0xFF	; 255
    4770:	9f ef       	ldi	r25, 0xFF	; 255
    4772:	ac e2       	ldi	r26, 0x2C	; 44
    4774:	81 50       	subi	r24, 0x01	; 1
    4776:	90 40       	sbci	r25, 0x00	; 0
    4778:	a0 40       	sbci	r26, 0x00	; 0
    477a:	e1 f7       	brne	.-8      	; 0x4774 <__stack+0x2575>
    477c:	00 c0       	rjmp	.+0      	; 0x477e <__stack+0x257f>
    477e:	00 00       	nop

		_delay_ms(1000);

		turn_right();
    4780:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4784:	86 e9       	ldi	r24, 0x96	; 150
    4786:	66 e9       	ldi	r22, 0x96	; 150
    4788:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    478c:	8f ef       	ldi	r24, 0xFF	; 255
    478e:	9f e3       	ldi	r25, 0x3F	; 63
    4790:	a2 e0       	ldi	r26, 0x02	; 2
    4792:	81 50       	subi	r24, 0x01	; 1
    4794:	90 40       	sbci	r25, 0x00	; 0
    4796:	a0 40       	sbci	r26, 0x00	; 0
    4798:	e1 f7       	brne	.-8      	; 0x4792 <__stack+0x2593>
    479a:	00 c0       	rjmp	.+0      	; 0x479c <__stack+0x259d>
    479c:	00 00       	nop
		_delay_ms(50);
		stop();
    479e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		
		blackline();
    47a2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		
		//now we need to pick top weight W1

		forward_mm(113);
    47a6:	81 e7       	ldi	r24, 0x71	; 113
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    47ae:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    47b2:	8f ef       	ldi	r24, 0xFF	; 255
    47b4:	9f ef       	ldi	r25, 0xFF	; 255
    47b6:	ac e2       	ldi	r26, 0x2C	; 44
    47b8:	81 50       	subi	r24, 0x01	; 1
    47ba:	90 40       	sbci	r25, 0x00	; 0
    47bc:	a0 40       	sbci	r26, 0x00	; 0
    47be:	e1 f7       	brne	.-8      	; 0x47b8 <__stack+0x25b9>
    47c0:	00 c0       	rjmp	.+0      	; 0x47c2 <__stack+0x25c3>
    47c2:	00 00       	nop
		_delay_ms(1000);
		velocity(190,180);
    47c4:	8e eb       	ldi	r24, 0xBE	; 190
    47c6:	64 eb       	ldi	r22, 0xB4	; 180
    47c8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		left_degrees(88);
    47cc:	88 e5       	ldi	r24, 0x58	; 88
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,180);
    47d4:	8e eb       	ldi	r24, 0xBE	; 190
    47d6:	64 eb       	ldi	r22, 0xB4	; 180
    47d8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    47dc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    47e0:	8f ef       	ldi	r24, 0xFF	; 255
    47e2:	9f e7       	ldi	r25, 0x7F	; 127
    47e4:	a6 e1       	ldi	r26, 0x16	; 22
    47e6:	81 50       	subi	r24, 0x01	; 1
    47e8:	90 40       	sbci	r25, 0x00	; 0
    47ea:	a0 40       	sbci	r26, 0x00	; 0
    47ec:	e1 f7       	brne	.-8      	; 0x47e6 <__stack+0x25e7>
    47ee:	00 c0       	rjmp	.+0      	; 0x47f0 <__stack+0x25f1>
    47f0:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);
    47f2:	86 eb       	ldi	r24, 0xB6	; 182
    47f4:	64 eb       	ldi	r22, 0xB4	; 180
    47f6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(83);
    47fa:	83 e5       	ldi	r24, 0x53	; 83
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		stop();
    4802:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4806:	8f ef       	ldi	r24, 0xFF	; 255
    4808:	9f e7       	ldi	r25, 0x7F	; 127
    480a:	a6 e1       	ldi	r26, 0x16	; 22
    480c:	81 50       	subi	r24, 0x01	; 1
    480e:	90 40       	sbci	r25, 0x00	; 0
    4810:	a0 40       	sbci	r26, 0x00	; 0
    4812:	e1 f7       	brne	.-8      	; 0x480c <__stack+0x260d>
    4814:	00 c0       	rjmp	.+0      	; 0x4816 <__stack+0x2617>
    4816:	00 00       	nop
		_delay_ms(500);

		pick_top_weight_block(); //will pick the weight block
    4818:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		
		forward_mm(24);
    481c:	88 e1       	ldi	r24, 0x18	; 24
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4824:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4828:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    482c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4830:	8f ef       	ldi	r24, 0xFF	; 255
    4832:	9f e7       	ldi	r25, 0x7F	; 127
    4834:	a6 e1       	ldi	r26, 0x16	; 22
    4836:	81 50       	subi	r24, 0x01	; 1
    4838:	90 40       	sbci	r25, 0x00	; 0
    483a:	a0 40       	sbci	r26, 0x00	; 0
    483c:	e1 f7       	brne	.-8      	; 0x4836 <__stack+0x2637>
    483e:	00 c0       	rjmp	.+0      	; 0x4840 <__stack+0x2641>
    4840:	00 00       	nop
		_delay_ms(500);
		
		forward_mm(39);
    4842:	87 e2       	ldi	r24, 0x27	; 39
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    484a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(3);
    484e:	83 e0       	ldi	r24, 0x03	; 3
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    4856:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		
		drop_the_block(); //will drop the weight block into the container
    485a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>

		turn_right();
    485e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4862:	86 e9       	ldi	r24, 0x96	; 150
    4864:	66 e9       	ldi	r22, 0x96	; 150
    4866:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    486a:	8f ef       	ldi	r24, 0xFF	; 255
    486c:	9f e3       	ldi	r25, 0x3F	; 63
    486e:	a2 e0       	ldi	r26, 0x02	; 2
    4870:	81 50       	subi	r24, 0x01	; 1
    4872:	90 40       	sbci	r25, 0x00	; 0
    4874:	a0 40       	sbci	r26, 0x00	; 0
    4876:	e1 f7       	brne	.-8      	; 0x4870 <__stack+0x2671>
    4878:	00 c0       	rjmp	.+0      	; 0x487a <__stack+0x267b>
    487a:	00 00       	nop
		_delay_ms(50);
		stop();
    487c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4880:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    4884:	88 e0       	ldi	r24, 0x08	; 8
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    488c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		//now facing towards hazardous wastes
		sense_top2_HZ_waste_block_color();
    4890:	0e 94 e7 07 	call	0xfce	; 0xfce <sense_top2_HZ_waste_block_color>
		//// sensed the color of top 2 blocks successfully

		turn_right();
    4894:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4898:	86 e9       	ldi	r24, 0x96	; 150
    489a:	66 e9       	ldi	r22, 0x96	; 150
    489c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    48a0:	8f ef       	ldi	r24, 0xFF	; 255
    48a2:	9f e3       	ldi	r25, 0x3F	; 63
    48a4:	a2 e0       	ldi	r26, 0x02	; 2
    48a6:	81 50       	subi	r24, 0x01	; 1
    48a8:	90 40       	sbci	r25, 0x00	; 0
    48aa:	a0 40       	sbci	r26, 0x00	; 0
    48ac:	e1 f7       	brne	.-8      	; 0x48a6 <__stack+0x26a7>
    48ae:	00 c0       	rjmp	.+0      	; 0x48b0 <__stack+0x26b1>
    48b0:	00 00       	nop
		_delay_ms(50);
		stop();
    48b2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    48b6:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    48ba:	86 e9       	ldi	r24, 0x96	; 150
    48bc:	66 e9       	ldi	r22, 0x96	; 150
    48be:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    48c2:	8f ef       	ldi	r24, 0xFF	; 255
    48c4:	9f e3       	ldi	r25, 0x3F	; 63
    48c6:	a2 e0       	ldi	r26, 0x02	; 2
    48c8:	81 50       	subi	r24, 0x01	; 1
    48ca:	90 40       	sbci	r25, 0x00	; 0
    48cc:	a0 40       	sbci	r26, 0x00	; 0
    48ce:	e1 f7       	brne	.-8      	; 0x48c8 <__stack+0x26c9>
    48d0:	00 c0       	rjmp	.+0      	; 0x48d2 <__stack+0x26d3>
    48d2:	00 00       	nop
		_delay_ms(50);
		stop();
    48d4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    48d8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    48dc:	8f ef       	ldi	r24, 0xFF	; 255
    48de:	9f ef       	ldi	r25, 0xFF	; 255
    48e0:	ac e2       	ldi	r26, 0x2C	; 44
    48e2:	81 50       	subi	r24, 0x01	; 1
    48e4:	90 40       	sbci	r25, 0x00	; 0
    48e6:	a0 40       	sbci	r26, 0x00	; 0
    48e8:	e1 f7       	brne	.-8      	; 0x48e2 <__stack+0x26e3>
    48ea:	00 c0       	rjmp	.+0      	; 0x48ec <__stack+0x26ed>
    48ec:	00 00       	nop
		_delay_ms(1000);
		
		//bridge crossed successfully
		
		forward_mm(21);
    48ee:	85 e1       	ldi	r24, 0x15	; 21
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    48f6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    48fa:	8f ef       	ldi	r24, 0xFF	; 255
    48fc:	9f e7       	ldi	r25, 0x7F	; 127
    48fe:	a6 e1       	ldi	r26, 0x16	; 22
    4900:	81 50       	subi	r24, 0x01	; 1
    4902:	90 40       	sbci	r25, 0x00	; 0
    4904:	a0 40       	sbci	r26, 0x00	; 0
    4906:	e1 f7       	brne	.-8      	; 0x4900 <__stack+0x2701>
    4908:	00 c0       	rjmp	.+0      	; 0x490a <__stack+0x270b>
    490a:	00 00       	nop
		_delay_ms(500);
		blackline();
    490c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    4910:	8f ef       	ldi	r24, 0xFF	; 255
    4912:	9f ef       	ldi	r25, 0xFF	; 255
    4914:	ac e2       	ldi	r26, 0x2C	; 44
    4916:	81 50       	subi	r24, 0x01	; 1
    4918:	90 40       	sbci	r25, 0x00	; 0
    491a:	a0 40       	sbci	r26, 0x00	; 0
    491c:	e1 f7       	brne	.-8      	; 0x4916 <__stack+0x2717>
    491e:	00 c0       	rjmp	.+0      	; 0x4920 <__stack+0x2721>
    4920:	00 00       	nop
		_delay_ms(1000);

		//now it will sense the color of flag 2
		servo_1(0);
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
		servo_2(135);
    4928:	87 e8       	ldi	r24, 0x87	; 135
    492a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
		servo_3(112);
    492e:	80 e7       	ldi	r24, 0x70	; 112
    4930:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		//initial positions of servos adjusted as it will hit flag if it is done later
		
		blackline();
    4934:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(60);
    4938:	8c e3       	ldi	r24, 0x3C	; 60
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    4940:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4944:	8f ef       	ldi	r24, 0xFF	; 255
    4946:	9f ef       	ldi	r25, 0xFF	; 255
    4948:	ac e2       	ldi	r26, 0x2C	; 44
    494a:	81 50       	subi	r24, 0x01	; 1
    494c:	90 40       	sbci	r25, 0x00	; 0
    494e:	a0 40       	sbci	r26, 0x00	; 0
    4950:	e1 f7       	brne	.-8      	; 0x494a <__stack+0x274b>
    4952:	00 c0       	rjmp	.+0      	; 0x4954 <__stack+0x2755>
    4954:	00 00       	nop
		_delay_ms(1000);
		blackline();
    4956:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(185);
    495a:	89 eb       	ldi	r24, 0xB9	; 185
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    4962:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4966:	8f ef       	ldi	r24, 0xFF	; 255
    4968:	9f ef       	ldi	r25, 0xFF	; 255
    496a:	ac e2       	ldi	r26, 0x2C	; 44
    496c:	81 50       	subi	r24, 0x01	; 1
    496e:	90 40       	sbci	r25, 0x00	; 0
    4970:	a0 40       	sbci	r26, 0x00	; 0
    4972:	e1 f7       	brne	.-8      	; 0x496c <__stack+0x276d>
    4974:	00 c0       	rjmp	.+0      	; 0x4976 <__stack+0x2777>
    4976:	00 00       	nop
		_delay_ms(1000);
		velocity(150,150);
    4978:	86 e9       	ldi	r24, 0x96	; 150
    497a:	66 e9       	ldi	r22, 0x96	; 150
    497c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		soft_right_2_degrees(92);
    4980:	8c e5       	ldi	r24, 0x5C	; 92
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <soft_right_2_degrees>
		velocity(190,180);
    4988:	8e eb       	ldi	r24, 0xBE	; 190
    498a:	64 eb       	ldi	r22, 0xB4	; 180
    498c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4990:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4994:	8f ef       	ldi	r24, 0xFF	; 255
    4996:	9f e7       	ldi	r25, 0x7F	; 127
    4998:	a6 e1       	ldi	r26, 0x16	; 22
    499a:	81 50       	subi	r24, 0x01	; 1
    499c:	90 40       	sbci	r25, 0x00	; 0
    499e:	a0 40       	sbci	r26, 0x00	; 0
    49a0:	e1 f7       	brne	.-8      	; 0x499a <__stack+0x279b>
    49a2:	00 c0       	rjmp	.+0      	; 0x49a4 <__stack+0x27a5>
    49a4:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);
    49a6:	86 eb       	ldi	r24, 0xB6	; 182
    49a8:	64 eb       	ldi	r22, 0xB4	; 180
    49aa:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(60);
    49ae:	8c e3       	ldi	r24, 0x3C	; 60
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		servo_1(0);
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
		servo_2(43);
    49bc:	8b e2       	ldi	r24, 0x2B	; 43
    49be:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    49c2:	8f ef       	ldi	r24, 0xFF	; 255
    49c4:	9f ef       	ldi	r25, 0xFF	; 255
    49c6:	ac e2       	ldi	r26, 0x2C	; 44
    49c8:	81 50       	subi	r24, 0x01	; 1
    49ca:	90 40       	sbci	r25, 0x00	; 0
    49cc:	a0 40       	sbci	r26, 0x00	; 0
    49ce:	e1 f7       	brne	.-8      	; 0x49c8 <__stack+0x27c9>
    49d0:	00 c0       	rjmp	.+0      	; 0x49d2 <__stack+0x27d3>
    49d2:	00 00       	nop
		_delay_ms(1000);
		//now color sensor can read color easily
		flag2_color=check_color();
    49d4:	0e 94 1c 05 	call	0xa38	; 0xa38 <check_color>
    49d8:	80 93 34 02 	sts	0x0234, r24
		//color of flag 2 read successfully and now we will turn robot towards flag 3
		forward_mm(70);
    49dc:	86 e4       	ldi	r24, 0x46	; 70
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
    49e4:	8f ef       	ldi	r24, 0xFF	; 255
    49e6:	9f ef       	ldi	r25, 0xFF	; 255
    49e8:	a0 ee       	ldi	r26, 0xE0	; 224
    49ea:	81 50       	subi	r24, 0x01	; 1
    49ec:	90 40       	sbci	r25, 0x00	; 0
    49ee:	a0 40       	sbci	r26, 0x00	; 0
    49f0:	e1 f7       	brne	.-8      	; 0x49ea <__stack+0x27eb>
    49f2:	00 c0       	rjmp	.+0      	; 0x49f4 <__stack+0x27f5>
    49f4:	00 00       	nop
		_delay_ms(5000);
		right_degrees(178);
    49f6:	82 eb       	ldi	r24, 0xB2	; 178
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	0e 94 49 04 	call	0x892	; 0x892 <right_degrees>
		velocity(180,180);
    49fe:	84 eb       	ldi	r24, 0xB4	; 180
    4a00:	64 eb       	ldi	r22, 0xB4	; 180
    4a02:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4a06:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		back_mm(110);
    4a0a:	8e e6       	ldi	r24, 0x6E	; 110
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
    4a12:	c7 e8       	ldi	r28, 0x87	; 135
		//we will adjust arm so that color sensor faces flag 3
		for (int i=135;i>=45;i-=5)
		{
			servo_2(i);
    4a14:	8c 2f       	mov	r24, r28
    4a16:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    4a1a:	8f ef       	ldi	r24, 0xFF	; 255
    4a1c:	9f e7       	ldi	r25, 0x7F	; 127
    4a1e:	a6 e1       	ldi	r26, 0x16	; 22
    4a20:	81 50       	subi	r24, 0x01	; 1
    4a22:	90 40       	sbci	r25, 0x00	; 0
    4a24:	a0 40       	sbci	r26, 0x00	; 0
    4a26:	e1 f7       	brne	.-8      	; 0x4a20 <__stack+0x2821>
    4a28:	00 c0       	rjmp	.+0      	; 0x4a2a <__stack+0x282b>
    4a2a:	00 00       	nop
    4a2c:	c5 50       	subi	r28, 0x05	; 5
		right_degrees(178);
		velocity(180,180);
		stop();
		back_mm(110);
		//we will adjust arm so that color sensor faces flag 3
		for (int i=135;i>=45;i-=5)
    4a2e:	c8 32       	cpi	r28, 0x28	; 40
    4a30:	89 f7       	brne	.-30     	; 0x4a14 <__stack+0x2815>
		{
			servo_2(i);
			_delay_ms(500);
		}
		flag3_color=check_color();
    4a32:	0e 94 1c 05 	call	0xa38	; 0xa38 <check_color>
    4a36:	80 93 23 02 	sts	0x0223, r24
		//flag3_color color is successfully read
		
		///TO FIND THE COLOR OF flag1_color
		//Since we are given that there are 3 colors-Red,Green and Blue of flag and since we now know the color of two of them,remaining color will be
		//color of flag 1
		if(flag3_color!='R' && flag2_color!='R')
    4a3a:	82 35       	cpi	r24, 0x52	; 82
    4a3c:	59 f0       	breq	.+22     	; 0x4a54 <__stack+0x2855>
    4a3e:	90 91 34 02 	lds	r25, 0x0234
    4a42:	92 35       	cpi	r25, 0x52	; 82
    4a44:	21 f0       	breq	.+8      	; 0x4a4e <__stack+0x284f>
		{
			flag1_color='R';
    4a46:	82 e5       	ldi	r24, 0x52	; 82
    4a48:	80 93 1a 02 	sts	0x021A, r24
    4a4c:	15 c0       	rjmp	.+42     	; 0x4a78 <__stack+0x2879>
		}
		else if(flag3_color!='G' && flag2_color!='G')
    4a4e:	87 34       	cpi	r24, 0x47	; 71
    4a50:	61 f0       	breq	.+24     	; 0x4a6a <__stack+0x286b>
    4a52:	04 c0       	rjmp	.+8      	; 0x4a5c <__stack+0x285d>
    4a54:	90 91 34 02 	lds	r25, 0x0234
    4a58:	97 34       	cpi	r25, 0x47	; 71
    4a5a:	21 f0       	breq	.+8      	; 0x4a64 <__stack+0x2865>
		{
			flag1_color='G';
    4a5c:	87 e4       	ldi	r24, 0x47	; 71
    4a5e:	80 93 1a 02 	sts	0x021A, r24
    4a62:	0a c0       	rjmp	.+20     	; 0x4a78 <__stack+0x2879>
		}
		else if(flag3_color!='B' && flag2_color!='B')
    4a64:	82 34       	cpi	r24, 0x42	; 66
    4a66:	41 f0       	breq	.+16     	; 0x4a78 <__stack+0x2879>
    4a68:	04 c0       	rjmp	.+8      	; 0x4a72 <__stack+0x2873>
    4a6a:	80 91 34 02 	lds	r24, 0x0234
    4a6e:	82 34       	cpi	r24, 0x42	; 66
    4a70:	19 f0       	breq	.+6      	; 0x4a78 <__stack+0x2879>
		{
			flag1_color='B';
    4a72:	82 e4       	ldi	r24, 0x42	; 66
    4a74:	80 93 1a 02 	sts	0x021A, r24
		//color of flag 1 known successfully

		//now we will below determine the correct location of bottommost Low CCL block out of A/B/C
		/////////////////////////////TO DETERMINE BOTTOM BLOCK"S POSITION OUT OF A/B/C
		
		if(flag1_color==bottom_HZ_waste_block_color && flag2_color!=bottom_HZ_waste_block_color && flag3_color!=bottom_HZ_waste_block_color)
    4a78:	80 91 1a 02 	lds	r24, 0x021A
    4a7c:	90 91 17 02 	lds	r25, 0x0217
    4a80:	89 17       	cp	r24, r25
    4a82:	59 f4       	brne	.+22     	; 0x4a9a <__stack+0x289b>
    4a84:	90 91 34 02 	lds	r25, 0x0234
    4a88:	89 17       	cp	r24, r25
    4a8a:	39 f0       	breq	.+14     	; 0x4a9a <__stack+0x289b>
    4a8c:	90 91 23 02 	lds	r25, 0x0223
    4a90:	89 17       	cp	r24, r25
    4a92:	19 f0       	breq	.+6      	; 0x4a9a <__stack+0x289b>
		bottom_position='A';
    4a94:	81 e4       	ldi	r24, 0x41	; 65
    4a96:	80 93 29 02 	sts	0x0229, r24
		if(flag2_color==bottom_HZ_waste_block_color && flag1_color!=bottom_HZ_waste_block_color && flag3_color!=bottom_HZ_waste_block_color)
    4a9a:	80 91 34 02 	lds	r24, 0x0234
    4a9e:	90 91 17 02 	lds	r25, 0x0217
    4aa2:	89 17       	cp	r24, r25
    4aa4:	59 f4       	brne	.+22     	; 0x4abc <__stack+0x28bd>
    4aa6:	90 91 1a 02 	lds	r25, 0x021A
    4aaa:	89 17       	cp	r24, r25
    4aac:	39 f0       	breq	.+14     	; 0x4abc <__stack+0x28bd>
    4aae:	90 91 23 02 	lds	r25, 0x0223
    4ab2:	89 17       	cp	r24, r25
    4ab4:	a1 f0       	breq	.+40     	; 0x4ade <__stack+0x28df>
		bottom_position='B';
    4ab6:	82 e4       	ldi	r24, 0x42	; 66
    4ab8:	80 93 29 02 	sts	0x0229, r24
		if(flag3_color==bottom_HZ_waste_block_color && flag2_color!=bottom_HZ_waste_block_color && flag1_color!=bottom_HZ_waste_block_color)
    4abc:	80 91 23 02 	lds	r24, 0x0223
    4ac0:	90 91 17 02 	lds	r25, 0x0217
    4ac4:	89 17       	cp	r24, r25
    4ac6:	59 f4       	brne	.+22     	; 0x4ade <__stack+0x28df>
    4ac8:	90 91 34 02 	lds	r25, 0x0234
    4acc:	89 17       	cp	r24, r25
    4ace:	39 f0       	breq	.+14     	; 0x4ade <__stack+0x28df>
    4ad0:	90 91 1a 02 	lds	r25, 0x021A
    4ad4:	89 17       	cp	r24, r25
    4ad6:	51 f0       	breq	.+20     	; 0x4aec <__stack+0x28ed>
		bottom_position='C';
    4ad8:	83 e4       	ldi	r24, 0x43	; 67
    4ada:	80 93 29 02 	sts	0x0229, r24


		/////////////////////////////////starting  coding for all 3 cases here/////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////CASE 1 BOTTOM BLOCK AT FLAG A///////////////////////////////////////////
if(bottom_HZ_waste_block_color==flag1_color)
    4ade:	90 91 17 02 	lds	r25, 0x0217
    4ae2:	80 91 1a 02 	lds	r24, 0x021A
    4ae6:	98 17       	cp	r25, r24
    4ae8:	09 f0       	breq	.+2      	; 0x4aec <__stack+0x28ed>
    4aea:	b4 c4       	rjmp	.+2408   	; 0x5454 <__stack+0x3255>
{
	if(flag2_color==top_HZ_waste_block_color)// TOP AT B,Bottom at A which means that mid block at C
    4aec:	80 91 10 02 	lds	r24, 0x0210
    4af0:	90 91 34 02 	lds	r25, 0x0234
    4af4:	98 17       	cp	r25, r24
    4af6:	09 f0       	breq	.+2      	; 0x4afa <__stack+0x28fb>
    4af8:	5c c2       	rjmp	.+1208   	; 0x4fb2 <__stack+0x2db3>
	{
		
		rotation_using_blackline_right();
    4afa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		//DROP THE BOX AT B
		drop_the_block();
    4afe:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(35);
    4b02:	83 e2       	ldi	r24, 0x23	; 35
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    4b0a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4b0e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(22);
    4b12:	86 e1       	ldi	r24, 0x16	; 22
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		turn_right();
    4b1a:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(190,180);
    4b1e:	8e eb       	ldi	r24, 0xBE	; 190
    4b20:	64 eb       	ldi	r22, 0xB4	; 180
    4b22:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4b26:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4b2a:	8f ef       	ldi	r24, 0xFF	; 255
    4b2c:	9f ef       	ldi	r25, 0xFF	; 255
    4b2e:	ac e2       	ldi	r26, 0x2C	; 44
    4b30:	81 50       	subi	r24, 0x01	; 1
    4b32:	90 40       	sbci	r25, 0x00	; 0
    4b34:	a0 40       	sbci	r26, 0x00	; 0
    4b36:	e1 f7       	brne	.-8      	; 0x4b30 <__stack+0x2931>
    4b38:	00 c0       	rjmp	.+0      	; 0x4b3a <__stack+0x293b>
    4b3a:	00 00       	nop
		_delay_ms(1000);
		blackline();
    4b3c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// pick the weight from weight B
		pick_top_weight_block();
    4b40:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		rotation_using_blackline_left();
    4b44:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4b48:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(23);
    4b4c:	87 e1       	ldi	r24, 0x17	; 23
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		velocity(190,180);
    4b54:	8e eb       	ldi	r24, 0xBE	; 190
    4b56:	64 eb       	ldi	r22, 0xB4	; 180
    4b58:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4b5c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4b60:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4b64:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		/// drop the weight box in conatiner
		drop_the_block();
    4b68:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    4b6c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4b70:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		pick_top_weight_block();
    4b74:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		rotation_using_blackline_right();
    4b78:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4b7c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4b80:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		/// drop the weight box in conatiner
		drop_the_block();
    4b84:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);
    4b88:	88 e1       	ldi	r24, 0x18	; 24
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    4b90:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4b94:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(23);
    4b98:	87 e1       	ldi	r24, 0x17	; 23
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		turn_left();
    4ba0:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(190,180);
    4ba4:	8e eb       	ldi	r24, 0xBE	; 190
    4ba6:	64 eb       	ldi	r22, 0xB4	; 180
    4ba8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4bac:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4bb0:	8f ef       	ldi	r24, 0xFF	; 255
    4bb2:	9f ef       	ldi	r25, 0xFF	; 255
    4bb4:	ac e2       	ldi	r26, 0x2C	; 44
    4bb6:	81 50       	subi	r24, 0x01	; 1
    4bb8:	90 40       	sbci	r25, 0x00	; 0
    4bba:	a0 40       	sbci	r26, 0x00	; 0
    4bbc:	e1 f7       	brne	.-8      	; 0x4bb6 <__stack+0x29b7>
    4bbe:	00 c0       	rjmp	.+0      	; 0x4bc0 <__stack+0x29c1>
    4bc0:	00 00       	nop
		_delay_ms(1000);
		blackline();
    4bc2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//BRIDGE CROSSED AND @ND RUN ON CITY AREA SIDE....AT NODE 'A' AND FACING TOWARDS HAZARDOUS WASTES
		// CROSSING THE BRIDGE
		// NOW WE AE IN CITY 1
		turn_left();
    4bc6:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(150,150);
    4bca:	86 e9       	ldi	r24, 0x96	; 150
    4bcc:	66 e9       	ldi	r22, 0x96	; 150
    4bce:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4bd2:	8f ef       	ldi	r24, 0xFF	; 255
    4bd4:	9f e3       	ldi	r25, 0x3F	; 63
    4bd6:	a2 e0       	ldi	r26, 0x02	; 2
    4bd8:	81 50       	subi	r24, 0x01	; 1
    4bda:	90 40       	sbci	r25, 0x00	; 0
    4bdc:	a0 40       	sbci	r26, 0x00	; 0
    4bde:	e1 f7       	brne	.-8      	; 0x4bd8 <__stack+0x29d9>
    4be0:	00 c0       	rjmp	.+0      	; 0x4be2 <__stack+0x29e3>
    4be2:	00 00       	nop
		_delay_ms(50);
		stop();
    4be4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4be8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		velocity(190,180);
    4bec:	8e eb       	ldi	r24, 0xBE	; 190
    4bee:	64 eb       	ldi	r22, 0xB4	; 180
    4bf0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(113);
    4bf4:	81 e7       	ldi	r24, 0x71	; 113
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    4bfc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4c00:	8f ef       	ldi	r24, 0xFF	; 255
    4c02:	9f ef       	ldi	r25, 0xFF	; 255
    4c04:	ac e2       	ldi	r26, 0x2C	; 44
    4c06:	81 50       	subi	r24, 0x01	; 1
    4c08:	90 40       	sbci	r25, 0x00	; 0
    4c0a:	a0 40       	sbci	r26, 0x00	; 0
    4c0c:	e1 f7       	brne	.-8      	; 0x4c06 <__stack+0x2a07>
    4c0e:	00 c0       	rjmp	.+0      	; 0x4c10 <__stack+0x2a11>
    4c10:	00 00       	nop
		_delay_ms(1000);
		velocity(190,180);
    4c12:	8e eb       	ldi	r24, 0xBE	; 190
    4c14:	64 eb       	ldi	r22, 0xB4	; 180
    4c16:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		left_degrees(88);
    4c1a:	88 e5       	ldi	r24, 0x58	; 88
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,180);
    4c22:	8e eb       	ldi	r24, 0xBE	; 190
    4c24:	64 eb       	ldi	r22, 0xB4	; 180
    4c26:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4c2a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4c2e:	8f ef       	ldi	r24, 0xFF	; 255
    4c30:	9f e7       	ldi	r25, 0x7F	; 127
    4c32:	a6 e1       	ldi	r26, 0x16	; 22
    4c34:	81 50       	subi	r24, 0x01	; 1
    4c36:	90 40       	sbci	r25, 0x00	; 0
    4c38:	a0 40       	sbci	r26, 0x00	; 0
    4c3a:	e1 f7       	brne	.-8      	; 0x4c34 <__stack+0x2a35>
    4c3c:	00 c0       	rjmp	.+0      	; 0x4c3e <__stack+0x2a3f>
    4c3e:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);//187
    4c40:	86 eb       	ldi	r24, 0xB6	; 182
    4c42:	64 eb       	ldi	r22, 0xB4	; 180
    4c44:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(83);//76
    4c48:	83 e5       	ldi	r24, 0x53	; 83
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		stop();
    4c50:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4c54:	8f ef       	ldi	r24, 0xFF	; 255
    4c56:	9f e7       	ldi	r25, 0x7F	; 127
    4c58:	a6 e1       	ldi	r26, 0x16	; 22
    4c5a:	81 50       	subi	r24, 0x01	; 1
    4c5c:	90 40       	sbci	r25, 0x00	; 0
    4c5e:	a0 40       	sbci	r26, 0x00	; 0
    4c60:	e1 f7       	brne	.-8      	; 0x4c5a <__stack+0x2a5b>
    4c62:	00 c0       	rjmp	.+0      	; 0x4c64 <__stack+0x2a65>
    4c64:	00 00       	nop
		_delay_ms(500);
		// PICK THE WEIGHT BOX FROM WEIGHT A
		pick_top_weight_block();
    4c66:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		forward_mm(24);
    4c6a:	88 e1       	ldi	r24, 0x18	; 24
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4c72:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4c76:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    4c7a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    4c7e:	8f ef       	ldi	r24, 0xFF	; 255
    4c80:	9f e7       	ldi	r25, 0x7F	; 127
    4c82:	a6 e1       	ldi	r26, 0x16	; 22
    4c84:	81 50       	subi	r24, 0x01	; 1
    4c86:	90 40       	sbci	r25, 0x00	; 0
    4c88:	a0 40       	sbci	r26, 0x00	; 0
    4c8a:	e1 f7       	brne	.-8      	; 0x4c84 <__stack+0x2a85>
    4c8c:	00 c0       	rjmp	.+0      	; 0x4c8e <__stack+0x2a8f>
    4c8e:	00 00       	nop
		_delay_ms(500);
		velocity(150,150);
    4c90:	86 e9       	ldi	r24, 0x96	; 150
    4c92:	66 e9       	ldi	r22, 0x96	; 150
    4c94:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(39);
    4c98:	87 e2       	ldi	r24, 0x27	; 39
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    4ca0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(3);
    4ca4:	83 e0       	ldi	r24, 0x03	; 3
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    4cac:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    4cb0:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);
    4cb4:	88 e1       	ldi	r24, 0x18	; 24
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4cbc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4cc0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		pick_top_weight_block();
    4cc4:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		forward_mm(24);
    4cc8:	88 e1       	ldi	r24, 0x18	; 24
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4cd0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4cd4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    4cd8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);
    4cdc:	88 e1       	ldi	r24, 0x18	; 24
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4ce4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4ce8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the wweight box in conntainer
		drop_the_block();
    4cec:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		turn_right();
    4cf0:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4cf4:	86 e9       	ldi	r24, 0x96	; 150
    4cf6:	66 e9       	ldi	r22, 0x96	; 150
    4cf8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4cfc:	8f ef       	ldi	r24, 0xFF	; 255
    4cfe:	9f e3       	ldi	r25, 0x3F	; 63
    4d00:	a2 e0       	ldi	r26, 0x02	; 2
    4d02:	81 50       	subi	r24, 0x01	; 1
    4d04:	90 40       	sbci	r25, 0x00	; 0
    4d06:	a0 40       	sbci	r26, 0x00	; 0
    4d08:	e1 f7       	brne	.-8      	; 0x4d02 <__stack+0x2b03>
    4d0a:	00 c0       	rjmp	.+0      	; 0x4d0c <__stack+0x2b0d>
    4d0c:	00 00       	nop
		_delay_ms(50);
		stop();
    4d0e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4d12:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    4d16:	88 e0       	ldi	r24, 0x08	; 8
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    4d1e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the middle box
		servo_2(135);
    4d22:	87 e8       	ldi	r24, 0x87	; 135
    4d24:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    4d28:	8f ef       	ldi	r24, 0xFF	; 255
    4d2a:	9f ef       	ldi	r25, 0xFF	; 255
    4d2c:	ac e2       	ldi	r26, 0x2C	; 44
    4d2e:	81 50       	subi	r24, 0x01	; 1
    4d30:	90 40       	sbci	r25, 0x00	; 0
    4d32:	a0 40       	sbci	r26, 0x00	; 0
    4d34:	e1 f7       	brne	.-8      	; 0x4d2e <__stack+0x2b2f>
    4d36:	00 c0       	rjmp	.+0      	; 0x4d38 <__stack+0x2b39>
    4d38:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    4d3a:	80 e0       	ldi	r24, 0x00	; 0
    4d3c:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4d40:	8f ef       	ldi	r24, 0xFF	; 255
    4d42:	9f ef       	ldi	r25, 0xFF	; 255
    4d44:	ac e2       	ldi	r26, 0x2C	; 44
    4d46:	81 50       	subi	r24, 0x01	; 1
    4d48:	90 40       	sbci	r25, 0x00	; 0
    4d4a:	a0 40       	sbci	r26, 0x00	; 0
    4d4c:	e1 f7       	brne	.-8      	; 0x4d46 <__stack+0x2b47>
    4d4e:	00 c0       	rjmp	.+0      	; 0x4d50 <__stack+0x2b51>
    4d50:	00 00       	nop
    4d52:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    4d54:	8c 2f       	mov	r24, r28
    4d56:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    4d5a:	8f ef       	ldi	r24, 0xFF	; 255
    4d5c:	9f ef       	ldi	r25, 0xFF	; 255
    4d5e:	ac e2       	ldi	r26, 0x2C	; 44
    4d60:	81 50       	subi	r24, 0x01	; 1
    4d62:	90 40       	sbci	r25, 0x00	; 0
    4d64:	a0 40       	sbci	r26, 0x00	; 0
    4d66:	e1 f7       	brne	.-8      	; 0x4d60 <__stack+0x2b61>
    4d68:	00 c0       	rjmp	.+0      	; 0x4d6a <__stack+0x2b6b>
    4d6a:	00 00       	nop
    4d6c:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the middle box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    4d6e:	cd 32       	cpi	r28, 0x2D	; 45
    4d70:	89 f7       	brne	.-30     	; 0x4d54 <__stack+0x2b55>
    4d72:	8f ef       	ldi	r24, 0xFF	; 255
    4d74:	9f ef       	ldi	r25, 0xFF	; 255
    4d76:	ac e2       	ldi	r26, 0x2C	; 44
    4d78:	81 50       	subi	r24, 0x01	; 1
    4d7a:	90 40       	sbci	r25, 0x00	; 0
    4d7c:	a0 40       	sbci	r26, 0x00	; 0
    4d7e:	e1 f7       	brne	.-8      	; 0x4d78 <__stack+0x2b79>
    4d80:	00 c0       	rjmp	.+0      	; 0x4d82 <__stack+0x2b83>
    4d82:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    4d84:	82 e7       	ldi	r24, 0x72	; 114
    4d86:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    4d8a:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4d8e:	86 e9       	ldi	r24, 0x96	; 150
    4d90:	66 e9       	ldi	r22, 0x96	; 150
    4d92:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4d96:	8f ef       	ldi	r24, 0xFF	; 255
    4d98:	9f e3       	ldi	r25, 0x3F	; 63
    4d9a:	a2 e0       	ldi	r26, 0x02	; 2
    4d9c:	81 50       	subi	r24, 0x01	; 1
    4d9e:	90 40       	sbci	r25, 0x00	; 0
    4da0:	a0 40       	sbci	r26, 0x00	; 0
    4da2:	e1 f7       	brne	.-8      	; 0x4d9c <__stack+0x2b9d>
    4da4:	00 c0       	rjmp	.+0      	; 0x4da6 <__stack+0x2ba7>
    4da6:	00 00       	nop
		_delay_ms(50);
		stop();
    4da8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    4dac:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4db0:	86 e9       	ldi	r24, 0x96	; 150
    4db2:	66 e9       	ldi	r22, 0x96	; 150
    4db4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4db8:	8f ef       	ldi	r24, 0xFF	; 255
    4dba:	9f e3       	ldi	r25, 0x3F	; 63
    4dbc:	a2 e0       	ldi	r26, 0x02	; 2
    4dbe:	81 50       	subi	r24, 0x01	; 1
    4dc0:	90 40       	sbci	r25, 0x00	; 0
    4dc2:	a0 40       	sbci	r26, 0x00	; 0
    4dc4:	e1 f7       	brne	.-8      	; 0x4dbe <__stack+0x2bbf>
    4dc6:	00 c0       	rjmp	.+0      	; 0x4dc8 <__stack+0x2bc9>
    4dc8:	00 00       	nop
		_delay_ms(50);
		stop();
    4dca:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4dce:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bring the arm in front of mid block
		//pick the mid block
		rotation_using_blackline_right();
    4dd2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4dd6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    4dda:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		velocity(95,90);
    4dde:	8f e5       	ldi	r24, 0x5F	; 95
    4de0:	6a e5       	ldi	r22, 0x5A	; 90
    4de2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4de6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4dea:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bridge crossed succesfully
		rotation_using_blackline_left();
    4dee:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4df2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4df6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4dfa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//drop the color box
		drop_the_block();
    4dfe:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    4e02:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4e06:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//pick wt block from weight C
		pick_top_weight_block();
    4e0a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		rotation_using_blackline_left();
    4e0e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4e12:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    4e16:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    4e1a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4e1e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		//DROP THE WEIGHT BOX IN CONTAINER
		drop_the_block();
    4e22:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    4e26:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4e2a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// pick the weight box from weight A
		pick_bottom_weight_block();
    4e2e:	0e 94 0f 09 	call	0x121e	; 0x121e <pick_bottom_weight_block>
		rotation_using_blackline_right();
    4e32:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4e36:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4e3a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		/// drop the weight box in container
		drop_the_block();
    4e3e:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_right();
    4e42:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4e46:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    4e4a:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    4e4e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//PICK THE WEIGHT BOX
		pick_bottom_weight_block();
    4e52:	0e 94 0f 09 	call	0x121e	; 0x121e <pick_bottom_weight_block>
		rotation_using_blackline_left();
    4e56:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4e5a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4e5e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4e62:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///3rd run for city area
		// CROSSING THE BRIDGE
		// NOW E AE IN CITY 1
		rotation_using_blackline_right();
    4e66:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4e6a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4e6e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    4e72:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);
    4e76:	88 e1       	ldi	r24, 0x18	; 24
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4e7e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4e82:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		pick_bottom_weight_block();
    4e86:	0e 94 0f 09 	call	0x121e	; 0x121e <pick_bottom_weight_block>
		forward_mm(24);
    4e8a:	88 e1       	ldi	r24, 0x18	; 24
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4e92:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4e96:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    4e9a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);
    4e9e:	88 e1       	ldi	r24, 0x18	; 24
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    4ea6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4eaa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the weight box in conntainer
		drop_the_block();
    4eae:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		turn_right();
    4eb2:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4eb6:	86 e9       	ldi	r24, 0x96	; 150
    4eb8:	66 e9       	ldi	r22, 0x96	; 150
    4eba:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4ebe:	8f ef       	ldi	r24, 0xFF	; 255
    4ec0:	9f e3       	ldi	r25, 0x3F	; 63
    4ec2:	a2 e0       	ldi	r26, 0x02	; 2
    4ec4:	81 50       	subi	r24, 0x01	; 1
    4ec6:	90 40       	sbci	r25, 0x00	; 0
    4ec8:	a0 40       	sbci	r26, 0x00	; 0
    4eca:	e1 f7       	brne	.-8      	; 0x4ec4 <__stack+0x2cc5>
    4ecc:	00 c0       	rjmp	.+0      	; 0x4ece <__stack+0x2ccf>
    4ece:	00 00       	nop
		_delay_ms(50);
		stop();
    4ed0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4ed4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    4ed8:	88 e0       	ldi	r24, 0x08	; 8
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    4ee0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the bottom box
		servo_2(135);
    4ee4:	87 e8       	ldi	r24, 0x87	; 135
    4ee6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    4eea:	8f ef       	ldi	r24, 0xFF	; 255
    4eec:	9f ef       	ldi	r25, 0xFF	; 255
    4eee:	ac e2       	ldi	r26, 0x2C	; 44
    4ef0:	81 50       	subi	r24, 0x01	; 1
    4ef2:	90 40       	sbci	r25, 0x00	; 0
    4ef4:	a0 40       	sbci	r26, 0x00	; 0
    4ef6:	e1 f7       	brne	.-8      	; 0x4ef0 <__stack+0x2cf1>
    4ef8:	00 c0       	rjmp	.+0      	; 0x4efa <__stack+0x2cfb>
    4efa:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    4f02:	8f ef       	ldi	r24, 0xFF	; 255
    4f04:	9f ef       	ldi	r25, 0xFF	; 255
    4f06:	ac e2       	ldi	r26, 0x2C	; 44
    4f08:	81 50       	subi	r24, 0x01	; 1
    4f0a:	90 40       	sbci	r25, 0x00	; 0
    4f0c:	a0 40       	sbci	r26, 0x00	; 0
    4f0e:	e1 f7       	brne	.-8      	; 0x4f08 <__stack+0x2d09>
    4f10:	00 c0       	rjmp	.+0      	; 0x4f12 <__stack+0x2d13>
    4f12:	00 00       	nop
    4f14:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    4f16:	8c 2f       	mov	r24, r28
    4f18:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    4f1c:	8f ef       	ldi	r24, 0xFF	; 255
    4f1e:	9f ef       	ldi	r25, 0xFF	; 255
    4f20:	ac e2       	ldi	r26, 0x2C	; 44
    4f22:	81 50       	subi	r24, 0x01	; 1
    4f24:	90 40       	sbci	r25, 0x00	; 0
    4f26:	a0 40       	sbci	r26, 0x00	; 0
    4f28:	e1 f7       	brne	.-8      	; 0x4f22 <__stack+0x2d23>
    4f2a:	00 c0       	rjmp	.+0      	; 0x4f2c <__stack+0x2d2d>
    4f2c:	00 00       	nop
    4f2e:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the bottom box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    4f30:	cd 32       	cpi	r28, 0x2D	; 45
    4f32:	89 f7       	brne	.-30     	; 0x4f16 <__stack+0x2d17>
    4f34:	8f ef       	ldi	r24, 0xFF	; 255
    4f36:	9f ef       	ldi	r25, 0xFF	; 255
    4f38:	ac e2       	ldi	r26, 0x2C	; 44
    4f3a:	81 50       	subi	r24, 0x01	; 1
    4f3c:	90 40       	sbci	r25, 0x00	; 0
    4f3e:	a0 40       	sbci	r26, 0x00	; 0
    4f40:	e1 f7       	brne	.-8      	; 0x4f3a <__stack+0x2d3b>
    4f42:	00 c0       	rjmp	.+0      	; 0x4f44 <__stack+0x2d45>
    4f44:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    4f46:	82 e7       	ldi	r24, 0x72	; 114
    4f48:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    4f4c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4f50:	86 e9       	ldi	r24, 0x96	; 150
    4f52:	66 e9       	ldi	r22, 0x96	; 150
    4f54:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4f58:	8f ef       	ldi	r24, 0xFF	; 255
    4f5a:	9f e3       	ldi	r25, 0x3F	; 63
    4f5c:	a2 e0       	ldi	r26, 0x02	; 2
    4f5e:	81 50       	subi	r24, 0x01	; 1
    4f60:	90 40       	sbci	r25, 0x00	; 0
    4f62:	a0 40       	sbci	r26, 0x00	; 0
    4f64:	e1 f7       	brne	.-8      	; 0x4f5e <__stack+0x2d5f>
    4f66:	00 c0       	rjmp	.+0      	; 0x4f68 <__stack+0x2d69>
    4f68:	00 00       	nop
		_delay_ms(50);
		stop();
    4f6a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    4f6e:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    4f72:	86 e9       	ldi	r24, 0x96	; 150
    4f74:	66 e9       	ldi	r22, 0x96	; 150
    4f76:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    4f7a:	8f ef       	ldi	r24, 0xFF	; 255
    4f7c:	9f e3       	ldi	r25, 0x3F	; 63
    4f7e:	a2 e0       	ldi	r26, 0x02	; 2
    4f80:	81 50       	subi	r24, 0x01	; 1
    4f82:	90 40       	sbci	r25, 0x00	; 0
    4f84:	a0 40       	sbci	r26, 0x00	; 0
    4f86:	e1 f7       	brne	.-8      	; 0x4f80 <__stack+0x2d81>
    4f88:	00 c0       	rjmp	.+0      	; 0x4f8a <__stack+0x2d8b>
    4f8a:	00 00       	nop
		_delay_ms(50);
		stop();
    4f8c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    4f90:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///// CROSS THE BRIDGE AGAIN
		rotation_using_blackline_right();
    4f94:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4f98:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    4f9c:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    4fa0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    4fa4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4fa8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// drop the bottom block
		drop_the_block();
    4fac:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
    4fb0:	51 c2       	rjmp	.+1186   	; 0x5454 <__stack+0x3255>
	}
	else if(flag3_color==top_HZ_waste_block_color) //top at C,Bottom at A which means mid block to be placed at B
    4fb2:	90 91 23 02 	lds	r25, 0x0223
    4fb6:	89 17       	cp	r24, r25
    4fb8:	09 f0       	breq	.+2      	; 0x4fbc <__stack+0x2dbd>
    4fba:	4c c2       	rjmp	.+1176   	; 0x5454 <__stack+0x3255>
	{
		
		rotation_using_blackline_left();
    4fbc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4fc0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4fc4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4fc8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    4fcc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4fd0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//DROP THE BOX AT C
		drop_the_block();
    4fd4:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_right();
    4fd8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    4fdc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// pick the weight from weight C
		pick_top_weight_block();
    4fe0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		rotation_using_blackline_left();
    4fe4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    4fe8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(23);
    4fec:	87 e1       	ldi	r24, 0x17	; 23
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		velocity(190,180);
    4ff4:	8e eb       	ldi	r24, 0xBE	; 190
    4ff6:	64 eb       	ldi	r22, 0xB4	; 180
    4ff8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    4ffc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5000:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5004:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		/// drop the weight box in conatiner
		drop_the_block();
    5008:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    500c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5010:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		pick_top_weight_block();
    5014:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		rotation_using_blackline_right();
    5018:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    501c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5020:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		/// drop the weight box in conatiner
		drop_the_block();
    5024:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);
    5028:	88 e1       	ldi	r24, 0x18	; 24
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    5030:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5034:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(23);
    5038:	87 e1       	ldi	r24, 0x17	; 23
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		turn_left();
    5040:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(190,180);
    5044:	8e eb       	ldi	r24, 0xBE	; 190
    5046:	64 eb       	ldi	r22, 0xB4	; 180
    5048:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    504c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5050:	8f ef       	ldi	r24, 0xFF	; 255
    5052:	9f ef       	ldi	r25, 0xFF	; 255
    5054:	ac e2       	ldi	r26, 0x2C	; 44
    5056:	81 50       	subi	r24, 0x01	; 1
    5058:	90 40       	sbci	r25, 0x00	; 0
    505a:	a0 40       	sbci	r26, 0x00	; 0
    505c:	e1 f7       	brne	.-8      	; 0x5056 <__stack+0x2e57>
    505e:	00 c0       	rjmp	.+0      	; 0x5060 <__stack+0x2e61>
    5060:	00 00       	nop
		_delay_ms(1000);
		blackline();
    5062:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//BRIDGE CROSSED AND @ND RUN ON CITY AREA SIDE....AT NODE 'A' AND FACING TOWARDS HAZARDOUS WASTES
		// CROSSING THE BRIDGE
		// NOW WE AE IN CITY 1
		turn_left();
    5066:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(150,150);
    506a:	86 e9       	ldi	r24, 0x96	; 150
    506c:	66 e9       	ldi	r22, 0x96	; 150
    506e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5072:	8f ef       	ldi	r24, 0xFF	; 255
    5074:	9f e3       	ldi	r25, 0x3F	; 63
    5076:	a2 e0       	ldi	r26, 0x02	; 2
    5078:	81 50       	subi	r24, 0x01	; 1
    507a:	90 40       	sbci	r25, 0x00	; 0
    507c:	a0 40       	sbci	r26, 0x00	; 0
    507e:	e1 f7       	brne	.-8      	; 0x5078 <__stack+0x2e79>
    5080:	00 c0       	rjmp	.+0      	; 0x5082 <__stack+0x2e83>
    5082:	00 00       	nop
		_delay_ms(50);
		stop();
    5084:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5088:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		velocity(190,180);
    508c:	8e eb       	ldi	r24, 0xBE	; 190
    508e:	64 eb       	ldi	r22, 0xB4	; 180
    5090:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(113);
    5094:	81 e7       	ldi	r24, 0x71	; 113
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    509c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    50a0:	8f ef       	ldi	r24, 0xFF	; 255
    50a2:	9f ef       	ldi	r25, 0xFF	; 255
    50a4:	ac e2       	ldi	r26, 0x2C	; 44
    50a6:	81 50       	subi	r24, 0x01	; 1
    50a8:	90 40       	sbci	r25, 0x00	; 0
    50aa:	a0 40       	sbci	r26, 0x00	; 0
    50ac:	e1 f7       	brne	.-8      	; 0x50a6 <__stack+0x2ea7>
    50ae:	00 c0       	rjmp	.+0      	; 0x50b0 <__stack+0x2eb1>
    50b0:	00 00       	nop
		_delay_ms(1000);
		velocity(190,180);
    50b2:	8e eb       	ldi	r24, 0xBE	; 190
    50b4:	64 eb       	ldi	r22, 0xB4	; 180
    50b6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		left_degrees(88);
    50ba:	88 e5       	ldi	r24, 0x58	; 88
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,180);
    50c2:	8e eb       	ldi	r24, 0xBE	; 190
    50c4:	64 eb       	ldi	r22, 0xB4	; 180
    50c6:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    50ca:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    50ce:	8f ef       	ldi	r24, 0xFF	; 255
    50d0:	9f e7       	ldi	r25, 0x7F	; 127
    50d2:	a6 e1       	ldi	r26, 0x16	; 22
    50d4:	81 50       	subi	r24, 0x01	; 1
    50d6:	90 40       	sbci	r25, 0x00	; 0
    50d8:	a0 40       	sbci	r26, 0x00	; 0
    50da:	e1 f7       	brne	.-8      	; 0x50d4 <__stack+0x2ed5>
    50dc:	00 c0       	rjmp	.+0      	; 0x50de <__stack+0x2edf>
    50de:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);//187
    50e0:	86 eb       	ldi	r24, 0xB6	; 182
    50e2:	64 eb       	ldi	r22, 0xB4	; 180
    50e4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(83);//76
    50e8:	83 e5       	ldi	r24, 0x53	; 83
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		stop();
    50f0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    50f4:	8f ef       	ldi	r24, 0xFF	; 255
    50f6:	9f e7       	ldi	r25, 0x7F	; 127
    50f8:	a6 e1       	ldi	r26, 0x16	; 22
    50fa:	81 50       	subi	r24, 0x01	; 1
    50fc:	90 40       	sbci	r25, 0x00	; 0
    50fe:	a0 40       	sbci	r26, 0x00	; 0
    5100:	e1 f7       	brne	.-8      	; 0x50fa <__stack+0x2efb>
    5102:	00 c0       	rjmp	.+0      	; 0x5104 <__stack+0x2f05>
    5104:	00 00       	nop
		_delay_ms(500);
		// PICK THE WEIGHT BOX FROM WEIGHT A
		pick_bottom_weight_block();
    5106:	0e 94 0f 09 	call	0x121e	; 0x121e <pick_bottom_weight_block>
		forward_mm(24);
    510a:	88 e1       	ldi	r24, 0x18	; 24
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5112:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5116:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    511a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    511e:	8f ef       	ldi	r24, 0xFF	; 255
    5120:	9f e7       	ldi	r25, 0x7F	; 127
    5122:	a6 e1       	ldi	r26, 0x16	; 22
    5124:	81 50       	subi	r24, 0x01	; 1
    5126:	90 40       	sbci	r25, 0x00	; 0
    5128:	a0 40       	sbci	r26, 0x00	; 0
    512a:	e1 f7       	brne	.-8      	; 0x5124 <__stack+0x2f25>
    512c:	00 c0       	rjmp	.+0      	; 0x512e <__stack+0x2f2f>
    512e:	00 00       	nop
		_delay_ms(500);
		velocity(150,150);
    5130:	86 e9       	ldi	r24, 0x96	; 150
    5132:	66 e9       	ldi	r22, 0x96	; 150
    5134:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(39);
    5138:	87 e2       	ldi	r24, 0x27	; 39
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    5140:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(3);
    5144:	83 e0       	ldi	r24, 0x03	; 3
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    514c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    5150:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);
    5154:	88 e1       	ldi	r24, 0x18	; 24
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    515c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5160:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		pick_top_weight_block();
    5164:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		forward_mm(24);
    5168:	88 e1       	ldi	r24, 0x18	; 24
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5170:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5174:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    5178:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);
    517c:	88 e1       	ldi	r24, 0x18	; 24
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5184:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5188:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the wweight box in conntainer
		drop_the_block();
    518c:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		turn_right();
    5190:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    5194:	86 e9       	ldi	r24, 0x96	; 150
    5196:	66 e9       	ldi	r22, 0x96	; 150
    5198:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    519c:	8f ef       	ldi	r24, 0xFF	; 255
    519e:	9f e3       	ldi	r25, 0x3F	; 63
    51a0:	a2 e0       	ldi	r26, 0x02	; 2
    51a2:	81 50       	subi	r24, 0x01	; 1
    51a4:	90 40       	sbci	r25, 0x00	; 0
    51a6:	a0 40       	sbci	r26, 0x00	; 0
    51a8:	e1 f7       	brne	.-8      	; 0x51a2 <__stack+0x2fa3>
    51aa:	00 c0       	rjmp	.+0      	; 0x51ac <__stack+0x2fad>
    51ac:	00 00       	nop
		_delay_ms(50);
		stop();
    51ae:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    51b2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    51b6:	88 e0       	ldi	r24, 0x08	; 8
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    51be:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the middle box
		servo_2(135);
    51c2:	87 e8       	ldi	r24, 0x87	; 135
    51c4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    51c8:	8f ef       	ldi	r24, 0xFF	; 255
    51ca:	9f ef       	ldi	r25, 0xFF	; 255
    51cc:	ac e2       	ldi	r26, 0x2C	; 44
    51ce:	81 50       	subi	r24, 0x01	; 1
    51d0:	90 40       	sbci	r25, 0x00	; 0
    51d2:	a0 40       	sbci	r26, 0x00	; 0
    51d4:	e1 f7       	brne	.-8      	; 0x51ce <__stack+0x2fcf>
    51d6:	00 c0       	rjmp	.+0      	; 0x51d8 <__stack+0x2fd9>
    51d8:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    51e0:	8f ef       	ldi	r24, 0xFF	; 255
    51e2:	9f ef       	ldi	r25, 0xFF	; 255
    51e4:	ac e2       	ldi	r26, 0x2C	; 44
    51e6:	81 50       	subi	r24, 0x01	; 1
    51e8:	90 40       	sbci	r25, 0x00	; 0
    51ea:	a0 40       	sbci	r26, 0x00	; 0
    51ec:	e1 f7       	brne	.-8      	; 0x51e6 <__stack+0x2fe7>
    51ee:	00 c0       	rjmp	.+0      	; 0x51f0 <__stack+0x2ff1>
    51f0:	00 00       	nop
    51f2:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    51f4:	8c 2f       	mov	r24, r28
    51f6:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    51fa:	8f ef       	ldi	r24, 0xFF	; 255
    51fc:	9f ef       	ldi	r25, 0xFF	; 255
    51fe:	ac e2       	ldi	r26, 0x2C	; 44
    5200:	81 50       	subi	r24, 0x01	; 1
    5202:	90 40       	sbci	r25, 0x00	; 0
    5204:	a0 40       	sbci	r26, 0x00	; 0
    5206:	e1 f7       	brne	.-8      	; 0x5200 <__stack+0x3001>
    5208:	00 c0       	rjmp	.+0      	; 0x520a <__stack+0x300b>
    520a:	00 00       	nop
    520c:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the middle box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    520e:	cd 32       	cpi	r28, 0x2D	; 45
    5210:	89 f7       	brne	.-30     	; 0x51f4 <__stack+0x2ff5>
    5212:	8f ef       	ldi	r24, 0xFF	; 255
    5214:	9f ef       	ldi	r25, 0xFF	; 255
    5216:	ac e2       	ldi	r26, 0x2C	; 44
    5218:	81 50       	subi	r24, 0x01	; 1
    521a:	90 40       	sbci	r25, 0x00	; 0
    521c:	a0 40       	sbci	r26, 0x00	; 0
    521e:	e1 f7       	brne	.-8      	; 0x5218 <__stack+0x3019>
    5220:	00 c0       	rjmp	.+0      	; 0x5222 <__stack+0x3023>
    5222:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5224:	82 e7       	ldi	r24, 0x72	; 114
    5226:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    522a:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    522e:	86 e9       	ldi	r24, 0x96	; 150
    5230:	66 e9       	ldi	r22, 0x96	; 150
    5232:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5236:	8f ef       	ldi	r24, 0xFF	; 255
    5238:	9f e3       	ldi	r25, 0x3F	; 63
    523a:	a2 e0       	ldi	r26, 0x02	; 2
    523c:	81 50       	subi	r24, 0x01	; 1
    523e:	90 40       	sbci	r25, 0x00	; 0
    5240:	a0 40       	sbci	r26, 0x00	; 0
    5242:	e1 f7       	brne	.-8      	; 0x523c <__stack+0x303d>
    5244:	00 c0       	rjmp	.+0      	; 0x5246 <__stack+0x3047>
    5246:	00 00       	nop
		_delay_ms(50);
		stop();
    5248:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    524c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    5250:	86 e9       	ldi	r24, 0x96	; 150
    5252:	66 e9       	ldi	r22, 0x96	; 150
    5254:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5258:	8f ef       	ldi	r24, 0xFF	; 255
    525a:	9f e3       	ldi	r25, 0x3F	; 63
    525c:	a2 e0       	ldi	r26, 0x02	; 2
    525e:	81 50       	subi	r24, 0x01	; 1
    5260:	90 40       	sbci	r25, 0x00	; 0
    5262:	a0 40       	sbci	r26, 0x00	; 0
    5264:	e1 f7       	brne	.-8      	; 0x525e <__stack+0x305f>
    5266:	00 c0       	rjmp	.+0      	; 0x5268 <__stack+0x3069>
    5268:	00 00       	nop
		_delay_ms(50);
		stop();
    526a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    526e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bring the arm in front of mid block
		//pick the mid block
		pick_top_weight_block();
    5272:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		rotation_using_blackline_right();
    5276:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    527a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    527e:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		velocity(95,90);
    5282:	8f e5       	ldi	r24, 0x5F	; 95
    5284:	6a e5       	ldi	r22, 0x5A	; 90
    5286:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    528a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    528e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bridge crossed succesfully
		forward();
    5292:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    5296:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//drop the color box
		drop_the_block();
    529a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    529e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    52a2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    52a6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    52aa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//pick wt block from weight B
		pick_top_weight_block();
    52ae:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pick_top_weight_block>
		rotation_using_blackline_left();
    52b2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    52b6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    52ba:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    52be:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    52c2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		//DROP THE WEIGHT BOX IN CONTAINER
		drop_the_block();
    52c6:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    52ca:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    52ce:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// pick the weight box from weight A
		pick_bottom_weight_block();
    52d2:	0e 94 0f 09 	call	0x121e	; 0x121e <pick_bottom_weight_block>
		rotation_using_blackline_right();
    52d6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    52da:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    52de:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		/// drop the weight box in container
		drop_the_block();
    52e2:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_right();
    52e6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    52ea:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    52ee:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    52f2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//PICK THE WEIGHT BOX
		pick_bottom_weight_block();
    52f6:	0e 94 0f 09 	call	0x121e	; 0x121e <pick_bottom_weight_block>
		rotation_using_blackline_left();
    52fa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    52fe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5302:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5306:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///3rd run for city area
		// CROSSING THE BRIDGE
		// NOW E AE IN CITY 1
		rotation_using_blackline_right();
    530a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    530e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5312:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    5316:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);
    531a:	88 e1       	ldi	r24, 0x18	; 24
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5322:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5326:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		pick_bottom_weight_block();
    532a:	0e 94 0f 09 	call	0x121e	; 0x121e <pick_bottom_weight_block>
		forward_mm(24);
    532e:	88 e1       	ldi	r24, 0x18	; 24
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5336:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    533a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    533e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);
    5342:	88 e1       	ldi	r24, 0x18	; 24
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    534a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    534e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the weight box in conntainer
		drop_the_block();
    5352:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		turn_right();
    5356:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    535a:	86 e9       	ldi	r24, 0x96	; 150
    535c:	66 e9       	ldi	r22, 0x96	; 150
    535e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5362:	8f ef       	ldi	r24, 0xFF	; 255
    5364:	9f e3       	ldi	r25, 0x3F	; 63
    5366:	a2 e0       	ldi	r26, 0x02	; 2
    5368:	81 50       	subi	r24, 0x01	; 1
    536a:	90 40       	sbci	r25, 0x00	; 0
    536c:	a0 40       	sbci	r26, 0x00	; 0
    536e:	e1 f7       	brne	.-8      	; 0x5368 <__stack+0x3169>
    5370:	00 c0       	rjmp	.+0      	; 0x5372 <__stack+0x3173>
    5372:	00 00       	nop
		_delay_ms(50);
		stop();
    5374:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5378:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    537c:	88 e0       	ldi	r24, 0x08	; 8
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    5384:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the bottom box
		servo_2(135);
    5388:	87 e8       	ldi	r24, 0x87	; 135
    538a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    538e:	8f ef       	ldi	r24, 0xFF	; 255
    5390:	9f ef       	ldi	r25, 0xFF	; 255
    5392:	ac e2       	ldi	r26, 0x2C	; 44
    5394:	81 50       	subi	r24, 0x01	; 1
    5396:	90 40       	sbci	r25, 0x00	; 0
    5398:	a0 40       	sbci	r26, 0x00	; 0
    539a:	e1 f7       	brne	.-8      	; 0x5394 <__stack+0x3195>
    539c:	00 c0       	rjmp	.+0      	; 0x539e <__stack+0x319f>
    539e:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    53a0:	80 e0       	ldi	r24, 0x00	; 0
    53a2:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    53a6:	8f ef       	ldi	r24, 0xFF	; 255
    53a8:	9f ef       	ldi	r25, 0xFF	; 255
    53aa:	ac e2       	ldi	r26, 0x2C	; 44
    53ac:	81 50       	subi	r24, 0x01	; 1
    53ae:	90 40       	sbci	r25, 0x00	; 0
    53b0:	a0 40       	sbci	r26, 0x00	; 0
    53b2:	e1 f7       	brne	.-8      	; 0x53ac <__stack+0x31ad>
    53b4:	00 c0       	rjmp	.+0      	; 0x53b6 <__stack+0x31b7>
    53b6:	00 00       	nop
    53b8:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    53ba:	8c 2f       	mov	r24, r28
    53bc:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    53c0:	8f ef       	ldi	r24, 0xFF	; 255
    53c2:	9f ef       	ldi	r25, 0xFF	; 255
    53c4:	ac e2       	ldi	r26, 0x2C	; 44
    53c6:	81 50       	subi	r24, 0x01	; 1
    53c8:	90 40       	sbci	r25, 0x00	; 0
    53ca:	a0 40       	sbci	r26, 0x00	; 0
    53cc:	e1 f7       	brne	.-8      	; 0x53c6 <__stack+0x31c7>
    53ce:	00 c0       	rjmp	.+0      	; 0x53d0 <__stack+0x31d1>
    53d0:	00 00       	nop
    53d2:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the bottom box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    53d4:	cd 32       	cpi	r28, 0x2D	; 45
    53d6:	89 f7       	brne	.-30     	; 0x53ba <__stack+0x31bb>
    53d8:	8f ef       	ldi	r24, 0xFF	; 255
    53da:	9f ef       	ldi	r25, 0xFF	; 255
    53dc:	ac e2       	ldi	r26, 0x2C	; 44
    53de:	81 50       	subi	r24, 0x01	; 1
    53e0:	90 40       	sbci	r25, 0x00	; 0
    53e2:	a0 40       	sbci	r26, 0x00	; 0
    53e4:	e1 f7       	brne	.-8      	; 0x53de <__stack+0x31df>
    53e6:	00 c0       	rjmp	.+0      	; 0x53e8 <__stack+0x31e9>
    53e8:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    53ea:	82 e7       	ldi	r24, 0x72	; 114
    53ec:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    53f0:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    53f4:	86 e9       	ldi	r24, 0x96	; 150
    53f6:	66 e9       	ldi	r22, 0x96	; 150
    53f8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    53fc:	8f ef       	ldi	r24, 0xFF	; 255
    53fe:	9f e3       	ldi	r25, 0x3F	; 63
    5400:	a2 e0       	ldi	r26, 0x02	; 2
    5402:	81 50       	subi	r24, 0x01	; 1
    5404:	90 40       	sbci	r25, 0x00	; 0
    5406:	a0 40       	sbci	r26, 0x00	; 0
    5408:	e1 f7       	brne	.-8      	; 0x5402 <__stack+0x3203>
    540a:	00 c0       	rjmp	.+0      	; 0x540c <__stack+0x320d>
    540c:	00 00       	nop
		_delay_ms(50);
		stop();
    540e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    5412:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    5416:	86 e9       	ldi	r24, 0x96	; 150
    5418:	66 e9       	ldi	r22, 0x96	; 150
    541a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    541e:	8f ef       	ldi	r24, 0xFF	; 255
    5420:	9f e3       	ldi	r25, 0x3F	; 63
    5422:	a2 e0       	ldi	r26, 0x02	; 2
    5424:	81 50       	subi	r24, 0x01	; 1
    5426:	90 40       	sbci	r25, 0x00	; 0
    5428:	a0 40       	sbci	r26, 0x00	; 0
    542a:	e1 f7       	brne	.-8      	; 0x5424 <__stack+0x3225>
    542c:	00 c0       	rjmp	.+0      	; 0x542e <__stack+0x322f>
    542e:	00 00       	nop
		_delay_ms(50);
		stop();
    5430:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5434:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///// CROSS THE BRIDGE AGAIN
		rotation_using_blackline_right();
    5438:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    543c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    5440:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    5444:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    5448:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    544c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// drop the bottom block
		drop_the_block();
    5450:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
	}
}
//////////////////////////////////////////////CASE 2 BOTTOM AT B///////////////////////////////////////////////////////
if(bottom_HZ_waste_block_color==flag2_color)
    5454:	90 91 17 02 	lds	r25, 0x0217
    5458:	80 91 34 02 	lds	r24, 0x0234
    545c:	98 17       	cp	r25, r24
    545e:	11 f0       	breq	.+4      	; 0x5464 <__stack+0x3265>
    5460:	0c 94 63 33 	jmp	0x66c6	; 0x66c6 <__stack+0x44c7>
{
	
	if(flag1_color==top_HZ_waste_block_color)
    5464:	80 91 10 02 	lds	r24, 0x0210
    5468:	90 91 1a 02 	lds	r25, 0x021A
    546c:	98 17       	cp	r25, r24
    546e:	09 f0       	breq	.+2      	; 0x5472 <__stack+0x3273>
    5470:	75 c4       	rjmp	.+2282   	; 0x5d5c <__stack+0x3b5d>
	{
		rotation_using_blackline_left();
    5472:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5476:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    547a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    547e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(24);
    5482:	88 e1       	ldi	r24, 0x18	; 24
    5484:	90 e0       	ldi	r25, 0x00	; 0
    5486:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    548a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    548e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5492:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//DROP THE BOX AT A
		rotation_using_blackline_right();
    5496:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    549a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		left_degrees(88);
    549e:	88 e5       	ldi	r24, 0x58	; 88
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		stop();
    54a6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		// pick the weight box from weight a
		servo_2(155);
    54aa:	8b e9       	ldi	r24, 0x9B	; 155
    54ac:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    54b0:	8f ef       	ldi	r24, 0xFF	; 255
    54b2:	9f ef       	ldi	r25, 0xFF	; 255
    54b4:	ac e2       	ldi	r26, 0x2C	; 44
    54b6:	81 50       	subi	r24, 0x01	; 1
    54b8:	90 40       	sbci	r25, 0x00	; 0
    54ba:	a0 40       	sbci	r26, 0x00	; 0
    54bc:	e1 f7       	brne	.-8      	; 0x54b6 <__stack+0x32b7>
    54be:	00 c0       	rjmp	.+0      	; 0x54c0 <__stack+0x32c1>
    54c0:	00 00       	nop
    54c2:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{
			servo_1(i);
    54c4:	8c 2f       	mov	r24, r28
    54c6:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    54ca:	8f ef       	ldi	r24, 0xFF	; 255
    54cc:	9f ef       	ldi	r25, 0xFF	; 255
    54ce:	a8 e0       	ldi	r26, 0x08	; 8
    54d0:	81 50       	subi	r24, 0x01	; 1
    54d2:	90 40       	sbci	r25, 0x00	; 0
    54d4:	a0 40       	sbci	r26, 0x00	; 0
    54d6:	e1 f7       	brne	.-8      	; 0x54d0 <__stack+0x32d1>
    54d8:	00 c0       	rjmp	.+0      	; 0x54da <__stack+0x32db>
    54da:	00 00       	nop
    54dc:	ce 5f       	subi	r28, 0xFE	; 254
		left_degrees(88);
		stop();
		// pick the weight box from weight a
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    54de:	c8 33       	cpi	r28, 0x38	; 56
    54e0:	89 f7       	brne	.-30     	; 0x54c4 <__stack+0x32c5>
		{
			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    54e2:	83 e8       	ldi	r24, 0x83	; 131
    54e4:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    54e8:	8f ef       	ldi	r24, 0xFF	; 255
    54ea:	9f ef       	ldi	r25, 0xFF	; 255
    54ec:	a9 e5       	ldi	r26, 0x59	; 89
    54ee:	81 50       	subi	r24, 0x01	; 1
    54f0:	90 40       	sbci	r25, 0x00	; 0
    54f2:	a0 40       	sbci	r26, 0x00	; 0
    54f4:	e1 f7       	brne	.-8      	; 0x54ee <__stack+0x32ef>
    54f6:	00 c0       	rjmp	.+0      	; 0x54f8 <__stack+0x32f9>
    54f8:	00 00       	nop
		_delay_ms(2000);
		rotation_using_blackline_right();
    54fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    54fe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    5502:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		drop_the_block();
    5506:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_right();
    550a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    550e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(24);
    5512:	88 e1       	ldi	r24, 0x18	; 24
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    551a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// pick the weight from weight B
		servo_2(155);
    551e:	8b e9       	ldi	r24, 0x9B	; 155
    5520:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5524:	8f ef       	ldi	r24, 0xFF	; 255
    5526:	9f ef       	ldi	r25, 0xFF	; 255
    5528:	ac e2       	ldi	r26, 0x2C	; 44
    552a:	81 50       	subi	r24, 0x01	; 1
    552c:	90 40       	sbci	r25, 0x00	; 0
    552e:	a0 40       	sbci	r26, 0x00	; 0
    5530:	e1 f7       	brne	.-8      	; 0x552a <__stack+0x332b>
    5532:	00 c0       	rjmp	.+0      	; 0x5534 <__stack+0x3335>
    5534:	00 00       	nop
    5536:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{
			servo_1(i);
    5538:	8c 2f       	mov	r24, r28
    553a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    553e:	8f ef       	ldi	r24, 0xFF	; 255
    5540:	9f ef       	ldi	r25, 0xFF	; 255
    5542:	a8 e0       	ldi	r26, 0x08	; 8
    5544:	81 50       	subi	r24, 0x01	; 1
    5546:	90 40       	sbci	r25, 0x00	; 0
    5548:	a0 40       	sbci	r26, 0x00	; 0
    554a:	e1 f7       	brne	.-8      	; 0x5544 <__stack+0x3345>
    554c:	00 c0       	rjmp	.+0      	; 0x554e <__stack+0x334f>
    554e:	00 00       	nop
    5550:	ce 5f       	subi	r28, 0xFE	; 254
		forward_mm(24);
		blackline();
		/// pick the weight from weight B
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    5552:	c8 33       	cpi	r28, 0x38	; 56
    5554:	89 f7       	brne	.-30     	; 0x5538 <__stack+0x3339>
		{
			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    5556:	83 e8       	ldi	r24, 0x83	; 131
    5558:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    555c:	8f ef       	ldi	r24, 0xFF	; 255
    555e:	9f ef       	ldi	r25, 0xFF	; 255
    5560:	a9 e5       	ldi	r26, 0x59	; 89
    5562:	81 50       	subi	r24, 0x01	; 1
    5564:	90 40       	sbci	r25, 0x00	; 0
    5566:	a0 40       	sbci	r26, 0x00	; 0
    5568:	e1 f7       	brne	.-8      	; 0x5562 <__stack+0x3363>
    556a:	00 c0       	rjmp	.+0      	; 0x556c <__stack+0x336d>
    556c:	00 00       	nop
		_delay_ms(2000);
		rotation_using_blackline_left();
    556e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5572:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(23);// to be caliberated
    5576:	87 e1       	ldi	r24, 0x17	; 23
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		velocity(190,180);
    557e:	8e eb       	ldi	r24, 0xBE	; 190
    5580:	64 eb       	ldi	r22, 0xB4	; 180
    5582:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    5586:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    558a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    558e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		/// drop the weight box in conatiner
		drop_the_block();////////////////////////////////
    5592:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		
		rotation_using_blackline_right();
    5596:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    559a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    559e:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		rotation_using_blackline_left();
    55a2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    55a6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//BRIDGE CROSSED AND @ND RUN ON CITY AREA SIDE....AT NODE 'A' AND FACING TOWARDS HAZARDOUS WASTES
		// CROSSING THE BRIDGE
		// NOW E AE IN CITY 1
		turn_left();
    55aa:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(150,150);
    55ae:	86 e9       	ldi	r24, 0x96	; 150
    55b0:	66 e9       	ldi	r22, 0x96	; 150
    55b2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    55b6:	8f ef       	ldi	r24, 0xFF	; 255
    55b8:	9f e3       	ldi	r25, 0x3F	; 63
    55ba:	a2 e0       	ldi	r26, 0x02	; 2
    55bc:	81 50       	subi	r24, 0x01	; 1
    55be:	90 40       	sbci	r25, 0x00	; 0
    55c0:	a0 40       	sbci	r26, 0x00	; 0
    55c2:	e1 f7       	brne	.-8      	; 0x55bc <__stack+0x33bd>
    55c4:	00 c0       	rjmp	.+0      	; 0x55c6 <__stack+0x33c7>
    55c6:	00 00       	nop
		_delay_ms(50);
		stop();
    55c8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    55cc:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		velocity(190,180);
    55d0:	8e eb       	ldi	r24, 0xBE	; 190
    55d2:	64 eb       	ldi	r22, 0xB4	; 180
    55d4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(113);
    55d8:	81 e7       	ldi	r24, 0x71	; 113
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    55e0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    55e4:	8f ef       	ldi	r24, 0xFF	; 255
    55e6:	9f ef       	ldi	r25, 0xFF	; 255
    55e8:	ac e2       	ldi	r26, 0x2C	; 44
    55ea:	81 50       	subi	r24, 0x01	; 1
    55ec:	90 40       	sbci	r25, 0x00	; 0
    55ee:	a0 40       	sbci	r26, 0x00	; 0
    55f0:	e1 f7       	brne	.-8      	; 0x55ea <__stack+0x33eb>
    55f2:	00 c0       	rjmp	.+0      	; 0x55f4 <__stack+0x33f5>
    55f4:	00 00       	nop
		_delay_ms(1000);
		velocity(190,180);
    55f6:	8e eb       	ldi	r24, 0xBE	; 190
    55f8:	64 eb       	ldi	r22, 0xB4	; 180
    55fa:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		left_degrees(88);
    55fe:	88 e5       	ldi	r24, 0x58	; 88
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,180);
    5606:	8e eb       	ldi	r24, 0xBE	; 190
    5608:	64 eb       	ldi	r22, 0xB4	; 180
    560a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    560e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5612:	8f ef       	ldi	r24, 0xFF	; 255
    5614:	9f e7       	ldi	r25, 0x7F	; 127
    5616:	a6 e1       	ldi	r26, 0x16	; 22
    5618:	81 50       	subi	r24, 0x01	; 1
    561a:	90 40       	sbci	r25, 0x00	; 0
    561c:	a0 40       	sbci	r26, 0x00	; 0
    561e:	e1 f7       	brne	.-8      	; 0x5618 <__stack+0x3419>
    5620:	00 c0       	rjmp	.+0      	; 0x5622 <__stack+0x3423>
    5622:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);//187
    5624:	86 eb       	ldi	r24, 0xB6	; 182
    5626:	64 eb       	ldi	r22, 0xB4	; 180
    5628:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(83);//76
    562c:	83 e5       	ldi	r24, 0x53	; 83
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		stop();
    5634:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5638:	8f ef       	ldi	r24, 0xFF	; 255
    563a:	9f e7       	ldi	r25, 0x7F	; 127
    563c:	a6 e1       	ldi	r26, 0x16	; 22
    563e:	81 50       	subi	r24, 0x01	; 1
    5640:	90 40       	sbci	r25, 0x00	; 0
    5642:	a0 40       	sbci	r26, 0x00	; 0
    5644:	e1 f7       	brne	.-8      	; 0x563e <__stack+0x343f>
    5646:	00 c0       	rjmp	.+0      	; 0x5648 <__stack+0x3449>
    5648:	00 00       	nop
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
    564a:	8b e9       	ldi	r24, 0x9B	; 155
    564c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5650:	8f ef       	ldi	r24, 0xFF	; 255
    5652:	9f ef       	ldi	r25, 0xFF	; 255
    5654:	ac e2       	ldi	r26, 0x2C	; 44
    5656:	81 50       	subi	r24, 0x01	; 1
    5658:	90 40       	sbci	r25, 0x00	; 0
    565a:	a0 40       	sbci	r26, 0x00	; 0
    565c:	e1 f7       	brne	.-8      	; 0x5656 <__stack+0x3457>
    565e:	00 c0       	rjmp	.+0      	; 0x5660 <__stack+0x3461>
    5660:	00 00       	nop
    5662:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    5664:	8c 2f       	mov	r24, r28
    5666:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    566a:	8f ef       	ldi	r24, 0xFF	; 255
    566c:	9f ef       	ldi	r25, 0xFF	; 255
    566e:	a8 e0       	ldi	r26, 0x08	; 8
    5670:	81 50       	subi	r24, 0x01	; 1
    5672:	90 40       	sbci	r25, 0x00	; 0
    5674:	a0 40       	sbci	r26, 0x00	; 0
    5676:	e1 f7       	brne	.-8      	; 0x5670 <__stack+0x3471>
    5678:	00 c0       	rjmp	.+0      	; 0x567a <__stack+0x347b>
    567a:	00 00       	nop
    567c:	ce 5f       	subi	r28, 0xFE	; 254
		stop();
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    567e:	c8 33       	cpi	r28, 0x38	; 56
    5680:	89 f7       	brne	.-30     	; 0x5664 <__stack+0x3465>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    5682:	83 e8       	ldi	r24, 0x83	; 131
    5684:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5688:	8f ef       	ldi	r24, 0xFF	; 255
    568a:	9f ef       	ldi	r25, 0xFF	; 255
    568c:	a9 e5       	ldi	r26, 0x59	; 89
    568e:	81 50       	subi	r24, 0x01	; 1
    5690:	90 40       	sbci	r25, 0x00	; 0
    5692:	a0 40       	sbci	r26, 0x00	; 0
    5694:	e1 f7       	brne	.-8      	; 0x568e <__stack+0x348f>
    5696:	00 c0       	rjmp	.+0      	; 0x5698 <__stack+0x3499>
    5698:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    569a:	88 e1       	ldi	r24, 0x18	; 24
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    56a2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    56a6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    56aa:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    56ae:	8f ef       	ldi	r24, 0xFF	; 255
    56b0:	9f e7       	ldi	r25, 0x7F	; 127
    56b2:	a6 e1       	ldi	r26, 0x16	; 22
    56b4:	81 50       	subi	r24, 0x01	; 1
    56b6:	90 40       	sbci	r25, 0x00	; 0
    56b8:	a0 40       	sbci	r26, 0x00	; 0
    56ba:	e1 f7       	brne	.-8      	; 0x56b4 <__stack+0x34b5>
    56bc:	00 c0       	rjmp	.+0      	; 0x56be <__stack+0x34bf>
    56be:	00 00       	nop
		_delay_ms(500);
		velocity(150,150);
    56c0:	86 e9       	ldi	r24, 0x96	; 150
    56c2:	66 e9       	ldi	r22, 0x96	; 150
    56c4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(39);
    56c8:	87 e2       	ldi	r24, 0x27	; 39
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    56d0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(3);
    56d4:	83 e0       	ldi	r24, 0x03	; 3
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    56dc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    56e0:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);// to be caliberated
    56e4:	88 e1       	ldi	r24, 0x18	; 24
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    56ec:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    56f0:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		servo_2(155);
    56f4:	8b e9       	ldi	r24, 0x9B	; 155
    56f6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    56fa:	8f ef       	ldi	r24, 0xFF	; 255
    56fc:	9f ef       	ldi	r25, 0xFF	; 255
    56fe:	ac e2       	ldi	r26, 0x2C	; 44
    5700:	81 50       	subi	r24, 0x01	; 1
    5702:	90 40       	sbci	r25, 0x00	; 0
    5704:	a0 40       	sbci	r26, 0x00	; 0
    5706:	e1 f7       	brne	.-8      	; 0x5700 <__stack+0x3501>
    5708:	00 c0       	rjmp	.+0      	; 0x570a <__stack+0x350b>
    570a:	00 00       	nop
    570c:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    570e:	8c 2f       	mov	r24, r28
    5710:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5714:	8f ef       	ldi	r24, 0xFF	; 255
    5716:	9f ef       	ldi	r25, 0xFF	; 255
    5718:	a8 e0       	ldi	r26, 0x08	; 8
    571a:	81 50       	subi	r24, 0x01	; 1
    571c:	90 40       	sbci	r25, 0x00	; 0
    571e:	a0 40       	sbci	r26, 0x00	; 0
    5720:	e1 f7       	brne	.-8      	; 0x571a <__stack+0x351b>
    5722:	00 c0       	rjmp	.+0      	; 0x5724 <__stack+0x3525>
    5724:	00 00       	nop
    5726:	ce 5f       	subi	r28, 0xFE	; 254
		rotation_using_blackline_left();
		blackline();
		// pick the weight box from weight b
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    5728:	c8 33       	cpi	r28, 0x38	; 56
    572a:	89 f7       	brne	.-30     	; 0x570e <__stack+0x350f>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    572c:	83 e8       	ldi	r24, 0x83	; 131
    572e:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5732:	8f ef       	ldi	r24, 0xFF	; 255
    5734:	9f ef       	ldi	r25, 0xFF	; 255
    5736:	a9 e5       	ldi	r26, 0x59	; 89
    5738:	81 50       	subi	r24, 0x01	; 1
    573a:	90 40       	sbci	r25, 0x00	; 0
    573c:	a0 40       	sbci	r26, 0x00	; 0
    573e:	e1 f7       	brne	.-8      	; 0x5738 <__stack+0x3539>
    5740:	00 c0       	rjmp	.+0      	; 0x5742 <__stack+0x3543>
    5742:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    5744:	88 e1       	ldi	r24, 0x18	; 24
    5746:	90 e0       	ldi	r25, 0x00	; 0
    5748:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    574c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5750:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    5754:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);// to be caliberated
    5758:	88 e1       	ldi	r24, 0x18	; 24
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5760:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5764:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the wweight box in conntainer
		drop_the_block();
    5768:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		turn_right();
    576c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    5770:	86 e9       	ldi	r24, 0x96	; 150
    5772:	66 e9       	ldi	r22, 0x96	; 150
    5774:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5778:	8f ef       	ldi	r24, 0xFF	; 255
    577a:	9f e3       	ldi	r25, 0x3F	; 63
    577c:	a2 e0       	ldi	r26, 0x02	; 2
    577e:	81 50       	subi	r24, 0x01	; 1
    5780:	90 40       	sbci	r25, 0x00	; 0
    5782:	a0 40       	sbci	r26, 0x00	; 0
    5784:	e1 f7       	brne	.-8      	; 0x577e <__stack+0x357f>
    5786:	00 c0       	rjmp	.+0      	; 0x5788 <__stack+0x3589>
    5788:	00 00       	nop
		_delay_ms(50);
		stop();
    578a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    578e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    5792:	88 e0       	ldi	r24, 0x08	; 8
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    579a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the middle box
		servo_2(135);
    579e:	87 e8       	ldi	r24, 0x87	; 135
    57a0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    57a4:	8f ef       	ldi	r24, 0xFF	; 255
    57a6:	9f ef       	ldi	r25, 0xFF	; 255
    57a8:	ac e2       	ldi	r26, 0x2C	; 44
    57aa:	81 50       	subi	r24, 0x01	; 1
    57ac:	90 40       	sbci	r25, 0x00	; 0
    57ae:	a0 40       	sbci	r26, 0x00	; 0
    57b0:	e1 f7       	brne	.-8      	; 0x57aa <__stack+0x35ab>
    57b2:	00 c0       	rjmp	.+0      	; 0x57b4 <__stack+0x35b5>
    57b4:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    57b6:	80 e0       	ldi	r24, 0x00	; 0
    57b8:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    57bc:	8f ef       	ldi	r24, 0xFF	; 255
    57be:	9f ef       	ldi	r25, 0xFF	; 255
    57c0:	ac e2       	ldi	r26, 0x2C	; 44
    57c2:	81 50       	subi	r24, 0x01	; 1
    57c4:	90 40       	sbci	r25, 0x00	; 0
    57c6:	a0 40       	sbci	r26, 0x00	; 0
    57c8:	e1 f7       	brne	.-8      	; 0x57c2 <__stack+0x35c3>
    57ca:	00 c0       	rjmp	.+0      	; 0x57cc <__stack+0x35cd>
    57cc:	00 00       	nop
    57ce:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    57d0:	8c 2f       	mov	r24, r28
    57d2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    57d6:	8f ef       	ldi	r24, 0xFF	; 255
    57d8:	9f ef       	ldi	r25, 0xFF	; 255
    57da:	ac e2       	ldi	r26, 0x2C	; 44
    57dc:	81 50       	subi	r24, 0x01	; 1
    57de:	90 40       	sbci	r25, 0x00	; 0
    57e0:	a0 40       	sbci	r26, 0x00	; 0
    57e2:	e1 f7       	brne	.-8      	; 0x57dc <__stack+0x35dd>
    57e4:	00 c0       	rjmp	.+0      	; 0x57e6 <__stack+0x35e7>
    57e6:	00 00       	nop
    57e8:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the middle box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    57ea:	cd 32       	cpi	r28, 0x2D	; 45
    57ec:	89 f7       	brne	.-30     	; 0x57d0 <__stack+0x35d1>
    57ee:	8f ef       	ldi	r24, 0xFF	; 255
    57f0:	9f ef       	ldi	r25, 0xFF	; 255
    57f2:	ac e2       	ldi	r26, 0x2C	; 44
    57f4:	81 50       	subi	r24, 0x01	; 1
    57f6:	90 40       	sbci	r25, 0x00	; 0
    57f8:	a0 40       	sbci	r26, 0x00	; 0
    57fa:	e1 f7       	brne	.-8      	; 0x57f4 <__stack+0x35f5>
    57fc:	00 c0       	rjmp	.+0      	; 0x57fe <__stack+0x35ff>
    57fe:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5800:	82 e7       	ldi	r24, 0x72	; 114
    5802:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    5806:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    580a:	86 e9       	ldi	r24, 0x96	; 150
    580c:	66 e9       	ldi	r22, 0x96	; 150
    580e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5812:	8f ef       	ldi	r24, 0xFF	; 255
    5814:	9f e3       	ldi	r25, 0x3F	; 63
    5816:	a2 e0       	ldi	r26, 0x02	; 2
    5818:	81 50       	subi	r24, 0x01	; 1
    581a:	90 40       	sbci	r25, 0x00	; 0
    581c:	a0 40       	sbci	r26, 0x00	; 0
    581e:	e1 f7       	brne	.-8      	; 0x5818 <__stack+0x3619>
    5820:	00 c0       	rjmp	.+0      	; 0x5822 <__stack+0x3623>
    5822:	00 00       	nop
		_delay_ms(50);
		stop();
    5824:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    5828:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    582c:	86 e9       	ldi	r24, 0x96	; 150
    582e:	66 e9       	ldi	r22, 0x96	; 150
    5830:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5834:	8f ef       	ldi	r24, 0xFF	; 255
    5836:	9f e3       	ldi	r25, 0x3F	; 63
    5838:	a2 e0       	ldi	r26, 0x02	; 2
    583a:	81 50       	subi	r24, 0x01	; 1
    583c:	90 40       	sbci	r25, 0x00	; 0
    583e:	a0 40       	sbci	r26, 0x00	; 0
    5840:	e1 f7       	brne	.-8      	; 0x583a <__stack+0x363b>
    5842:	00 c0       	rjmp	.+0      	; 0x5844 <__stack+0x3645>
    5844:	00 00       	nop
		_delay_ms(50);
		stop();
    5846:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    584a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bring the arm in front of mid block
		//pick the mid block
		rotation_using_blackline_right();
    584e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5852:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    5856:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		velocity(95,90);
    585a:	8f e5       	ldi	r24, 0x5F	; 95
    585c:	6a e5       	ldi	r22, 0x5A	; 90
    585e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    5862:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5866:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bridge crossed succesfully
		rotation_using_blackline_left();
    586a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    586e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5872:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5876:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//drop the color box
		drop_the_block();
    587a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    587e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5882:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5886:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    588a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// PICK THE WEIGHT BOX FROM WEIGHT B
		servo_2(135);
    588e:	87 e8       	ldi	r24, 0x87	; 135
    5890:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5894:	8f ef       	ldi	r24, 0xFF	; 255
    5896:	9f ef       	ldi	r25, 0xFF	; 255
    5898:	ac e2       	ldi	r26, 0x2C	; 44
    589a:	81 50       	subi	r24, 0x01	; 1
    589c:	90 40       	sbci	r25, 0x00	; 0
    589e:	a0 40       	sbci	r26, 0x00	; 0
    58a0:	e1 f7       	brne	.-8      	; 0x589a <__stack+0x369b>
    58a2:	00 c0       	rjmp	.+0      	; 0x58a4 <__stack+0x36a5>
    58a4:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    58ac:	8f ef       	ldi	r24, 0xFF	; 255
    58ae:	9f ef       	ldi	r25, 0xFF	; 255
    58b0:	ac e2       	ldi	r26, 0x2C	; 44
    58b2:	81 50       	subi	r24, 0x01	; 1
    58b4:	90 40       	sbci	r25, 0x00	; 0
    58b6:	a0 40       	sbci	r26, 0x00	; 0
    58b8:	e1 f7       	brne	.-8      	; 0x58b2 <__stack+0x36b3>
    58ba:	00 c0       	rjmp	.+0      	; 0x58bc <__stack+0x36bd>
    58bc:	00 00       	nop
    58be:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    58c0:	8c 2f       	mov	r24, r28
    58c2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    58c6:	8f ef       	ldi	r24, 0xFF	; 255
    58c8:	9f ef       	ldi	r25, 0xFF	; 255
    58ca:	ac e2       	ldi	r26, 0x2C	; 44
    58cc:	81 50       	subi	r24, 0x01	; 1
    58ce:	90 40       	sbci	r25, 0x00	; 0
    58d0:	a0 40       	sbci	r26, 0x00	; 0
    58d2:	e1 f7       	brne	.-8      	; 0x58cc <__stack+0x36cd>
    58d4:	00 c0       	rjmp	.+0      	; 0x58d6 <__stack+0x36d7>
    58d6:	00 00       	nop
    58d8:	cb 5f       	subi	r28, 0xFB	; 251
		// PICK THE WEIGHT BOX FROM WEIGHT B
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    58da:	cd 32       	cpi	r28, 0x2D	; 45
    58dc:	89 f7       	brne	.-30     	; 0x58c0 <__stack+0x36c1>
    58de:	8f ef       	ldi	r24, 0xFF	; 255
    58e0:	9f ef       	ldi	r25, 0xFF	; 255
    58e2:	ac e2       	ldi	r26, 0x2C	; 44
    58e4:	81 50       	subi	r24, 0x01	; 1
    58e6:	90 40       	sbci	r25, 0x00	; 0
    58e8:	a0 40       	sbci	r26, 0x00	; 0
    58ea:	e1 f7       	brne	.-8      	; 0x58e4 <__stack+0x36e5>
    58ec:	00 c0       	rjmp	.+0      	; 0x58ee <__stack+0x36ef>
    58ee:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    58f0:	82 e7       	ldi	r24, 0x72	; 114
    58f2:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		rotation_using_blackline_right();
    58f6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    58fa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    58fe:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    5902:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5906:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		////drop the weight block in container
		drop_the_block();
    590a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    590e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5912:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//PICK THE WT BLOCK from WEIGHT A
		servo_2(135);
    5916:	87 e8       	ldi	r24, 0x87	; 135
    5918:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    591c:	8f ef       	ldi	r24, 0xFF	; 255
    591e:	9f ef       	ldi	r25, 0xFF	; 255
    5920:	ac e2       	ldi	r26, 0x2C	; 44
    5922:	81 50       	subi	r24, 0x01	; 1
    5924:	90 40       	sbci	r25, 0x00	; 0
    5926:	a0 40       	sbci	r26, 0x00	; 0
    5928:	e1 f7       	brne	.-8      	; 0x5922 <__stack+0x3723>
    592a:	00 c0       	rjmp	.+0      	; 0x592c <__stack+0x372d>
    592c:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    592e:	80 e0       	ldi	r24, 0x00	; 0
    5930:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5934:	8f ef       	ldi	r24, 0xFF	; 255
    5936:	9f ef       	ldi	r25, 0xFF	; 255
    5938:	ac e2       	ldi	r26, 0x2C	; 44
    593a:	81 50       	subi	r24, 0x01	; 1
    593c:	90 40       	sbci	r25, 0x00	; 0
    593e:	a0 40       	sbci	r26, 0x00	; 0
    5940:	e1 f7       	brne	.-8      	; 0x593a <__stack+0x373b>
    5942:	00 c0       	rjmp	.+0      	; 0x5944 <__stack+0x3745>
    5944:	00 00       	nop
    5946:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    5948:	8c 2f       	mov	r24, r28
    594a:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    594e:	8f ef       	ldi	r24, 0xFF	; 255
    5950:	9f ef       	ldi	r25, 0xFF	; 255
    5952:	ac e2       	ldi	r26, 0x2C	; 44
    5954:	81 50       	subi	r24, 0x01	; 1
    5956:	90 40       	sbci	r25, 0x00	; 0
    5958:	a0 40       	sbci	r26, 0x00	; 0
    595a:	e1 f7       	brne	.-8      	; 0x5954 <__stack+0x3755>
    595c:	00 c0       	rjmp	.+0      	; 0x595e <__stack+0x375f>
    595e:	00 00       	nop
    5960:	cb 5f       	subi	r28, 0xFB	; 251
		//PICK THE WT BLOCK from WEIGHT A
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    5962:	cd 32       	cpi	r28, 0x2D	; 45
    5964:	89 f7       	brne	.-30     	; 0x5948 <__stack+0x3749>
    5966:	8f ef       	ldi	r24, 0xFF	; 255
    5968:	9f ef       	ldi	r25, 0xFF	; 255
    596a:	ac e2       	ldi	r26, 0x2C	; 44
    596c:	81 50       	subi	r24, 0x01	; 1
    596e:	90 40       	sbci	r25, 0x00	; 0
    5970:	a0 40       	sbci	r26, 0x00	; 0
    5972:	e1 f7       	brne	.-8      	; 0x596c <__stack+0x376d>
    5974:	00 c0       	rjmp	.+0      	; 0x5976 <__stack+0x3777>
    5976:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5978:	82 e7       	ldi	r24, 0x72	; 114
    597a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>

		rotation_using_blackline_right();
    597e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5982:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    5986:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		//drop the box
		drop_the_block();
    598a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    598e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5992:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//pick the wt block
		servo_2(135);
    5996:	87 e8       	ldi	r24, 0x87	; 135
    5998:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    599c:	8f ef       	ldi	r24, 0xFF	; 255
    599e:	9f ef       	ldi	r25, 0xFF	; 255
    59a0:	ac e2       	ldi	r26, 0x2C	; 44
    59a2:	81 50       	subi	r24, 0x01	; 1
    59a4:	90 40       	sbci	r25, 0x00	; 0
    59a6:	a0 40       	sbci	r26, 0x00	; 0
    59a8:	e1 f7       	brne	.-8      	; 0x59a2 <__stack+0x37a3>
    59aa:	00 c0       	rjmp	.+0      	; 0x59ac <__stack+0x37ad>
    59ac:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    59ae:	80 e0       	ldi	r24, 0x00	; 0
    59b0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    59b4:	8f ef       	ldi	r24, 0xFF	; 255
    59b6:	9f ef       	ldi	r25, 0xFF	; 255
    59b8:	ac e2       	ldi	r26, 0x2C	; 44
    59ba:	81 50       	subi	r24, 0x01	; 1
    59bc:	90 40       	sbci	r25, 0x00	; 0
    59be:	a0 40       	sbci	r26, 0x00	; 0
    59c0:	e1 f7       	brne	.-8      	; 0x59ba <__stack+0x37bb>
    59c2:	00 c0       	rjmp	.+0      	; 0x59c4 <__stack+0x37c5>
    59c4:	00 00       	nop
    59c6:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    59c8:	8c 2f       	mov	r24, r28
    59ca:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    59ce:	8f ef       	ldi	r24, 0xFF	; 255
    59d0:	9f ef       	ldi	r25, 0xFF	; 255
    59d2:	ac e2       	ldi	r26, 0x2C	; 44
    59d4:	81 50       	subi	r24, 0x01	; 1
    59d6:	90 40       	sbci	r25, 0x00	; 0
    59d8:	a0 40       	sbci	r26, 0x00	; 0
    59da:	e1 f7       	brne	.-8      	; 0x59d4 <__stack+0x37d5>
    59dc:	00 c0       	rjmp	.+0      	; 0x59de <__stack+0x37df>
    59de:	00 00       	nop
    59e0:	cb 5f       	subi	r28, 0xFB	; 251
		//pick the wt block
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    59e2:	cd 32       	cpi	r28, 0x2D	; 45
    59e4:	89 f7       	brne	.-30     	; 0x59c8 <__stack+0x37c9>
    59e6:	8f ef       	ldi	r24, 0xFF	; 255
    59e8:	9f ef       	ldi	r25, 0xFF	; 255
    59ea:	ac e2       	ldi	r26, 0x2C	; 44
    59ec:	81 50       	subi	r24, 0x01	; 1
    59ee:	90 40       	sbci	r25, 0x00	; 0
    59f0:	a0 40       	sbci	r26, 0x00	; 0
    59f2:	e1 f7       	brne	.-8      	; 0x59ec <__stack+0x37ed>
    59f4:	00 c0       	rjmp	.+0      	; 0x59f6 <__stack+0x37f7>
    59f6:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    59f8:	82 e7       	ldi	r24, 0x72	; 114
    59fa:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>

		rotation_using_blackline_right();
    59fe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5a02:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    5a06:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		//drop the wt lock
		rotation_using_blackline_right();
    5a0a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5a0e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    5a12:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		velocity(95,90);
    5a16:	8f e5       	ldi	r24, 0x5F	; 95
    5a18:	6a e5       	ldi	r22, 0x5A	; 90
    5a1a:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    5a1e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5a22:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		left_degrees(88);
    5a26:	88 e5       	ldi	r24, 0x58	; 88
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,140);
    5a2e:	8e eb       	ldi	r24, 0xBE	; 190
    5a30:	6c e8       	ldi	r22, 0x8C	; 140
    5a32:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    5a36:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		//pick wt block from weight C
		servo_2(135);
    5a3a:	87 e8       	ldi	r24, 0x87	; 135
    5a3c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5a40:	8f ef       	ldi	r24, 0xFF	; 255
    5a42:	9f ef       	ldi	r25, 0xFF	; 255
    5a44:	ac e2       	ldi	r26, 0x2C	; 44
    5a46:	81 50       	subi	r24, 0x01	; 1
    5a48:	90 40       	sbci	r25, 0x00	; 0
    5a4a:	a0 40       	sbci	r26, 0x00	; 0
    5a4c:	e1 f7       	brne	.-8      	; 0x5a46 <__stack+0x3847>
    5a4e:	00 c0       	rjmp	.+0      	; 0x5a50 <__stack+0x3851>
    5a50:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    5a52:	80 e0       	ldi	r24, 0x00	; 0
    5a54:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5a58:	8f ef       	ldi	r24, 0xFF	; 255
    5a5a:	9f ef       	ldi	r25, 0xFF	; 255
    5a5c:	ac e2       	ldi	r26, 0x2C	; 44
    5a5e:	81 50       	subi	r24, 0x01	; 1
    5a60:	90 40       	sbci	r25, 0x00	; 0
    5a62:	a0 40       	sbci	r26, 0x00	; 0
    5a64:	e1 f7       	brne	.-8      	; 0x5a5e <__stack+0x385f>
    5a66:	00 c0       	rjmp	.+0      	; 0x5a68 <__stack+0x3869>
    5a68:	00 00       	nop
    5a6a:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    5a6c:	8c 2f       	mov	r24, r28
    5a6e:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5a72:	8f ef       	ldi	r24, 0xFF	; 255
    5a74:	9f ef       	ldi	r25, 0xFF	; 255
    5a76:	ac e2       	ldi	r26, 0x2C	; 44
    5a78:	81 50       	subi	r24, 0x01	; 1
    5a7a:	90 40       	sbci	r25, 0x00	; 0
    5a7c:	a0 40       	sbci	r26, 0x00	; 0
    5a7e:	e1 f7       	brne	.-8      	; 0x5a78 <__stack+0x3879>
    5a80:	00 c0       	rjmp	.+0      	; 0x5a82 <__stack+0x3883>
    5a82:	00 00       	nop
    5a84:	cb 5f       	subi	r28, 0xFB	; 251
		//pick wt block from weight C
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    5a86:	cd 32       	cpi	r28, 0x2D	; 45
    5a88:	89 f7       	brne	.-30     	; 0x5a6c <__stack+0x386d>
    5a8a:	8f ef       	ldi	r24, 0xFF	; 255
    5a8c:	9f ef       	ldi	r25, 0xFF	; 255
    5a8e:	ac e2       	ldi	r26, 0x2C	; 44
    5a90:	81 50       	subi	r24, 0x01	; 1
    5a92:	90 40       	sbci	r25, 0x00	; 0
    5a94:	a0 40       	sbci	r26, 0x00	; 0
    5a96:	e1 f7       	brne	.-8      	; 0x5a90 <__stack+0x3891>
    5a98:	00 c0       	rjmp	.+0      	; 0x5a9a <__stack+0x389b>
    5a9a:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5a9c:	82 e7       	ldi	r24, 0x72	; 114
    5a9e:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>

		rotation_using_blackline_left();
    5aa2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5aa6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5aaa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5aae:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///3rd run for city area
		// CROSSING THE BRIDGE
		// NOW E AE IN CITY 1
		turn_left();
    5ab2:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(150,150);
    5ab6:	86 e9       	ldi	r24, 0x96	; 150
    5ab8:	66 e9       	ldi	r22, 0x96	; 150
    5aba:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5abe:	8f ef       	ldi	r24, 0xFF	; 255
    5ac0:	9f e3       	ldi	r25, 0x3F	; 63
    5ac2:	a2 e0       	ldi	r26, 0x02	; 2
    5ac4:	81 50       	subi	r24, 0x01	; 1
    5ac6:	90 40       	sbci	r25, 0x00	; 0
    5ac8:	a0 40       	sbci	r26, 0x00	; 0
    5aca:	e1 f7       	brne	.-8      	; 0x5ac4 <__stack+0x38c5>
    5acc:	00 c0       	rjmp	.+0      	; 0x5ace <__stack+0x38cf>
    5ace:	00 00       	nop
		_delay_ms(50);
		stop();
    5ad0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5ad4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		velocity(190,180);
    5ad8:	8e eb       	ldi	r24, 0xBE	; 190
    5ada:	64 eb       	ldi	r22, 0xB4	; 180
    5adc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(113);
    5ae0:	81 e7       	ldi	r24, 0x71	; 113
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    5ae8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5aec:	8f ef       	ldi	r24, 0xFF	; 255
    5aee:	9f ef       	ldi	r25, 0xFF	; 255
    5af0:	ac e2       	ldi	r26, 0x2C	; 44
    5af2:	81 50       	subi	r24, 0x01	; 1
    5af4:	90 40       	sbci	r25, 0x00	; 0
    5af6:	a0 40       	sbci	r26, 0x00	; 0
    5af8:	e1 f7       	brne	.-8      	; 0x5af2 <__stack+0x38f3>
    5afa:	00 c0       	rjmp	.+0      	; 0x5afc <__stack+0x38fd>
    5afc:	00 00       	nop
		_delay_ms(1000);
		velocity(190,180);
    5afe:	8e eb       	ldi	r24, 0xBE	; 190
    5b00:	64 eb       	ldi	r22, 0xB4	; 180
    5b02:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		left_degrees(88);
    5b06:	88 e5       	ldi	r24, 0x58	; 88
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,180);
    5b0e:	8e eb       	ldi	r24, 0xBE	; 190
    5b10:	64 eb       	ldi	r22, 0xB4	; 180
    5b12:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    5b16:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5b1a:	8f ef       	ldi	r24, 0xFF	; 255
    5b1c:	9f e7       	ldi	r25, 0x7F	; 127
    5b1e:	a6 e1       	ldi	r26, 0x16	; 22
    5b20:	81 50       	subi	r24, 0x01	; 1
    5b22:	90 40       	sbci	r25, 0x00	; 0
    5b24:	a0 40       	sbci	r26, 0x00	; 0
    5b26:	e1 f7       	brne	.-8      	; 0x5b20 <__stack+0x3921>
    5b28:	00 c0       	rjmp	.+0      	; 0x5b2a <__stack+0x392b>
    5b2a:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);//187
    5b2c:	86 eb       	ldi	r24, 0xB6	; 182
    5b2e:	64 eb       	ldi	r22, 0xB4	; 180
    5b30:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(83);//76
    5b34:	83 e5       	ldi	r24, 0x53	; 83
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		stop();
    5b3c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5b40:	8f ef       	ldi	r24, 0xFF	; 255
    5b42:	9f e7       	ldi	r25, 0x7F	; 127
    5b44:	a6 e1       	ldi	r26, 0x16	; 22
    5b46:	81 50       	subi	r24, 0x01	; 1
    5b48:	90 40       	sbci	r25, 0x00	; 0
    5b4a:	a0 40       	sbci	r26, 0x00	; 0
    5b4c:	e1 f7       	brne	.-8      	; 0x5b46 <__stack+0x3947>
    5b4e:	00 c0       	rjmp	.+0      	; 0x5b50 <__stack+0x3951>
    5b50:	00 00       	nop
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
    5b52:	8b e9       	ldi	r24, 0x9B	; 155
    5b54:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5b58:	8f ef       	ldi	r24, 0xFF	; 255
    5b5a:	9f ef       	ldi	r25, 0xFF	; 255
    5b5c:	ac e2       	ldi	r26, 0x2C	; 44
    5b5e:	81 50       	subi	r24, 0x01	; 1
    5b60:	90 40       	sbci	r25, 0x00	; 0
    5b62:	a0 40       	sbci	r26, 0x00	; 0
    5b64:	e1 f7       	brne	.-8      	; 0x5b5e <__stack+0x395f>
    5b66:	00 c0       	rjmp	.+0      	; 0x5b68 <__stack+0x3969>
    5b68:	00 00       	nop
    5b6a:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    5b6c:	8c 2f       	mov	r24, r28
    5b6e:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5b72:	8f ef       	ldi	r24, 0xFF	; 255
    5b74:	9f ef       	ldi	r25, 0xFF	; 255
    5b76:	a8 e0       	ldi	r26, 0x08	; 8
    5b78:	81 50       	subi	r24, 0x01	; 1
    5b7a:	90 40       	sbci	r25, 0x00	; 0
    5b7c:	a0 40       	sbci	r26, 0x00	; 0
    5b7e:	e1 f7       	brne	.-8      	; 0x5b78 <__stack+0x3979>
    5b80:	00 c0       	rjmp	.+0      	; 0x5b82 <__stack+0x3983>
    5b82:	00 00       	nop
    5b84:	ce 5f       	subi	r28, 0xFE	; 254
		stop();
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    5b86:	c8 33       	cpi	r28, 0x38	; 56
    5b88:	89 f7       	brne	.-30     	; 0x5b6c <__stack+0x396d>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    5b8a:	83 e8       	ldi	r24, 0x83	; 131
    5b8c:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5b90:	8f ef       	ldi	r24, 0xFF	; 255
    5b92:	9f ef       	ldi	r25, 0xFF	; 255
    5b94:	a9 e5       	ldi	r26, 0x59	; 89
    5b96:	81 50       	subi	r24, 0x01	; 1
    5b98:	90 40       	sbci	r25, 0x00	; 0
    5b9a:	a0 40       	sbci	r26, 0x00	; 0
    5b9c:	e1 f7       	brne	.-8      	; 0x5b96 <__stack+0x3997>
    5b9e:	00 c0       	rjmp	.+0      	; 0x5ba0 <__stack+0x39a1>
    5ba0:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    5ba2:	88 e1       	ldi	r24, 0x18	; 24
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5baa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5bae:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    5bb2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5bb6:	8f ef       	ldi	r24, 0xFF	; 255
    5bb8:	9f e7       	ldi	r25, 0x7F	; 127
    5bba:	a6 e1       	ldi	r26, 0x16	; 22
    5bbc:	81 50       	subi	r24, 0x01	; 1
    5bbe:	90 40       	sbci	r25, 0x00	; 0
    5bc0:	a0 40       	sbci	r26, 0x00	; 0
    5bc2:	e1 f7       	brne	.-8      	; 0x5bbc <__stack+0x39bd>
    5bc4:	00 c0       	rjmp	.+0      	; 0x5bc6 <__stack+0x39c7>
    5bc6:	00 00       	nop
		_delay_ms(500);
		velocity(150,150);
    5bc8:	86 e9       	ldi	r24, 0x96	; 150
    5bca:	66 e9       	ldi	r22, 0x96	; 150
    5bcc:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(39);
    5bd0:	87 e2       	ldi	r24, 0x27	; 39
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    5bd8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(3);
    5bdc:	83 e0       	ldi	r24, 0x03	; 3
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    5be4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    5be8:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);// to be caliberated
    5bec:	88 e1       	ldi	r24, 0x18	; 24
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5bf4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5bf8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		servo_2(155);
    5bfc:	8b e9       	ldi	r24, 0x9B	; 155
    5bfe:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5c02:	8f ef       	ldi	r24, 0xFF	; 255
    5c04:	9f ef       	ldi	r25, 0xFF	; 255
    5c06:	ac e2       	ldi	r26, 0x2C	; 44
    5c08:	81 50       	subi	r24, 0x01	; 1
    5c0a:	90 40       	sbci	r25, 0x00	; 0
    5c0c:	a0 40       	sbci	r26, 0x00	; 0
    5c0e:	e1 f7       	brne	.-8      	; 0x5c08 <__stack+0x3a09>
    5c10:	00 c0       	rjmp	.+0      	; 0x5c12 <__stack+0x3a13>
    5c12:	00 00       	nop
    5c14:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    5c16:	8c 2f       	mov	r24, r28
    5c18:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5c1c:	8f ef       	ldi	r24, 0xFF	; 255
    5c1e:	9f ef       	ldi	r25, 0xFF	; 255
    5c20:	a8 e0       	ldi	r26, 0x08	; 8
    5c22:	81 50       	subi	r24, 0x01	; 1
    5c24:	90 40       	sbci	r25, 0x00	; 0
    5c26:	a0 40       	sbci	r26, 0x00	; 0
    5c28:	e1 f7       	brne	.-8      	; 0x5c22 <__stack+0x3a23>
    5c2a:	00 c0       	rjmp	.+0      	; 0x5c2c <__stack+0x3a2d>
    5c2c:	00 00       	nop
    5c2e:	ce 5f       	subi	r28, 0xFE	; 254
		rotation_using_blackline_left();
		blackline();
		// pick the weight box from weight b
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    5c30:	c8 33       	cpi	r28, 0x38	; 56
    5c32:	89 f7       	brne	.-30     	; 0x5c16 <__stack+0x3a17>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    5c34:	83 e8       	ldi	r24, 0x83	; 131
    5c36:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5c3a:	8f ef       	ldi	r24, 0xFF	; 255
    5c3c:	9f ef       	ldi	r25, 0xFF	; 255
    5c3e:	a9 e5       	ldi	r26, 0x59	; 89
    5c40:	81 50       	subi	r24, 0x01	; 1
    5c42:	90 40       	sbci	r25, 0x00	; 0
    5c44:	a0 40       	sbci	r26, 0x00	; 0
    5c46:	e1 f7       	brne	.-8      	; 0x5c40 <__stack+0x3a41>
    5c48:	00 c0       	rjmp	.+0      	; 0x5c4a <__stack+0x3a4b>
    5c4a:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    5c4c:	88 e1       	ldi	r24, 0x18	; 24
    5c4e:	90 e0       	ldi	r25, 0x00	; 0
    5c50:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5c54:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5c58:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    5c5c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);// to be caliberated
    5c60:	88 e1       	ldi	r24, 0x18	; 24
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5c68:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5c6c:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the wweight box in conntainer
		turn_right();
    5c70:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    5c74:	86 e9       	ldi	r24, 0x96	; 150
    5c76:	66 e9       	ldi	r22, 0x96	; 150
    5c78:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5c7c:	8f ef       	ldi	r24, 0xFF	; 255
    5c7e:	9f e3       	ldi	r25, 0x3F	; 63
    5c80:	a2 e0       	ldi	r26, 0x02	; 2
    5c82:	81 50       	subi	r24, 0x01	; 1
    5c84:	90 40       	sbci	r25, 0x00	; 0
    5c86:	a0 40       	sbci	r26, 0x00	; 0
    5c88:	e1 f7       	brne	.-8      	; 0x5c82 <__stack+0x3a83>
    5c8a:	00 c0       	rjmp	.+0      	; 0x5c8c <__stack+0x3a8d>
    5c8c:	00 00       	nop
		_delay_ms(50);
		stop();
    5c8e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5c92:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    5c96:	88 e0       	ldi	r24, 0x08	; 8
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    5c9e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the bottom box
		servo_2(135);
    5ca2:	87 e8       	ldi	r24, 0x87	; 135
    5ca4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5ca8:	8f ef       	ldi	r24, 0xFF	; 255
    5caa:	9f ef       	ldi	r25, 0xFF	; 255
    5cac:	ac e2       	ldi	r26, 0x2C	; 44
    5cae:	81 50       	subi	r24, 0x01	; 1
    5cb0:	90 40       	sbci	r25, 0x00	; 0
    5cb2:	a0 40       	sbci	r26, 0x00	; 0
    5cb4:	e1 f7       	brne	.-8      	; 0x5cae <__stack+0x3aaf>
    5cb6:	00 c0       	rjmp	.+0      	; 0x5cb8 <__stack+0x3ab9>
    5cb8:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    5cba:	80 e0       	ldi	r24, 0x00	; 0
    5cbc:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5cc0:	8f ef       	ldi	r24, 0xFF	; 255
    5cc2:	9f ef       	ldi	r25, 0xFF	; 255
    5cc4:	ac e2       	ldi	r26, 0x2C	; 44
    5cc6:	81 50       	subi	r24, 0x01	; 1
    5cc8:	90 40       	sbci	r25, 0x00	; 0
    5cca:	a0 40       	sbci	r26, 0x00	; 0
    5ccc:	e1 f7       	brne	.-8      	; 0x5cc6 <__stack+0x3ac7>
    5cce:	00 c0       	rjmp	.+0      	; 0x5cd0 <__stack+0x3ad1>
    5cd0:	00 00       	nop
    5cd2:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    5cd4:	8c 2f       	mov	r24, r28
    5cd6:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5cda:	8f ef       	ldi	r24, 0xFF	; 255
    5cdc:	9f ef       	ldi	r25, 0xFF	; 255
    5cde:	ac e2       	ldi	r26, 0x2C	; 44
    5ce0:	81 50       	subi	r24, 0x01	; 1
    5ce2:	90 40       	sbci	r25, 0x00	; 0
    5ce4:	a0 40       	sbci	r26, 0x00	; 0
    5ce6:	e1 f7       	brne	.-8      	; 0x5ce0 <__stack+0x3ae1>
    5ce8:	00 c0       	rjmp	.+0      	; 0x5cea <__stack+0x3aeb>
    5cea:	00 00       	nop
    5cec:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the bottom box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    5cee:	cd 32       	cpi	r28, 0x2D	; 45
    5cf0:	89 f7       	brne	.-30     	; 0x5cd4 <__stack+0x3ad5>
    5cf2:	8f ef       	ldi	r24, 0xFF	; 255
    5cf4:	9f ef       	ldi	r25, 0xFF	; 255
    5cf6:	ac e2       	ldi	r26, 0x2C	; 44
    5cf8:	81 50       	subi	r24, 0x01	; 1
    5cfa:	90 40       	sbci	r25, 0x00	; 0
    5cfc:	a0 40       	sbci	r26, 0x00	; 0
    5cfe:	e1 f7       	brne	.-8      	; 0x5cf8 <__stack+0x3af9>
    5d00:	00 c0       	rjmp	.+0      	; 0x5d02 <__stack+0x3b03>
    5d02:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5d04:	82 e7       	ldi	r24, 0x72	; 114
    5d06:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    5d0a:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    5d0e:	86 e9       	ldi	r24, 0x96	; 150
    5d10:	66 e9       	ldi	r22, 0x96	; 150
    5d12:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5d16:	8f ef       	ldi	r24, 0xFF	; 255
    5d18:	9f e3       	ldi	r25, 0x3F	; 63
    5d1a:	a2 e0       	ldi	r26, 0x02	; 2
    5d1c:	81 50       	subi	r24, 0x01	; 1
    5d1e:	90 40       	sbci	r25, 0x00	; 0
    5d20:	a0 40       	sbci	r26, 0x00	; 0
    5d22:	e1 f7       	brne	.-8      	; 0x5d1c <__stack+0x3b1d>
    5d24:	00 c0       	rjmp	.+0      	; 0x5d26 <__stack+0x3b27>
    5d26:	00 00       	nop
		_delay_ms(50);
		stop();
    5d28:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    5d2c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    5d30:	86 e9       	ldi	r24, 0x96	; 150
    5d32:	66 e9       	ldi	r22, 0x96	; 150
    5d34:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5d38:	8f ef       	ldi	r24, 0xFF	; 255
    5d3a:	9f e3       	ldi	r25, 0x3F	; 63
    5d3c:	a2 e0       	ldi	r26, 0x02	; 2
    5d3e:	81 50       	subi	r24, 0x01	; 1
    5d40:	90 40       	sbci	r25, 0x00	; 0
    5d42:	a0 40       	sbci	r26, 0x00	; 0
    5d44:	e1 f7       	brne	.-8      	; 0x5d3e <__stack+0x3b3f>
    5d46:	00 c0       	rjmp	.+0      	; 0x5d48 <__stack+0x3b49>
    5d48:	00 00       	nop
		_delay_ms(50);
		stop();
    5d4a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5d4e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///// CROSS THE BRIDGE AGAIN
		forward();
    5d52:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    5d56:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
    5d5a:	b5 c4       	rjmp	.+2410   	; 0x66c6 <__stack+0x44c7>
		/// drop the bottom block
	}
	
	else if(flag3_color==top_HZ_waste_block_color)///////////////////////////////////////////////////
    5d5c:	90 91 23 02 	lds	r25, 0x0223
    5d60:	89 17       	cp	r24, r25
    5d62:	09 f0       	breq	.+2      	; 0x5d66 <__stack+0x3b67>
    5d64:	b0 c4       	rjmp	.+2400   	; 0x66c6 <__stack+0x44c7>
	{
		rotation_using_blackline_left();
    5d66:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5d6a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5d6e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5d72:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5d76:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5d7a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//// drop the color box
		servo_2(135);
    5d7e:	87 e8       	ldi	r24, 0x87	; 135
    5d80:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5d84:	8f ef       	ldi	r24, 0xFF	; 255
    5d86:	9f ef       	ldi	r25, 0xFF	; 255
    5d88:	ac e2       	ldi	r26, 0x2C	; 44
    5d8a:	81 50       	subi	r24, 0x01	; 1
    5d8c:	90 40       	sbci	r25, 0x00	; 0
    5d8e:	a0 40       	sbci	r26, 0x00	; 0
    5d90:	e1 f7       	brne	.-8      	; 0x5d8a <__stack+0x3b8b>
    5d92:	00 c0       	rjmp	.+0      	; 0x5d94 <__stack+0x3b95>
    5d94:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    5d96:	80 e0       	ldi	r24, 0x00	; 0
    5d98:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5d9c:	8f ef       	ldi	r24, 0xFF	; 255
    5d9e:	9f ef       	ldi	r25, 0xFF	; 255
    5da0:	ac e2       	ldi	r26, 0x2C	; 44
    5da2:	81 50       	subi	r24, 0x01	; 1
    5da4:	90 40       	sbci	r25, 0x00	; 0
    5da6:	a0 40       	sbci	r26, 0x00	; 0
    5da8:	e1 f7       	brne	.-8      	; 0x5da2 <__stack+0x3ba3>
    5daa:	00 c0       	rjmp	.+0      	; 0x5dac <__stack+0x3bad>
    5dac:	00 00       	nop
    5dae:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    5db0:	8c 2f       	mov	r24, r28
    5db2:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5db6:	8f ef       	ldi	r24, 0xFF	; 255
    5db8:	9f ef       	ldi	r25, 0xFF	; 255
    5dba:	ac e2       	ldi	r26, 0x2C	; 44
    5dbc:	81 50       	subi	r24, 0x01	; 1
    5dbe:	90 40       	sbci	r25, 0x00	; 0
    5dc0:	a0 40       	sbci	r26, 0x00	; 0
    5dc2:	e1 f7       	brne	.-8      	; 0x5dbc <__stack+0x3bbd>
    5dc4:	00 c0       	rjmp	.+0      	; 0x5dc6 <__stack+0x3bc7>
    5dc6:	00 00       	nop
    5dc8:	cb 5f       	subi	r28, 0xFB	; 251
		//// drop the color box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    5dca:	cd 32       	cpi	r28, 0x2D	; 45
    5dcc:	89 f7       	brne	.-30     	; 0x5db0 <__stack+0x3bb1>
    5dce:	8f ef       	ldi	r24, 0xFF	; 255
    5dd0:	9f ef       	ldi	r25, 0xFF	; 255
    5dd2:	ac e2       	ldi	r26, 0x2C	; 44
    5dd4:	81 50       	subi	r24, 0x01	; 1
    5dd6:	90 40       	sbci	r25, 0x00	; 0
    5dd8:	a0 40       	sbci	r26, 0x00	; 0
    5dda:	e1 f7       	brne	.-8      	; 0x5dd4 <__stack+0x3bd5>
    5ddc:	00 c0       	rjmp	.+0      	; 0x5dde <__stack+0x3bdf>
    5dde:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5de0:	82 e7       	ldi	r24, 0x72	; 114
    5de2:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		///////
		rotation_using_blackline_left();
    5de6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5dea:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		/// pick the weight box from weight a
		servo_2(135);
    5dee:	87 e8       	ldi	r24, 0x87	; 135
    5df0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5df4:	8f ef       	ldi	r24, 0xFF	; 255
    5df6:	9f ef       	ldi	r25, 0xFF	; 255
    5df8:	ac e2       	ldi	r26, 0x2C	; 44
    5dfa:	81 50       	subi	r24, 0x01	; 1
    5dfc:	90 40       	sbci	r25, 0x00	; 0
    5dfe:	a0 40       	sbci	r26, 0x00	; 0
    5e00:	e1 f7       	brne	.-8      	; 0x5dfa <__stack+0x3bfb>
    5e02:	00 c0       	rjmp	.+0      	; 0x5e04 <__stack+0x3c05>
    5e04:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    5e06:	80 e0       	ldi	r24, 0x00	; 0
    5e08:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5e0c:	8f ef       	ldi	r24, 0xFF	; 255
    5e0e:	9f ef       	ldi	r25, 0xFF	; 255
    5e10:	ac e2       	ldi	r26, 0x2C	; 44
    5e12:	81 50       	subi	r24, 0x01	; 1
    5e14:	90 40       	sbci	r25, 0x00	; 0
    5e16:	a0 40       	sbci	r26, 0x00	; 0
    5e18:	e1 f7       	brne	.-8      	; 0x5e12 <__stack+0x3c13>
    5e1a:	00 c0       	rjmp	.+0      	; 0x5e1c <__stack+0x3c1d>
    5e1c:	00 00       	nop
    5e1e:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    5e20:	8c 2f       	mov	r24, r28
    5e22:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5e26:	8f ef       	ldi	r24, 0xFF	; 255
    5e28:	9f ef       	ldi	r25, 0xFF	; 255
    5e2a:	ac e2       	ldi	r26, 0x2C	; 44
    5e2c:	81 50       	subi	r24, 0x01	; 1
    5e2e:	90 40       	sbci	r25, 0x00	; 0
    5e30:	a0 40       	sbci	r26, 0x00	; 0
    5e32:	e1 f7       	brne	.-8      	; 0x5e2c <__stack+0x3c2d>
    5e34:	00 c0       	rjmp	.+0      	; 0x5e36 <__stack+0x3c37>
    5e36:	00 00       	nop
    5e38:	cb 5f       	subi	r28, 0xFB	; 251
		/// pick the weight box from weight a
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    5e3a:	cd 32       	cpi	r28, 0x2D	; 45
    5e3c:	89 f7       	brne	.-30     	; 0x5e20 <__stack+0x3c21>
    5e3e:	8f ef       	ldi	r24, 0xFF	; 255
    5e40:	9f ef       	ldi	r25, 0xFF	; 255
    5e42:	ac e2       	ldi	r26, 0x2C	; 44
    5e44:	81 50       	subi	r24, 0x01	; 1
    5e46:	90 40       	sbci	r25, 0x00	; 0
    5e48:	a0 40       	sbci	r26, 0x00	; 0
    5e4a:	e1 f7       	brne	.-8      	; 0x5e44 <__stack+0x3c45>
    5e4c:	00 c0       	rjmp	.+0      	; 0x5e4e <__stack+0x3c4f>
    5e4e:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5e50:	82 e7       	ldi	r24, 0x72	; 114
    5e52:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		rotation_using_blackline_left();
    5e56:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5e5a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    5e5e:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    5e62:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    5e66:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		///// drop the weight box in container
		drop_the_block();
    5e6a:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    5e6e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5e72:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///pick the weight box
		servo_2(135);
    5e76:	87 e8       	ldi	r24, 0x87	; 135
    5e78:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5e7c:	8f ef       	ldi	r24, 0xFF	; 255
    5e7e:	9f ef       	ldi	r25, 0xFF	; 255
    5e80:	ac e2       	ldi	r26, 0x2C	; 44
    5e82:	81 50       	subi	r24, 0x01	; 1
    5e84:	90 40       	sbci	r25, 0x00	; 0
    5e86:	a0 40       	sbci	r26, 0x00	; 0
    5e88:	e1 f7       	brne	.-8      	; 0x5e82 <__stack+0x3c83>
    5e8a:	00 c0       	rjmp	.+0      	; 0x5e8c <__stack+0x3c8d>
    5e8c:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    5e8e:	80 e0       	ldi	r24, 0x00	; 0
    5e90:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5e94:	8f ef       	ldi	r24, 0xFF	; 255
    5e96:	9f ef       	ldi	r25, 0xFF	; 255
    5e98:	ac e2       	ldi	r26, 0x2C	; 44
    5e9a:	81 50       	subi	r24, 0x01	; 1
    5e9c:	90 40       	sbci	r25, 0x00	; 0
    5e9e:	a0 40       	sbci	r26, 0x00	; 0
    5ea0:	e1 f7       	brne	.-8      	; 0x5e9a <__stack+0x3c9b>
    5ea2:	00 c0       	rjmp	.+0      	; 0x5ea4 <__stack+0x3ca5>
    5ea4:	00 00       	nop
    5ea6:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    5ea8:	8c 2f       	mov	r24, r28
    5eaa:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5eae:	8f ef       	ldi	r24, 0xFF	; 255
    5eb0:	9f ef       	ldi	r25, 0xFF	; 255
    5eb2:	ac e2       	ldi	r26, 0x2C	; 44
    5eb4:	81 50       	subi	r24, 0x01	; 1
    5eb6:	90 40       	sbci	r25, 0x00	; 0
    5eb8:	a0 40       	sbci	r26, 0x00	; 0
    5eba:	e1 f7       	brne	.-8      	; 0x5eb4 <__stack+0x3cb5>
    5ebc:	00 c0       	rjmp	.+0      	; 0x5ebe <__stack+0x3cbf>
    5ebe:	00 00       	nop
    5ec0:	cb 5f       	subi	r28, 0xFB	; 251
		///pick the weight box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    5ec2:	cd 32       	cpi	r28, 0x2D	; 45
    5ec4:	89 f7       	brne	.-30     	; 0x5ea8 <__stack+0x3ca9>
    5ec6:	8f ef       	ldi	r24, 0xFF	; 255
    5ec8:	9f ef       	ldi	r25, 0xFF	; 255
    5eca:	ac e2       	ldi	r26, 0x2C	; 44
    5ecc:	81 50       	subi	r24, 0x01	; 1
    5ece:	90 40       	sbci	r25, 0x00	; 0
    5ed0:	a0 40       	sbci	r26, 0x00	; 0
    5ed2:	e1 f7       	brne	.-8      	; 0x5ecc <__stack+0x3ccd>
    5ed4:	00 c0       	rjmp	.+0      	; 0x5ed6 <__stack+0x3cd7>
    5ed6:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    5ed8:	82 e7       	ldi	r24, 0x72	; 114
    5eda:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		rotation_using_blackline_right();
    5ede:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5ee2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    5ee6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		drop_the_block();
    5eea:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_right();
    5eee:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    5ef2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    5ef6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5efa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//BRIDGE CROSSED AND @ND RUN ON CITY AREA SIDE....AT NODE 'A' AND FACING TOWARDS HAZARDOUS WASTES
		// CROSSING THE BRIDGE
		// NOW E AE IN CITY 1
		turn_left();
    5efe:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(150,150);
    5f02:	86 e9       	ldi	r24, 0x96	; 150
    5f04:	66 e9       	ldi	r22, 0x96	; 150
    5f06:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    5f0a:	8f ef       	ldi	r24, 0xFF	; 255
    5f0c:	9f e3       	ldi	r25, 0x3F	; 63
    5f0e:	a2 e0       	ldi	r26, 0x02	; 2
    5f10:	81 50       	subi	r24, 0x01	; 1
    5f12:	90 40       	sbci	r25, 0x00	; 0
    5f14:	a0 40       	sbci	r26, 0x00	; 0
    5f16:	e1 f7       	brne	.-8      	; 0x5f10 <__stack+0x3d11>
    5f18:	00 c0       	rjmp	.+0      	; 0x5f1a <__stack+0x3d1b>
    5f1a:	00 00       	nop
		_delay_ms(50);
		stop();
    5f1c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    5f20:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		velocity(190,180);
    5f24:	8e eb       	ldi	r24, 0xBE	; 190
    5f26:	64 eb       	ldi	r22, 0xB4	; 180
    5f28:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(113);
    5f2c:	81 e7       	ldi	r24, 0x71	; 113
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    5f34:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5f38:	8f ef       	ldi	r24, 0xFF	; 255
    5f3a:	9f ef       	ldi	r25, 0xFF	; 255
    5f3c:	ac e2       	ldi	r26, 0x2C	; 44
    5f3e:	81 50       	subi	r24, 0x01	; 1
    5f40:	90 40       	sbci	r25, 0x00	; 0
    5f42:	a0 40       	sbci	r26, 0x00	; 0
    5f44:	e1 f7       	brne	.-8      	; 0x5f3e <__stack+0x3d3f>
    5f46:	00 c0       	rjmp	.+0      	; 0x5f48 <__stack+0x3d49>
    5f48:	00 00       	nop
		_delay_ms(1000);
		velocity(190,180);
    5f4a:	8e eb       	ldi	r24, 0xBE	; 190
    5f4c:	64 eb       	ldi	r22, 0xB4	; 180
    5f4e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		left_degrees(88);
    5f52:	88 e5       	ldi	r24, 0x58	; 88
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,180);
    5f5a:	8e eb       	ldi	r24, 0xBE	; 190
    5f5c:	64 eb       	ldi	r22, 0xB4	; 180
    5f5e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    5f62:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5f66:	8f ef       	ldi	r24, 0xFF	; 255
    5f68:	9f e7       	ldi	r25, 0x7F	; 127
    5f6a:	a6 e1       	ldi	r26, 0x16	; 22
    5f6c:	81 50       	subi	r24, 0x01	; 1
    5f6e:	90 40       	sbci	r25, 0x00	; 0
    5f70:	a0 40       	sbci	r26, 0x00	; 0
    5f72:	e1 f7       	brne	.-8      	; 0x5f6c <__stack+0x3d6d>
    5f74:	00 c0       	rjmp	.+0      	; 0x5f76 <__stack+0x3d77>
    5f76:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);//187
    5f78:	86 eb       	ldi	r24, 0xB6	; 182
    5f7a:	64 eb       	ldi	r22, 0xB4	; 180
    5f7c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(83);//76
    5f80:	83 e5       	ldi	r24, 0x53	; 83
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		stop();
    5f88:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    5f8c:	8f ef       	ldi	r24, 0xFF	; 255
    5f8e:	9f e7       	ldi	r25, 0x7F	; 127
    5f90:	a6 e1       	ldi	r26, 0x16	; 22
    5f92:	81 50       	subi	r24, 0x01	; 1
    5f94:	90 40       	sbci	r25, 0x00	; 0
    5f96:	a0 40       	sbci	r26, 0x00	; 0
    5f98:	e1 f7       	brne	.-8      	; 0x5f92 <__stack+0x3d93>
    5f9a:	00 c0       	rjmp	.+0      	; 0x5f9c <__stack+0x3d9d>
    5f9c:	00 00       	nop
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
    5f9e:	8b e9       	ldi	r24, 0x9B	; 155
    5fa0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    5fa4:	8f ef       	ldi	r24, 0xFF	; 255
    5fa6:	9f ef       	ldi	r25, 0xFF	; 255
    5fa8:	ac e2       	ldi	r26, 0x2C	; 44
    5faa:	81 50       	subi	r24, 0x01	; 1
    5fac:	90 40       	sbci	r25, 0x00	; 0
    5fae:	a0 40       	sbci	r26, 0x00	; 0
    5fb0:	e1 f7       	brne	.-8      	; 0x5faa <__stack+0x3dab>
    5fb2:	00 c0       	rjmp	.+0      	; 0x5fb4 <__stack+0x3db5>
    5fb4:	00 00       	nop
    5fb6:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    5fb8:	8c 2f       	mov	r24, r28
    5fba:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    5fbe:	8f ef       	ldi	r24, 0xFF	; 255
    5fc0:	9f ef       	ldi	r25, 0xFF	; 255
    5fc2:	a8 e0       	ldi	r26, 0x08	; 8
    5fc4:	81 50       	subi	r24, 0x01	; 1
    5fc6:	90 40       	sbci	r25, 0x00	; 0
    5fc8:	a0 40       	sbci	r26, 0x00	; 0
    5fca:	e1 f7       	brne	.-8      	; 0x5fc4 <__stack+0x3dc5>
    5fcc:	00 c0       	rjmp	.+0      	; 0x5fce <__stack+0x3dcf>
    5fce:	00 00       	nop
    5fd0:	ce 5f       	subi	r28, 0xFE	; 254
		stop();
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    5fd2:	c8 33       	cpi	r28, 0x38	; 56
    5fd4:	89 f7       	brne	.-30     	; 0x5fb8 <__stack+0x3db9>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    5fd6:	83 e8       	ldi	r24, 0x83	; 131
    5fd8:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    5fdc:	8f ef       	ldi	r24, 0xFF	; 255
    5fde:	9f ef       	ldi	r25, 0xFF	; 255
    5fe0:	a9 e5       	ldi	r26, 0x59	; 89
    5fe2:	81 50       	subi	r24, 0x01	; 1
    5fe4:	90 40       	sbci	r25, 0x00	; 0
    5fe6:	a0 40       	sbci	r26, 0x00	; 0
    5fe8:	e1 f7       	brne	.-8      	; 0x5fe2 <__stack+0x3de3>
    5fea:	00 c0       	rjmp	.+0      	; 0x5fec <__stack+0x3ded>
    5fec:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    5fee:	88 e1       	ldi	r24, 0x18	; 24
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    5ff6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    5ffa:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    5ffe:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    6002:	8f ef       	ldi	r24, 0xFF	; 255
    6004:	9f e7       	ldi	r25, 0x7F	; 127
    6006:	a6 e1       	ldi	r26, 0x16	; 22
    6008:	81 50       	subi	r24, 0x01	; 1
    600a:	90 40       	sbci	r25, 0x00	; 0
    600c:	a0 40       	sbci	r26, 0x00	; 0
    600e:	e1 f7       	brne	.-8      	; 0x6008 <__stack+0x3e09>
    6010:	00 c0       	rjmp	.+0      	; 0x6012 <__stack+0x3e13>
    6012:	00 00       	nop
		_delay_ms(500);
		velocity(150,150);
    6014:	86 e9       	ldi	r24, 0x96	; 150
    6016:	66 e9       	ldi	r22, 0x96	; 150
    6018:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(39);
    601c:	87 e2       	ldi	r24, 0x27	; 39
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    6024:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(3);
    6028:	83 e0       	ldi	r24, 0x03	; 3
    602a:	90 e0       	ldi	r25, 0x00	; 0
    602c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    6030:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    6034:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);// to be caliberated
    6038:	88 e1       	ldi	r24, 0x18	; 24
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    6040:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    6044:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		servo_2(155);
    6048:	8b e9       	ldi	r24, 0x9B	; 155
    604a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    604e:	8f ef       	ldi	r24, 0xFF	; 255
    6050:	9f ef       	ldi	r25, 0xFF	; 255
    6052:	ac e2       	ldi	r26, 0x2C	; 44
    6054:	81 50       	subi	r24, 0x01	; 1
    6056:	90 40       	sbci	r25, 0x00	; 0
    6058:	a0 40       	sbci	r26, 0x00	; 0
    605a:	e1 f7       	brne	.-8      	; 0x6054 <__stack+0x3e55>
    605c:	00 c0       	rjmp	.+0      	; 0x605e <__stack+0x3e5f>
    605e:	00 00       	nop
    6060:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    6062:	8c 2f       	mov	r24, r28
    6064:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    6068:	8f ef       	ldi	r24, 0xFF	; 255
    606a:	9f ef       	ldi	r25, 0xFF	; 255
    606c:	a8 e0       	ldi	r26, 0x08	; 8
    606e:	81 50       	subi	r24, 0x01	; 1
    6070:	90 40       	sbci	r25, 0x00	; 0
    6072:	a0 40       	sbci	r26, 0x00	; 0
    6074:	e1 f7       	brne	.-8      	; 0x606e <__stack+0x3e6f>
    6076:	00 c0       	rjmp	.+0      	; 0x6078 <__stack+0x3e79>
    6078:	00 00       	nop
    607a:	ce 5f       	subi	r28, 0xFE	; 254
		rotation_using_blackline_left();
		blackline();
		// pick the weight box from weight b
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    607c:	c8 33       	cpi	r28, 0x38	; 56
    607e:	89 f7       	brne	.-30     	; 0x6062 <__stack+0x3e63>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    6080:	83 e8       	ldi	r24, 0x83	; 131
    6082:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    6086:	8f ef       	ldi	r24, 0xFF	; 255
    6088:	9f ef       	ldi	r25, 0xFF	; 255
    608a:	a9 e5       	ldi	r26, 0x59	; 89
    608c:	81 50       	subi	r24, 0x01	; 1
    608e:	90 40       	sbci	r25, 0x00	; 0
    6090:	a0 40       	sbci	r26, 0x00	; 0
    6092:	e1 f7       	brne	.-8      	; 0x608c <__stack+0x3e8d>
    6094:	00 c0       	rjmp	.+0      	; 0x6096 <__stack+0x3e97>
    6096:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    6098:	88 e1       	ldi	r24, 0x18	; 24
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    60a0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    60a4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    60a8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);// to be caliberated
    60ac:	88 e1       	ldi	r24, 0x18	; 24
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    60b4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    60b8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the wweight box in conntainer
		drop_the_block();
    60bc:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		turn_right();
    60c0:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    60c4:	86 e9       	ldi	r24, 0x96	; 150
    60c6:	66 e9       	ldi	r22, 0x96	; 150
    60c8:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    60cc:	8f ef       	ldi	r24, 0xFF	; 255
    60ce:	9f e3       	ldi	r25, 0x3F	; 63
    60d0:	a2 e0       	ldi	r26, 0x02	; 2
    60d2:	81 50       	subi	r24, 0x01	; 1
    60d4:	90 40       	sbci	r25, 0x00	; 0
    60d6:	a0 40       	sbci	r26, 0x00	; 0
    60d8:	e1 f7       	brne	.-8      	; 0x60d2 <__stack+0x3ed3>
    60da:	00 c0       	rjmp	.+0      	; 0x60dc <__stack+0x3edd>
    60dc:	00 00       	nop
		_delay_ms(50);
		stop();
    60de:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    60e2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    60e6:	88 e0       	ldi	r24, 0x08	; 8
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    60ee:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the middle box
		servo_2(135);
    60f2:	87 e8       	ldi	r24, 0x87	; 135
    60f4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    60f8:	8f ef       	ldi	r24, 0xFF	; 255
    60fa:	9f ef       	ldi	r25, 0xFF	; 255
    60fc:	ac e2       	ldi	r26, 0x2C	; 44
    60fe:	81 50       	subi	r24, 0x01	; 1
    6100:	90 40       	sbci	r25, 0x00	; 0
    6102:	a0 40       	sbci	r26, 0x00	; 0
    6104:	e1 f7       	brne	.-8      	; 0x60fe <__stack+0x3eff>
    6106:	00 c0       	rjmp	.+0      	; 0x6108 <__stack+0x3f09>
    6108:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    610a:	80 e0       	ldi	r24, 0x00	; 0
    610c:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    6110:	8f ef       	ldi	r24, 0xFF	; 255
    6112:	9f ef       	ldi	r25, 0xFF	; 255
    6114:	ac e2       	ldi	r26, 0x2C	; 44
    6116:	81 50       	subi	r24, 0x01	; 1
    6118:	90 40       	sbci	r25, 0x00	; 0
    611a:	a0 40       	sbci	r26, 0x00	; 0
    611c:	e1 f7       	brne	.-8      	; 0x6116 <__stack+0x3f17>
    611e:	00 c0       	rjmp	.+0      	; 0x6120 <__stack+0x3f21>
    6120:	00 00       	nop
    6122:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    6124:	8c 2f       	mov	r24, r28
    6126:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    612a:	8f ef       	ldi	r24, 0xFF	; 255
    612c:	9f ef       	ldi	r25, 0xFF	; 255
    612e:	ac e2       	ldi	r26, 0x2C	; 44
    6130:	81 50       	subi	r24, 0x01	; 1
    6132:	90 40       	sbci	r25, 0x00	; 0
    6134:	a0 40       	sbci	r26, 0x00	; 0
    6136:	e1 f7       	brne	.-8      	; 0x6130 <__stack+0x3f31>
    6138:	00 c0       	rjmp	.+0      	; 0x613a <__stack+0x3f3b>
    613a:	00 00       	nop
    613c:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the middle box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    613e:	cd 32       	cpi	r28, 0x2D	; 45
    6140:	89 f7       	brne	.-30     	; 0x6124 <__stack+0x3f25>
    6142:	8f ef       	ldi	r24, 0xFF	; 255
    6144:	9f ef       	ldi	r25, 0xFF	; 255
    6146:	ac e2       	ldi	r26, 0x2C	; 44
    6148:	81 50       	subi	r24, 0x01	; 1
    614a:	90 40       	sbci	r25, 0x00	; 0
    614c:	a0 40       	sbci	r26, 0x00	; 0
    614e:	e1 f7       	brne	.-8      	; 0x6148 <__stack+0x3f49>
    6150:	00 c0       	rjmp	.+0      	; 0x6152 <__stack+0x3f53>
    6152:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    6154:	82 e7       	ldi	r24, 0x72	; 114
    6156:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    615a:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    615e:	86 e9       	ldi	r24, 0x96	; 150
    6160:	66 e9       	ldi	r22, 0x96	; 150
    6162:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    6166:	8f ef       	ldi	r24, 0xFF	; 255
    6168:	9f e3       	ldi	r25, 0x3F	; 63
    616a:	a2 e0       	ldi	r26, 0x02	; 2
    616c:	81 50       	subi	r24, 0x01	; 1
    616e:	90 40       	sbci	r25, 0x00	; 0
    6170:	a0 40       	sbci	r26, 0x00	; 0
    6172:	e1 f7       	brne	.-8      	; 0x616c <__stack+0x3f6d>
    6174:	00 c0       	rjmp	.+0      	; 0x6176 <__stack+0x3f77>
    6176:	00 00       	nop
		_delay_ms(50);
		stop();
    6178:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    617c:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    6180:	86 e9       	ldi	r24, 0x96	; 150
    6182:	66 e9       	ldi	r22, 0x96	; 150
    6184:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    6188:	8f ef       	ldi	r24, 0xFF	; 255
    618a:	9f e3       	ldi	r25, 0x3F	; 63
    618c:	a2 e0       	ldi	r26, 0x02	; 2
    618e:	81 50       	subi	r24, 0x01	; 1
    6190:	90 40       	sbci	r25, 0x00	; 0
    6192:	a0 40       	sbci	r26, 0x00	; 0
    6194:	e1 f7       	brne	.-8      	; 0x618e <__stack+0x3f8f>
    6196:	00 c0       	rjmp	.+0      	; 0x6198 <__stack+0x3f99>
    6198:	00 00       	nop
		_delay_ms(50);
		stop();
    619a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    619e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bring the arm in front of mid block
		//pick the mid block
		rotation_using_blackline_right();
    61a2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    61a6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    61aa:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		velocity(95,90);
    61ae:	8f e5       	ldi	r24, 0x5F	; 95
    61b0:	6a e5       	ldi	r22, 0x5A	; 90
    61b2:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    61b6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    61ba:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//bridge crossed succesfully
		rotation_using_blackline_right();
    61be:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    61c2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    61c6:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    61ca:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    61ce:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    61d2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//drop the color box
		drop_the_block();
    61d6:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_right();
    61da:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    61de:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    61e2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    61e6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    61ea:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    61ee:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    61f2:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    61f6:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// PICK THE WEIGHT BOX FROM WEIGHT B
		servo_2(135);
    61fa:	87 e8       	ldi	r24, 0x87	; 135
    61fc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    6200:	8f ef       	ldi	r24, 0xFF	; 255
    6202:	9f ef       	ldi	r25, 0xFF	; 255
    6204:	ac e2       	ldi	r26, 0x2C	; 44
    6206:	81 50       	subi	r24, 0x01	; 1
    6208:	90 40       	sbci	r25, 0x00	; 0
    620a:	a0 40       	sbci	r26, 0x00	; 0
    620c:	e1 f7       	brne	.-8      	; 0x6206 <__stack+0x4007>
    620e:	00 c0       	rjmp	.+0      	; 0x6210 <__stack+0x4011>
    6210:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    6212:	80 e0       	ldi	r24, 0x00	; 0
    6214:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    6218:	8f ef       	ldi	r24, 0xFF	; 255
    621a:	9f ef       	ldi	r25, 0xFF	; 255
    621c:	ac e2       	ldi	r26, 0x2C	; 44
    621e:	81 50       	subi	r24, 0x01	; 1
    6220:	90 40       	sbci	r25, 0x00	; 0
    6222:	a0 40       	sbci	r26, 0x00	; 0
    6224:	e1 f7       	brne	.-8      	; 0x621e <__stack+0x401f>
    6226:	00 c0       	rjmp	.+0      	; 0x6228 <__stack+0x4029>
    6228:	00 00       	nop
    622a:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    622c:	8c 2f       	mov	r24, r28
    622e:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    6232:	8f ef       	ldi	r24, 0xFF	; 255
    6234:	9f ef       	ldi	r25, 0xFF	; 255
    6236:	ac e2       	ldi	r26, 0x2C	; 44
    6238:	81 50       	subi	r24, 0x01	; 1
    623a:	90 40       	sbci	r25, 0x00	; 0
    623c:	a0 40       	sbci	r26, 0x00	; 0
    623e:	e1 f7       	brne	.-8      	; 0x6238 <__stack+0x4039>
    6240:	00 c0       	rjmp	.+0      	; 0x6242 <__stack+0x4043>
    6242:	00 00       	nop
    6244:	cb 5f       	subi	r28, 0xFB	; 251
		// PICK THE WEIGHT BOX FROM WEIGHT B
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    6246:	cd 32       	cpi	r28, 0x2D	; 45
    6248:	89 f7       	brne	.-30     	; 0x622c <__stack+0x402d>
    624a:	8f ef       	ldi	r24, 0xFF	; 255
    624c:	9f ef       	ldi	r25, 0xFF	; 255
    624e:	ac e2       	ldi	r26, 0x2C	; 44
    6250:	81 50       	subi	r24, 0x01	; 1
    6252:	90 40       	sbci	r25, 0x00	; 0
    6254:	a0 40       	sbci	r26, 0x00	; 0
    6256:	e1 f7       	brne	.-8      	; 0x6250 <__stack+0x4051>
    6258:	00 c0       	rjmp	.+0      	; 0x625a <__stack+0x405b>
    625a:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    625c:	82 e7       	ldi	r24, 0x72	; 114
    625e:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		rotation_using_blackline_right();
    6262:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    6266:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    626a:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    626e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    6272:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		////drop the weight block in container
		drop_the_block();
    6276:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    627a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    627e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//PICK THE WT BLOCK from WEIGHT A
		servo_2(135);
    6282:	87 e8       	ldi	r24, 0x87	; 135
    6284:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    6288:	8f ef       	ldi	r24, 0xFF	; 255
    628a:	9f ef       	ldi	r25, 0xFF	; 255
    628c:	ac e2       	ldi	r26, 0x2C	; 44
    628e:	81 50       	subi	r24, 0x01	; 1
    6290:	90 40       	sbci	r25, 0x00	; 0
    6292:	a0 40       	sbci	r26, 0x00	; 0
    6294:	e1 f7       	brne	.-8      	; 0x628e <__stack+0x408f>
    6296:	00 c0       	rjmp	.+0      	; 0x6298 <__stack+0x4099>
    6298:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    629a:	80 e0       	ldi	r24, 0x00	; 0
    629c:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    62a0:	8f ef       	ldi	r24, 0xFF	; 255
    62a2:	9f ef       	ldi	r25, 0xFF	; 255
    62a4:	ac e2       	ldi	r26, 0x2C	; 44
    62a6:	81 50       	subi	r24, 0x01	; 1
    62a8:	90 40       	sbci	r25, 0x00	; 0
    62aa:	a0 40       	sbci	r26, 0x00	; 0
    62ac:	e1 f7       	brne	.-8      	; 0x62a6 <__stack+0x40a7>
    62ae:	00 c0       	rjmp	.+0      	; 0x62b0 <__stack+0x40b1>
    62b0:	00 00       	nop
    62b2:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    62b4:	8c 2f       	mov	r24, r28
    62b6:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    62ba:	8f ef       	ldi	r24, 0xFF	; 255
    62bc:	9f ef       	ldi	r25, 0xFF	; 255
    62be:	ac e2       	ldi	r26, 0x2C	; 44
    62c0:	81 50       	subi	r24, 0x01	; 1
    62c2:	90 40       	sbci	r25, 0x00	; 0
    62c4:	a0 40       	sbci	r26, 0x00	; 0
    62c6:	e1 f7       	brne	.-8      	; 0x62c0 <__stack+0x40c1>
    62c8:	00 c0       	rjmp	.+0      	; 0x62ca <__stack+0x40cb>
    62ca:	00 00       	nop
    62cc:	cb 5f       	subi	r28, 0xFB	; 251
		//PICK THE WT BLOCK from WEIGHT A
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    62ce:	cd 32       	cpi	r28, 0x2D	; 45
    62d0:	89 f7       	brne	.-30     	; 0x62b4 <__stack+0x40b5>
    62d2:	8f ef       	ldi	r24, 0xFF	; 255
    62d4:	9f ef       	ldi	r25, 0xFF	; 255
    62d6:	ac e2       	ldi	r26, 0x2C	; 44
    62d8:	81 50       	subi	r24, 0x01	; 1
    62da:	90 40       	sbci	r25, 0x00	; 0
    62dc:	a0 40       	sbci	r26, 0x00	; 0
    62de:	e1 f7       	brne	.-8      	; 0x62d8 <__stack+0x40d9>
    62e0:	00 c0       	rjmp	.+0      	; 0x62e2 <__stack+0x40e3>
    62e2:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    62e4:	82 e7       	ldi	r24, 0x72	; 114
    62e6:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>

		rotation_using_blackline_right();
    62ea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    62ee:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    62f2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		//drop the box
		drop_the_block();
    62f6:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		rotation_using_blackline_left();
    62fa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    62fe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//pick the wt block
		servo_2(135);
    6302:	87 e8       	ldi	r24, 0x87	; 135
    6304:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    6308:	8f ef       	ldi	r24, 0xFF	; 255
    630a:	9f ef       	ldi	r25, 0xFF	; 255
    630c:	ac e2       	ldi	r26, 0x2C	; 44
    630e:	81 50       	subi	r24, 0x01	; 1
    6310:	90 40       	sbci	r25, 0x00	; 0
    6312:	a0 40       	sbci	r26, 0x00	; 0
    6314:	e1 f7       	brne	.-8      	; 0x630e <__stack+0x410f>
    6316:	00 c0       	rjmp	.+0      	; 0x6318 <__stack+0x4119>
    6318:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    631a:	80 e0       	ldi	r24, 0x00	; 0
    631c:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    6320:	8f ef       	ldi	r24, 0xFF	; 255
    6322:	9f ef       	ldi	r25, 0xFF	; 255
    6324:	ac e2       	ldi	r26, 0x2C	; 44
    6326:	81 50       	subi	r24, 0x01	; 1
    6328:	90 40       	sbci	r25, 0x00	; 0
    632a:	a0 40       	sbci	r26, 0x00	; 0
    632c:	e1 f7       	brne	.-8      	; 0x6326 <__stack+0x4127>
    632e:	00 c0       	rjmp	.+0      	; 0x6330 <__stack+0x4131>
    6330:	00 00       	nop
    6332:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    6334:	8c 2f       	mov	r24, r28
    6336:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    633a:	8f ef       	ldi	r24, 0xFF	; 255
    633c:	9f ef       	ldi	r25, 0xFF	; 255
    633e:	ac e2       	ldi	r26, 0x2C	; 44
    6340:	81 50       	subi	r24, 0x01	; 1
    6342:	90 40       	sbci	r25, 0x00	; 0
    6344:	a0 40       	sbci	r26, 0x00	; 0
    6346:	e1 f7       	brne	.-8      	; 0x6340 <__stack+0x4141>
    6348:	00 c0       	rjmp	.+0      	; 0x634a <__stack+0x414b>
    634a:	00 00       	nop
    634c:	cb 5f       	subi	r28, 0xFB	; 251
		//pick the wt block
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    634e:	cd 32       	cpi	r28, 0x2D	; 45
    6350:	89 f7       	brne	.-30     	; 0x6334 <__stack+0x4135>
    6352:	8f ef       	ldi	r24, 0xFF	; 255
    6354:	9f ef       	ldi	r25, 0xFF	; 255
    6356:	ac e2       	ldi	r26, 0x2C	; 44
    6358:	81 50       	subi	r24, 0x01	; 1
    635a:	90 40       	sbci	r25, 0x00	; 0
    635c:	a0 40       	sbci	r26, 0x00	; 0
    635e:	e1 f7       	brne	.-8      	; 0x6358 <__stack+0x4159>
    6360:	00 c0       	rjmp	.+0      	; 0x6362 <__stack+0x4163>
    6362:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    6364:	82 e7       	ldi	r24, 0x72	; 114
    6366:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>

		rotation_using_blackline_right();
    636a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    636e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_left();
    6372:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		//drop the wt lock
		rotation_using_blackline_right();
    6376:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    637a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward();
    637e:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		velocity(95,90);
    6382:	8f e5       	ldi	r24, 0x5F	; 95
    6384:	6a e5       	ldi	r22, 0x5A	; 90
    6386:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    638a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    638e:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		left_degrees(88);
    6392:	88 e5       	ldi	r24, 0x58	; 88
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,140);
    639a:	8e eb       	ldi	r24, 0xBE	; 190
    639c:	6c e8       	ldi	r22, 0x8C	; 140
    639e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    63a2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		//pick wt block from weight C
		servo_2(135);
    63a6:	87 e8       	ldi	r24, 0x87	; 135
    63a8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    63ac:	8f ef       	ldi	r24, 0xFF	; 255
    63ae:	9f ef       	ldi	r25, 0xFF	; 255
    63b0:	ac e2       	ldi	r26, 0x2C	; 44
    63b2:	81 50       	subi	r24, 0x01	; 1
    63b4:	90 40       	sbci	r25, 0x00	; 0
    63b6:	a0 40       	sbci	r26, 0x00	; 0
    63b8:	e1 f7       	brne	.-8      	; 0x63b2 <__stack+0x41b3>
    63ba:	00 c0       	rjmp	.+0      	; 0x63bc <__stack+0x41bd>
    63bc:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    63be:	80 e0       	ldi	r24, 0x00	; 0
    63c0:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    63c4:	8f ef       	ldi	r24, 0xFF	; 255
    63c6:	9f ef       	ldi	r25, 0xFF	; 255
    63c8:	ac e2       	ldi	r26, 0x2C	; 44
    63ca:	81 50       	subi	r24, 0x01	; 1
    63cc:	90 40       	sbci	r25, 0x00	; 0
    63ce:	a0 40       	sbci	r26, 0x00	; 0
    63d0:	e1 f7       	brne	.-8      	; 0x63ca <__stack+0x41cb>
    63d2:	00 c0       	rjmp	.+0      	; 0x63d4 <__stack+0x41d5>
    63d4:	00 00       	nop
    63d6:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    63d8:	8c 2f       	mov	r24, r28
    63da:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    63de:	8f ef       	ldi	r24, 0xFF	; 255
    63e0:	9f ef       	ldi	r25, 0xFF	; 255
    63e2:	ac e2       	ldi	r26, 0x2C	; 44
    63e4:	81 50       	subi	r24, 0x01	; 1
    63e6:	90 40       	sbci	r25, 0x00	; 0
    63e8:	a0 40       	sbci	r26, 0x00	; 0
    63ea:	e1 f7       	brne	.-8      	; 0x63e4 <__stack+0x41e5>
    63ec:	00 c0       	rjmp	.+0      	; 0x63ee <__stack+0x41ef>
    63ee:	00 00       	nop
    63f0:	cb 5f       	subi	r28, 0xFB	; 251
		//pick wt block from weight C
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    63f2:	cd 32       	cpi	r28, 0x2D	; 45
    63f4:	89 f7       	brne	.-30     	; 0x63d8 <__stack+0x41d9>
    63f6:	8f ef       	ldi	r24, 0xFF	; 255
    63f8:	9f ef       	ldi	r25, 0xFF	; 255
    63fa:	ac e2       	ldi	r26, 0x2C	; 44
    63fc:	81 50       	subi	r24, 0x01	; 1
    63fe:	90 40       	sbci	r25, 0x00	; 0
    6400:	a0 40       	sbci	r26, 0x00	; 0
    6402:	e1 f7       	brne	.-8      	; 0x63fc <__stack+0x41fd>
    6404:	00 c0       	rjmp	.+0      	; 0x6406 <__stack+0x4207>
    6406:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    6408:	82 e7       	ldi	r24, 0x72	; 114
    640a:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>

		rotation_using_blackline_left();
    640e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    6412:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		rotation_using_blackline_right();
    6416:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		blackline();
    641a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///3rd run for city area
		// CROSSING THE BRIDGE
		// NOW E AE IN CITY 1
		turn_left();
    641e:	0e 94 8c 06 	call	0xd18	; 0xd18 <turn_left>
		velocity(150,150);
    6422:	86 e9       	ldi	r24, 0x96	; 150
    6424:	66 e9       	ldi	r22, 0x96	; 150
    6426:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    642a:	8f ef       	ldi	r24, 0xFF	; 255
    642c:	9f e3       	ldi	r25, 0x3F	; 63
    642e:	a2 e0       	ldi	r26, 0x02	; 2
    6430:	81 50       	subi	r24, 0x01	; 1
    6432:	90 40       	sbci	r25, 0x00	; 0
    6434:	a0 40       	sbci	r26, 0x00	; 0
    6436:	e1 f7       	brne	.-8      	; 0x6430 <__stack+0x4231>
    6438:	00 c0       	rjmp	.+0      	; 0x643a <__stack+0x423b>
    643a:	00 00       	nop
		_delay_ms(50);
		stop();
    643c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    6440:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		velocity(190,180);
    6444:	8e eb       	ldi	r24, 0xBE	; 190
    6446:	64 eb       	ldi	r22, 0xB4	; 180
    6448:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(113);
    644c:	81 e7       	ldi	r24, 0x71	; 113
    644e:	90 e0       	ldi	r25, 0x00	; 0
    6450:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		stop();
    6454:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    6458:	8f ef       	ldi	r24, 0xFF	; 255
    645a:	9f ef       	ldi	r25, 0xFF	; 255
    645c:	ac e2       	ldi	r26, 0x2C	; 44
    645e:	81 50       	subi	r24, 0x01	; 1
    6460:	90 40       	sbci	r25, 0x00	; 0
    6462:	a0 40       	sbci	r26, 0x00	; 0
    6464:	e1 f7       	brne	.-8      	; 0x645e <__stack+0x425f>
    6466:	00 c0       	rjmp	.+0      	; 0x6468 <__stack+0x4269>
    6468:	00 00       	nop
		_delay_ms(1000);
		velocity(190,180);
    646a:	8e eb       	ldi	r24, 0xBE	; 190
    646c:	64 eb       	ldi	r22, 0xB4	; 180
    646e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		left_degrees(88);
    6472:	88 e5       	ldi	r24, 0x58	; 88
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	0e 94 3e 04 	call	0x87c	; 0x87c <left_degrees>
		velocity(190,180);
    647a:	8e eb       	ldi	r24, 0xBE	; 190
    647c:	64 eb       	ldi	r22, 0xB4	; 180
    647e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		stop();
    6482:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    6486:	8f ef       	ldi	r24, 0xFF	; 255
    6488:	9f e7       	ldi	r25, 0x7F	; 127
    648a:	a6 e1       	ldi	r26, 0x16	; 22
    648c:	81 50       	subi	r24, 0x01	; 1
    648e:	90 40       	sbci	r25, 0x00	; 0
    6490:	a0 40       	sbci	r26, 0x00	; 0
    6492:	e1 f7       	brne	.-8      	; 0x648c <__stack+0x428d>
    6494:	00 c0       	rjmp	.+0      	; 0x6496 <__stack+0x4297>
    6496:	00 00       	nop
		_delay_ms(500);
		velocity(182,180);//187
    6498:	86 eb       	ldi	r24, 0xB6	; 182
    649a:	64 eb       	ldi	r22, 0xB4	; 180
    649c:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		back_mm(83);//76
    64a0:	83 e5       	ldi	r24, 0x53	; 83
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	0e 94 9a 07 	call	0xf34	; 0xf34 <back_mm>
		stop();
    64a8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    64ac:	8f ef       	ldi	r24, 0xFF	; 255
    64ae:	9f e7       	ldi	r25, 0x7F	; 127
    64b0:	a6 e1       	ldi	r26, 0x16	; 22
    64b2:	81 50       	subi	r24, 0x01	; 1
    64b4:	90 40       	sbci	r25, 0x00	; 0
    64b6:	a0 40       	sbci	r26, 0x00	; 0
    64b8:	e1 f7       	brne	.-8      	; 0x64b2 <__stack+0x42b3>
    64ba:	00 c0       	rjmp	.+0      	; 0x64bc <__stack+0x42bd>
    64bc:	00 00       	nop
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
    64be:	8b e9       	ldi	r24, 0x9B	; 155
    64c0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    64c4:	8f ef       	ldi	r24, 0xFF	; 255
    64c6:	9f ef       	ldi	r25, 0xFF	; 255
    64c8:	ac e2       	ldi	r26, 0x2C	; 44
    64ca:	81 50       	subi	r24, 0x01	; 1
    64cc:	90 40       	sbci	r25, 0x00	; 0
    64ce:	a0 40       	sbci	r26, 0x00	; 0
    64d0:	e1 f7       	brne	.-8      	; 0x64ca <__stack+0x42cb>
    64d2:	00 c0       	rjmp	.+0      	; 0x64d4 <__stack+0x42d5>
    64d4:	00 00       	nop
    64d6:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    64d8:	8c 2f       	mov	r24, r28
    64da:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    64de:	8f ef       	ldi	r24, 0xFF	; 255
    64e0:	9f ef       	ldi	r25, 0xFF	; 255
    64e2:	a8 e0       	ldi	r26, 0x08	; 8
    64e4:	81 50       	subi	r24, 0x01	; 1
    64e6:	90 40       	sbci	r25, 0x00	; 0
    64e8:	a0 40       	sbci	r26, 0x00	; 0
    64ea:	e1 f7       	brne	.-8      	; 0x64e4 <__stack+0x42e5>
    64ec:	00 c0       	rjmp	.+0      	; 0x64ee <__stack+0x42ef>
    64ee:	00 00       	nop
    64f0:	ce 5f       	subi	r28, 0xFE	; 254
		stop();
		_delay_ms(500);
		// PICK THE WEIGTH BOX FROM WEIGHT A
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    64f2:	c8 33       	cpi	r28, 0x38	; 56
    64f4:	89 f7       	brne	.-30     	; 0x64d8 <__stack+0x42d9>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    64f6:	83 e8       	ldi	r24, 0x83	; 131
    64f8:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    64fc:	8f ef       	ldi	r24, 0xFF	; 255
    64fe:	9f ef       	ldi	r25, 0xFF	; 255
    6500:	a9 e5       	ldi	r26, 0x59	; 89
    6502:	81 50       	subi	r24, 0x01	; 1
    6504:	90 40       	sbci	r25, 0x00	; 0
    6506:	a0 40       	sbci	r26, 0x00	; 0
    6508:	e1 f7       	brne	.-8      	; 0x6502 <__stack+0x4303>
    650a:	00 c0       	rjmp	.+0      	; 0x650c <__stack+0x430d>
    650c:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    650e:	88 e1       	ldi	r24, 0x18	; 24
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    6516:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    651a:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    651e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
    6522:	8f ef       	ldi	r24, 0xFF	; 255
    6524:	9f e7       	ldi	r25, 0x7F	; 127
    6526:	a6 e1       	ldi	r26, 0x16	; 22
    6528:	81 50       	subi	r24, 0x01	; 1
    652a:	90 40       	sbci	r25, 0x00	; 0
    652c:	a0 40       	sbci	r26, 0x00	; 0
    652e:	e1 f7       	brne	.-8      	; 0x6528 <__stack+0x4329>
    6530:	00 c0       	rjmp	.+0      	; 0x6532 <__stack+0x4333>
    6532:	00 00       	nop
		_delay_ms(500);
		velocity(150,150);
    6534:	86 e9       	ldi	r24, 0x96	; 150
    6536:	66 e9       	ldi	r22, 0x96	; 150
    6538:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
		forward_mm(39);
    653c:	87 e2       	ldi	r24, 0x27	; 39
    653e:	90 e0       	ldi	r25, 0x00	; 0
    6540:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		blackline();
    6544:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(3);
    6548:	83 e0       	ldi	r24, 0x03	; 3
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    6550:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// DROP THE bOX IN CONTAINER OF CITY 1
		drop_the_block();
    6554:	0e 94 b0 08 	call	0x1160	; 0x1160 <drop_the_block>
		forward_mm(24);// to be caliberated
    6558:	88 e1       	ldi	r24, 0x18	; 24
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    6560:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    6564:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		// pick the weight box from weight b
		servo_2(155);
    6568:	8b e9       	ldi	r24, 0x9B	; 155
    656a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    656e:	8f ef       	ldi	r24, 0xFF	; 255
    6570:	9f ef       	ldi	r25, 0xFF	; 255
    6572:	ac e2       	ldi	r26, 0x2C	; 44
    6574:	81 50       	subi	r24, 0x01	; 1
    6576:	90 40       	sbci	r25, 0x00	; 0
    6578:	a0 40       	sbci	r26, 0x00	; 0
    657a:	e1 f7       	brne	.-8      	; 0x6574 <__stack+0x4375>
    657c:	00 c0       	rjmp	.+0      	; 0x657e <__stack+0x437f>
    657e:	00 00       	nop
    6580:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
		{


			servo_1(i);
    6582:	8c 2f       	mov	r24, r28
    6584:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    6588:	8f ef       	ldi	r24, 0xFF	; 255
    658a:	9f ef       	ldi	r25, 0xFF	; 255
    658c:	a8 e0       	ldi	r26, 0x08	; 8
    658e:	81 50       	subi	r24, 0x01	; 1
    6590:	90 40       	sbci	r25, 0x00	; 0
    6592:	a0 40       	sbci	r26, 0x00	; 0
    6594:	e1 f7       	brne	.-8      	; 0x658e <__stack+0x438f>
    6596:	00 c0       	rjmp	.+0      	; 0x6598 <__stack+0x4399>
    6598:	00 00       	nop
    659a:	ce 5f       	subi	r28, 0xFE	; 254
		rotation_using_blackline_left();
		blackline();
		// pick the weight box from weight b
		servo_2(155);
		_delay_ms(1000);
		for(int i=0;i<=54;i+=2)
    659c:	c8 33       	cpi	r28, 0x38	; 56
    659e:	89 f7       	brne	.-30     	; 0x6582 <__stack+0x4383>

			servo_1(i);
			_delay_ms(200);
		}
		//_delay_ms(2000);
		servo_3(131);
    65a0:	83 e8       	ldi	r24, 0x83	; 131
    65a2:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    65a6:	8f ef       	ldi	r24, 0xFF	; 255
    65a8:	9f ef       	ldi	r25, 0xFF	; 255
    65aa:	a9 e5       	ldi	r26, 0x59	; 89
    65ac:	81 50       	subi	r24, 0x01	; 1
    65ae:	90 40       	sbci	r25, 0x00	; 0
    65b0:	a0 40       	sbci	r26, 0x00	; 0
    65b2:	e1 f7       	brne	.-8      	; 0x65ac <__stack+0x43ad>
    65b4:	00 c0       	rjmp	.+0      	; 0x65b6 <__stack+0x43b7>
    65b6:	00 00       	nop
		_delay_ms(2000);
		forward_mm(24);
    65b8:	88 e1       	ldi	r24, 0x18	; 24
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    65c0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    65c4:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		stop();
    65c8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		forward_mm(24);// to be caliberated
    65cc:	88 e1       	ldi	r24, 0x18	; 24
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_left();
    65d4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <rotation_using_blackline_left>
		blackline();
    65d8:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		//.. drop the wweight box in conntainer
		turn_right();
    65dc:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    65e0:	86 e9       	ldi	r24, 0x96	; 150
    65e2:	66 e9       	ldi	r22, 0x96	; 150
    65e4:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    65e8:	8f ef       	ldi	r24, 0xFF	; 255
    65ea:	9f e3       	ldi	r25, 0x3F	; 63
    65ec:	a2 e0       	ldi	r26, 0x02	; 2
    65ee:	81 50       	subi	r24, 0x01	; 1
    65f0:	90 40       	sbci	r25, 0x00	; 0
    65f2:	a0 40       	sbci	r26, 0x00	; 0
    65f4:	e1 f7       	brne	.-8      	; 0x65ee <__stack+0x43ef>
    65f6:	00 c0       	rjmp	.+0      	; 0x65f8 <__stack+0x43f9>
    65f8:	00 00       	nop
		_delay_ms(50);
		stop();
    65fa:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    65fe:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		forward_mm(8);
    6602:	88 e0       	ldi	r24, 0x08	; 8
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	0e 94 8f 07 	call	0xf1e	; 0xf1e <forward_mm>
		rotation_using_blackline_right();
    660a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <rotation_using_blackline_right>
		// pick the bottom box
		servo_2(135);
    660e:	87 e8       	ldi	r24, 0x87	; 135
    6610:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <servo_2>
    6614:	8f ef       	ldi	r24, 0xFF	; 255
    6616:	9f ef       	ldi	r25, 0xFF	; 255
    6618:	ac e2       	ldi	r26, 0x2C	; 44
    661a:	81 50       	subi	r24, 0x01	; 1
    661c:	90 40       	sbci	r25, 0x00	; 0
    661e:	a0 40       	sbci	r26, 0x00	; 0
    6620:	e1 f7       	brne	.-8      	; 0x661a <__stack+0x441b>
    6622:	00 c0       	rjmp	.+0      	; 0x6624 <__stack+0x4425>
    6624:	00 00       	nop
		_delay_ms(1000);
		servo_3(0);
    6626:	80 e0       	ldi	r24, 0x00	; 0
    6628:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
    662c:	8f ef       	ldi	r24, 0xFF	; 255
    662e:	9f ef       	ldi	r25, 0xFF	; 255
    6630:	ac e2       	ldi	r26, 0x2C	; 44
    6632:	81 50       	subi	r24, 0x01	; 1
    6634:	90 40       	sbci	r25, 0x00	; 0
    6636:	a0 40       	sbci	r26, 0x00	; 0
    6638:	e1 f7       	brne	.-8      	; 0x6632 <__stack+0x4433>
    663a:	00 c0       	rjmp	.+0      	; 0x663c <__stack+0x443d>
    663c:	00 00       	nop
    663e:	c0 e0       	ldi	r28, 0x00	; 0
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
		{
			servo_1(i);
    6640:	8c 2f       	mov	r24, r28
    6642:	0e 94 c3 05 	call	0xb86	; 0xb86 <servo_1>
    6646:	8f ef       	ldi	r24, 0xFF	; 255
    6648:	9f ef       	ldi	r25, 0xFF	; 255
    664a:	ac e2       	ldi	r26, 0x2C	; 44
    664c:	81 50       	subi	r24, 0x01	; 1
    664e:	90 40       	sbci	r25, 0x00	; 0
    6650:	a0 40       	sbci	r26, 0x00	; 0
    6652:	e1 f7       	brne	.-8      	; 0x664c <__stack+0x444d>
    6654:	00 c0       	rjmp	.+0      	; 0x6656 <__stack+0x4457>
    6656:	00 00       	nop
    6658:	cb 5f       	subi	r28, 0xFB	; 251
		// pick the bottom box
		servo_2(135);
		_delay_ms(1000);
		servo_3(0);
		_delay_ms(1000);
		for(int i=0;i<=40;i+=5)
    665a:	cd 32       	cpi	r28, 0x2D	; 45
    665c:	89 f7       	brne	.-30     	; 0x6640 <__stack+0x4441>
    665e:	8f ef       	ldi	r24, 0xFF	; 255
    6660:	9f ef       	ldi	r25, 0xFF	; 255
    6662:	ac e2       	ldi	r26, 0x2C	; 44
    6664:	81 50       	subi	r24, 0x01	; 1
    6666:	90 40       	sbci	r25, 0x00	; 0
    6668:	a0 40       	sbci	r26, 0x00	; 0
    666a:	e1 f7       	brne	.-8      	; 0x6664 <__stack+0x4465>
    666c:	00 c0       	rjmp	.+0      	; 0x666e <__stack+0x446f>
    666e:	00 00       	nop
			_delay_ms(1000);


		}
		_delay_ms(1000);
		servo_3(114);
    6670:	82 e7       	ldi	r24, 0x72	; 114
    6672:	0e 94 f5 05 	call	0xbea	; 0xbea <servo_3>
		turn_right();
    6676:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    667a:	86 e9       	ldi	r24, 0x96	; 150
    667c:	66 e9       	ldi	r22, 0x96	; 150
    667e:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    6682:	8f ef       	ldi	r24, 0xFF	; 255
    6684:	9f e3       	ldi	r25, 0x3F	; 63
    6686:	a2 e0       	ldi	r26, 0x02	; 2
    6688:	81 50       	subi	r24, 0x01	; 1
    668a:	90 40       	sbci	r25, 0x00	; 0
    668c:	a0 40       	sbci	r26, 0x00	; 0
    668e:	e1 f7       	brne	.-8      	; 0x6688 <__stack+0x4489>
    6690:	00 c0       	rjmp	.+0      	; 0x6692 <__stack+0x4493>
    6692:	00 00       	nop
		_delay_ms(50);
		stop();
    6694:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		turn_right();
    6698:	0e 94 f6 06 	call	0xdec	; 0xdec <turn_right>
		velocity(150,150);
    669c:	86 e9       	ldi	r24, 0x96	; 150
    669e:	66 e9       	ldi	r22, 0x96	; 150
    66a0:	0e 94 c9 03 	call	0x792	; 0x792 <velocity>
    66a4:	8f ef       	ldi	r24, 0xFF	; 255
    66a6:	9f e3       	ldi	r25, 0x3F	; 63
    66a8:	a2 e0       	ldi	r26, 0x02	; 2
    66aa:	81 50       	subi	r24, 0x01	; 1
    66ac:	90 40       	sbci	r25, 0x00	; 0
    66ae:	a0 40       	sbci	r26, 0x00	; 0
    66b0:	e1 f7       	brne	.-8      	; 0x66aa <__stack+0x44ab>
    66b2:	00 c0       	rjmp	.+0      	; 0x66b4 <__stack+0x44b5>
    66b4:	00 00       	nop
		_delay_ms(50);
		stop();
    66b6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop>
		blackline();
    66ba:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
		///// CROSS THE BRIDGE AGAIN
		forward();
    66be:	0e 94 88 04 	call	0x910	; 0x910 <forward>
		blackline();
    66c2:	0e 94 23 06 	call	0xc46	; 0xc46 <blackline>
	}

}
	/////////////////////////"NOT IN FAVOUR" ENDS///////////////////////////////////////////////////
	
		}}}}	
    66c6:	80 e0       	ldi	r24, 0x00	; 0
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	cf 91       	pop	r28
    66cc:	08 95       	ret

000066ce <__subsf3>:
    66ce:	50 58       	subi	r21, 0x80	; 128

000066d0 <__addsf3>:
    66d0:	bb 27       	eor	r27, r27
    66d2:	aa 27       	eor	r26, r26
    66d4:	0e d0       	rcall	.+28     	; 0x66f2 <__addsf3x>
    66d6:	4d c1       	rjmp	.+666    	; 0x6972 <__fp_round>
    66d8:	3e d1       	rcall	.+636    	; 0x6956 <__fp_pscA>
    66da:	30 f0       	brcs	.+12     	; 0x66e8 <__addsf3+0x18>
    66dc:	43 d1       	rcall	.+646    	; 0x6964 <__fp_pscB>
    66de:	20 f0       	brcs	.+8      	; 0x66e8 <__addsf3+0x18>
    66e0:	31 f4       	brne	.+12     	; 0x66ee <__addsf3+0x1e>
    66e2:	9f 3f       	cpi	r25, 0xFF	; 255
    66e4:	11 f4       	brne	.+4      	; 0x66ea <__addsf3+0x1a>
    66e6:	1e f4       	brtc	.+6      	; 0x66ee <__addsf3+0x1e>
    66e8:	33 c1       	rjmp	.+614    	; 0x6950 <__fp_nan>
    66ea:	0e f4       	brtc	.+2      	; 0x66ee <__addsf3+0x1e>
    66ec:	e0 95       	com	r30
    66ee:	e7 fb       	bst	r30, 7
    66f0:	29 c1       	rjmp	.+594    	; 0x6944 <__fp_inf>

000066f2 <__addsf3x>:
    66f2:	e9 2f       	mov	r30, r25
    66f4:	4f d1       	rcall	.+670    	; 0x6994 <__fp_split3>
    66f6:	80 f3       	brcs	.-32     	; 0x66d8 <__addsf3+0x8>
    66f8:	ba 17       	cp	r27, r26
    66fa:	62 07       	cpc	r22, r18
    66fc:	73 07       	cpc	r23, r19
    66fe:	84 07       	cpc	r24, r20
    6700:	95 07       	cpc	r25, r21
    6702:	18 f0       	brcs	.+6      	; 0x670a <__addsf3x+0x18>
    6704:	71 f4       	brne	.+28     	; 0x6722 <__addsf3x+0x30>
    6706:	9e f5       	brtc	.+102    	; 0x676e <__addsf3x+0x7c>
    6708:	67 c1       	rjmp	.+718    	; 0x69d8 <__fp_zero>
    670a:	0e f4       	brtc	.+2      	; 0x670e <__addsf3x+0x1c>
    670c:	e0 95       	com	r30
    670e:	0b 2e       	mov	r0, r27
    6710:	ba 2f       	mov	r27, r26
    6712:	a0 2d       	mov	r26, r0
    6714:	0b 01       	movw	r0, r22
    6716:	b9 01       	movw	r22, r18
    6718:	90 01       	movw	r18, r0
    671a:	0c 01       	movw	r0, r24
    671c:	ca 01       	movw	r24, r20
    671e:	a0 01       	movw	r20, r0
    6720:	11 24       	eor	r1, r1
    6722:	ff 27       	eor	r31, r31
    6724:	59 1b       	sub	r21, r25
    6726:	99 f0       	breq	.+38     	; 0x674e <__addsf3x+0x5c>
    6728:	59 3f       	cpi	r21, 0xF9	; 249
    672a:	50 f4       	brcc	.+20     	; 0x6740 <__addsf3x+0x4e>
    672c:	50 3e       	cpi	r21, 0xE0	; 224
    672e:	68 f1       	brcs	.+90     	; 0x678a <__addsf3x+0x98>
    6730:	1a 16       	cp	r1, r26
    6732:	f0 40       	sbci	r31, 0x00	; 0
    6734:	a2 2f       	mov	r26, r18
    6736:	23 2f       	mov	r18, r19
    6738:	34 2f       	mov	r19, r20
    673a:	44 27       	eor	r20, r20
    673c:	58 5f       	subi	r21, 0xF8	; 248
    673e:	f3 cf       	rjmp	.-26     	; 0x6726 <__addsf3x+0x34>
    6740:	46 95       	lsr	r20
    6742:	37 95       	ror	r19
    6744:	27 95       	ror	r18
    6746:	a7 95       	ror	r26
    6748:	f0 40       	sbci	r31, 0x00	; 0
    674a:	53 95       	inc	r21
    674c:	c9 f7       	brne	.-14     	; 0x6740 <__addsf3x+0x4e>
    674e:	7e f4       	brtc	.+30     	; 0x676e <__addsf3x+0x7c>
    6750:	1f 16       	cp	r1, r31
    6752:	ba 0b       	sbc	r27, r26
    6754:	62 0b       	sbc	r22, r18
    6756:	73 0b       	sbc	r23, r19
    6758:	84 0b       	sbc	r24, r20
    675a:	ba f0       	brmi	.+46     	; 0x678a <__addsf3x+0x98>
    675c:	91 50       	subi	r25, 0x01	; 1
    675e:	a1 f0       	breq	.+40     	; 0x6788 <__addsf3x+0x96>
    6760:	ff 0f       	add	r31, r31
    6762:	bb 1f       	adc	r27, r27
    6764:	66 1f       	adc	r22, r22
    6766:	77 1f       	adc	r23, r23
    6768:	88 1f       	adc	r24, r24
    676a:	c2 f7       	brpl	.-16     	; 0x675c <__addsf3x+0x6a>
    676c:	0e c0       	rjmp	.+28     	; 0x678a <__addsf3x+0x98>
    676e:	ba 0f       	add	r27, r26
    6770:	62 1f       	adc	r22, r18
    6772:	73 1f       	adc	r23, r19
    6774:	84 1f       	adc	r24, r20
    6776:	48 f4       	brcc	.+18     	; 0x678a <__addsf3x+0x98>
    6778:	87 95       	ror	r24
    677a:	77 95       	ror	r23
    677c:	67 95       	ror	r22
    677e:	b7 95       	ror	r27
    6780:	f7 95       	ror	r31
    6782:	9e 3f       	cpi	r25, 0xFE	; 254
    6784:	08 f0       	brcs	.+2      	; 0x6788 <__addsf3x+0x96>
    6786:	b3 cf       	rjmp	.-154    	; 0x66ee <__addsf3+0x1e>
    6788:	93 95       	inc	r25
    678a:	88 0f       	add	r24, r24
    678c:	08 f0       	brcs	.+2      	; 0x6790 <__addsf3x+0x9e>
    678e:	99 27       	eor	r25, r25
    6790:	ee 0f       	add	r30, r30
    6792:	97 95       	ror	r25
    6794:	87 95       	ror	r24
    6796:	08 95       	ret

00006798 <__divsf3>:
    6798:	0c d0       	rcall	.+24     	; 0x67b2 <__divsf3x>
    679a:	eb c0       	rjmp	.+470    	; 0x6972 <__fp_round>
    679c:	e3 d0       	rcall	.+454    	; 0x6964 <__fp_pscB>
    679e:	40 f0       	brcs	.+16     	; 0x67b0 <__divsf3+0x18>
    67a0:	da d0       	rcall	.+436    	; 0x6956 <__fp_pscA>
    67a2:	30 f0       	brcs	.+12     	; 0x67b0 <__divsf3+0x18>
    67a4:	21 f4       	brne	.+8      	; 0x67ae <__divsf3+0x16>
    67a6:	5f 3f       	cpi	r21, 0xFF	; 255
    67a8:	19 f0       	breq	.+6      	; 0x67b0 <__divsf3+0x18>
    67aa:	cc c0       	rjmp	.+408    	; 0x6944 <__fp_inf>
    67ac:	51 11       	cpse	r21, r1
    67ae:	15 c1       	rjmp	.+554    	; 0x69da <__fp_szero>
    67b0:	cf c0       	rjmp	.+414    	; 0x6950 <__fp_nan>

000067b2 <__divsf3x>:
    67b2:	f0 d0       	rcall	.+480    	; 0x6994 <__fp_split3>
    67b4:	98 f3       	brcs	.-26     	; 0x679c <__divsf3+0x4>

000067b6 <__divsf3_pse>:
    67b6:	99 23       	and	r25, r25
    67b8:	c9 f3       	breq	.-14     	; 0x67ac <__divsf3+0x14>
    67ba:	55 23       	and	r21, r21
    67bc:	b1 f3       	breq	.-20     	; 0x67aa <__divsf3+0x12>
    67be:	95 1b       	sub	r25, r21
    67c0:	55 0b       	sbc	r21, r21
    67c2:	bb 27       	eor	r27, r27
    67c4:	aa 27       	eor	r26, r26
    67c6:	62 17       	cp	r22, r18
    67c8:	73 07       	cpc	r23, r19
    67ca:	84 07       	cpc	r24, r20
    67cc:	38 f0       	brcs	.+14     	; 0x67dc <__divsf3_pse+0x26>
    67ce:	9f 5f       	subi	r25, 0xFF	; 255
    67d0:	5f 4f       	sbci	r21, 0xFF	; 255
    67d2:	22 0f       	add	r18, r18
    67d4:	33 1f       	adc	r19, r19
    67d6:	44 1f       	adc	r20, r20
    67d8:	aa 1f       	adc	r26, r26
    67da:	a9 f3       	breq	.-22     	; 0x67c6 <__divsf3_pse+0x10>
    67dc:	33 d0       	rcall	.+102    	; 0x6844 <__divsf3_pse+0x8e>
    67de:	0e 2e       	mov	r0, r30
    67e0:	3a f0       	brmi	.+14     	; 0x67f0 <__divsf3_pse+0x3a>
    67e2:	e0 e8       	ldi	r30, 0x80	; 128
    67e4:	30 d0       	rcall	.+96     	; 0x6846 <__divsf3_pse+0x90>
    67e6:	91 50       	subi	r25, 0x01	; 1
    67e8:	50 40       	sbci	r21, 0x00	; 0
    67ea:	e6 95       	lsr	r30
    67ec:	00 1c       	adc	r0, r0
    67ee:	ca f7       	brpl	.-14     	; 0x67e2 <__divsf3_pse+0x2c>
    67f0:	29 d0       	rcall	.+82     	; 0x6844 <__divsf3_pse+0x8e>
    67f2:	fe 2f       	mov	r31, r30
    67f4:	27 d0       	rcall	.+78     	; 0x6844 <__divsf3_pse+0x8e>
    67f6:	66 0f       	add	r22, r22
    67f8:	77 1f       	adc	r23, r23
    67fa:	88 1f       	adc	r24, r24
    67fc:	bb 1f       	adc	r27, r27
    67fe:	26 17       	cp	r18, r22
    6800:	37 07       	cpc	r19, r23
    6802:	48 07       	cpc	r20, r24
    6804:	ab 07       	cpc	r26, r27
    6806:	b0 e8       	ldi	r27, 0x80	; 128
    6808:	09 f0       	breq	.+2      	; 0x680c <__divsf3_pse+0x56>
    680a:	bb 0b       	sbc	r27, r27
    680c:	80 2d       	mov	r24, r0
    680e:	bf 01       	movw	r22, r30
    6810:	ff 27       	eor	r31, r31
    6812:	93 58       	subi	r25, 0x83	; 131
    6814:	5f 4f       	sbci	r21, 0xFF	; 255
    6816:	2a f0       	brmi	.+10     	; 0x6822 <__divsf3_pse+0x6c>
    6818:	9e 3f       	cpi	r25, 0xFE	; 254
    681a:	51 05       	cpc	r21, r1
    681c:	68 f0       	brcs	.+26     	; 0x6838 <__divsf3_pse+0x82>
    681e:	92 c0       	rjmp	.+292    	; 0x6944 <__fp_inf>
    6820:	dc c0       	rjmp	.+440    	; 0x69da <__fp_szero>
    6822:	5f 3f       	cpi	r21, 0xFF	; 255
    6824:	ec f3       	brlt	.-6      	; 0x6820 <__divsf3_pse+0x6a>
    6826:	98 3e       	cpi	r25, 0xE8	; 232
    6828:	dc f3       	brlt	.-10     	; 0x6820 <__divsf3_pse+0x6a>
    682a:	86 95       	lsr	r24
    682c:	77 95       	ror	r23
    682e:	67 95       	ror	r22
    6830:	b7 95       	ror	r27
    6832:	f7 95       	ror	r31
    6834:	9f 5f       	subi	r25, 0xFF	; 255
    6836:	c9 f7       	brne	.-14     	; 0x682a <__divsf3_pse+0x74>
    6838:	88 0f       	add	r24, r24
    683a:	91 1d       	adc	r25, r1
    683c:	96 95       	lsr	r25
    683e:	87 95       	ror	r24
    6840:	97 f9       	bld	r25, 7
    6842:	08 95       	ret
    6844:	e1 e0       	ldi	r30, 0x01	; 1
    6846:	66 0f       	add	r22, r22
    6848:	77 1f       	adc	r23, r23
    684a:	88 1f       	adc	r24, r24
    684c:	bb 1f       	adc	r27, r27
    684e:	62 17       	cp	r22, r18
    6850:	73 07       	cpc	r23, r19
    6852:	84 07       	cpc	r24, r20
    6854:	ba 07       	cpc	r27, r26
    6856:	20 f0       	brcs	.+8      	; 0x6860 <__divsf3_pse+0xaa>
    6858:	62 1b       	sub	r22, r18
    685a:	73 0b       	sbc	r23, r19
    685c:	84 0b       	sbc	r24, r20
    685e:	ba 0b       	sbc	r27, r26
    6860:	ee 1f       	adc	r30, r30
    6862:	88 f7       	brcc	.-30     	; 0x6846 <__divsf3_pse+0x90>
    6864:	e0 95       	com	r30
    6866:	08 95       	ret

00006868 <__fixsfsi>:
    6868:	04 d0       	rcall	.+8      	; 0x6872 <__fixunssfsi>
    686a:	68 94       	set
    686c:	b1 11       	cpse	r27, r1
    686e:	b5 c0       	rjmp	.+362    	; 0x69da <__fp_szero>
    6870:	08 95       	ret

00006872 <__fixunssfsi>:
    6872:	98 d0       	rcall	.+304    	; 0x69a4 <__fp_splitA>
    6874:	88 f0       	brcs	.+34     	; 0x6898 <__fixunssfsi+0x26>
    6876:	9f 57       	subi	r25, 0x7F	; 127
    6878:	90 f0       	brcs	.+36     	; 0x689e <__fixunssfsi+0x2c>
    687a:	b9 2f       	mov	r27, r25
    687c:	99 27       	eor	r25, r25
    687e:	b7 51       	subi	r27, 0x17	; 23
    6880:	a0 f0       	brcs	.+40     	; 0x68aa <__fixunssfsi+0x38>
    6882:	d1 f0       	breq	.+52     	; 0x68b8 <__fixunssfsi+0x46>
    6884:	66 0f       	add	r22, r22
    6886:	77 1f       	adc	r23, r23
    6888:	88 1f       	adc	r24, r24
    688a:	99 1f       	adc	r25, r25
    688c:	1a f0       	brmi	.+6      	; 0x6894 <__fixunssfsi+0x22>
    688e:	ba 95       	dec	r27
    6890:	c9 f7       	brne	.-14     	; 0x6884 <__fixunssfsi+0x12>
    6892:	12 c0       	rjmp	.+36     	; 0x68b8 <__fixunssfsi+0x46>
    6894:	b1 30       	cpi	r27, 0x01	; 1
    6896:	81 f0       	breq	.+32     	; 0x68b8 <__fixunssfsi+0x46>
    6898:	9f d0       	rcall	.+318    	; 0x69d8 <__fp_zero>
    689a:	b1 e0       	ldi	r27, 0x01	; 1
    689c:	08 95       	ret
    689e:	9c c0       	rjmp	.+312    	; 0x69d8 <__fp_zero>
    68a0:	67 2f       	mov	r22, r23
    68a2:	78 2f       	mov	r23, r24
    68a4:	88 27       	eor	r24, r24
    68a6:	b8 5f       	subi	r27, 0xF8	; 248
    68a8:	39 f0       	breq	.+14     	; 0x68b8 <__fixunssfsi+0x46>
    68aa:	b9 3f       	cpi	r27, 0xF9	; 249
    68ac:	cc f3       	brlt	.-14     	; 0x68a0 <__fixunssfsi+0x2e>
    68ae:	86 95       	lsr	r24
    68b0:	77 95       	ror	r23
    68b2:	67 95       	ror	r22
    68b4:	b3 95       	inc	r27
    68b6:	d9 f7       	brne	.-10     	; 0x68ae <__fixunssfsi+0x3c>
    68b8:	3e f4       	brtc	.+14     	; 0x68c8 <__fixunssfsi+0x56>
    68ba:	90 95       	com	r25
    68bc:	80 95       	com	r24
    68be:	70 95       	com	r23
    68c0:	61 95       	neg	r22
    68c2:	7f 4f       	sbci	r23, 0xFF	; 255
    68c4:	8f 4f       	sbci	r24, 0xFF	; 255
    68c6:	9f 4f       	sbci	r25, 0xFF	; 255
    68c8:	08 95       	ret

000068ca <__floatunsisf>:
    68ca:	e8 94       	clt
    68cc:	09 c0       	rjmp	.+18     	; 0x68e0 <__floatsisf+0x12>

000068ce <__floatsisf>:
    68ce:	97 fb       	bst	r25, 7
    68d0:	3e f4       	brtc	.+14     	; 0x68e0 <__floatsisf+0x12>
    68d2:	90 95       	com	r25
    68d4:	80 95       	com	r24
    68d6:	70 95       	com	r23
    68d8:	61 95       	neg	r22
    68da:	7f 4f       	sbci	r23, 0xFF	; 255
    68dc:	8f 4f       	sbci	r24, 0xFF	; 255
    68de:	9f 4f       	sbci	r25, 0xFF	; 255
    68e0:	99 23       	and	r25, r25
    68e2:	a9 f0       	breq	.+42     	; 0x690e <__floatsisf+0x40>
    68e4:	f9 2f       	mov	r31, r25
    68e6:	96 e9       	ldi	r25, 0x96	; 150
    68e8:	bb 27       	eor	r27, r27
    68ea:	93 95       	inc	r25
    68ec:	f6 95       	lsr	r31
    68ee:	87 95       	ror	r24
    68f0:	77 95       	ror	r23
    68f2:	67 95       	ror	r22
    68f4:	b7 95       	ror	r27
    68f6:	f1 11       	cpse	r31, r1
    68f8:	f8 cf       	rjmp	.-16     	; 0x68ea <__floatsisf+0x1c>
    68fa:	fa f4       	brpl	.+62     	; 0x693a <__floatsisf+0x6c>
    68fc:	bb 0f       	add	r27, r27
    68fe:	11 f4       	brne	.+4      	; 0x6904 <__floatsisf+0x36>
    6900:	60 ff       	sbrs	r22, 0
    6902:	1b c0       	rjmp	.+54     	; 0x693a <__floatsisf+0x6c>
    6904:	6f 5f       	subi	r22, 0xFF	; 255
    6906:	7f 4f       	sbci	r23, 0xFF	; 255
    6908:	8f 4f       	sbci	r24, 0xFF	; 255
    690a:	9f 4f       	sbci	r25, 0xFF	; 255
    690c:	16 c0       	rjmp	.+44     	; 0x693a <__floatsisf+0x6c>
    690e:	88 23       	and	r24, r24
    6910:	11 f0       	breq	.+4      	; 0x6916 <__floatsisf+0x48>
    6912:	96 e9       	ldi	r25, 0x96	; 150
    6914:	11 c0       	rjmp	.+34     	; 0x6938 <__floatsisf+0x6a>
    6916:	77 23       	and	r23, r23
    6918:	21 f0       	breq	.+8      	; 0x6922 <__floatsisf+0x54>
    691a:	9e e8       	ldi	r25, 0x8E	; 142
    691c:	87 2f       	mov	r24, r23
    691e:	76 2f       	mov	r23, r22
    6920:	05 c0       	rjmp	.+10     	; 0x692c <__floatsisf+0x5e>
    6922:	66 23       	and	r22, r22
    6924:	71 f0       	breq	.+28     	; 0x6942 <__floatsisf+0x74>
    6926:	96 e8       	ldi	r25, 0x86	; 134
    6928:	86 2f       	mov	r24, r22
    692a:	70 e0       	ldi	r23, 0x00	; 0
    692c:	60 e0       	ldi	r22, 0x00	; 0
    692e:	2a f0       	brmi	.+10     	; 0x693a <__floatsisf+0x6c>
    6930:	9a 95       	dec	r25
    6932:	66 0f       	add	r22, r22
    6934:	77 1f       	adc	r23, r23
    6936:	88 1f       	adc	r24, r24
    6938:	da f7       	brpl	.-10     	; 0x6930 <__floatsisf+0x62>
    693a:	88 0f       	add	r24, r24
    693c:	96 95       	lsr	r25
    693e:	87 95       	ror	r24
    6940:	97 f9       	bld	r25, 7
    6942:	08 95       	ret

00006944 <__fp_inf>:
    6944:	97 f9       	bld	r25, 7
    6946:	9f 67       	ori	r25, 0x7F	; 127
    6948:	80 e8       	ldi	r24, 0x80	; 128
    694a:	70 e0       	ldi	r23, 0x00	; 0
    694c:	60 e0       	ldi	r22, 0x00	; 0
    694e:	08 95       	ret

00006950 <__fp_nan>:
    6950:	9f ef       	ldi	r25, 0xFF	; 255
    6952:	80 ec       	ldi	r24, 0xC0	; 192
    6954:	08 95       	ret

00006956 <__fp_pscA>:
    6956:	00 24       	eor	r0, r0
    6958:	0a 94       	dec	r0
    695a:	16 16       	cp	r1, r22
    695c:	17 06       	cpc	r1, r23
    695e:	18 06       	cpc	r1, r24
    6960:	09 06       	cpc	r0, r25
    6962:	08 95       	ret

00006964 <__fp_pscB>:
    6964:	00 24       	eor	r0, r0
    6966:	0a 94       	dec	r0
    6968:	12 16       	cp	r1, r18
    696a:	13 06       	cpc	r1, r19
    696c:	14 06       	cpc	r1, r20
    696e:	05 06       	cpc	r0, r21
    6970:	08 95       	ret

00006972 <__fp_round>:
    6972:	09 2e       	mov	r0, r25
    6974:	03 94       	inc	r0
    6976:	00 0c       	add	r0, r0
    6978:	11 f4       	brne	.+4      	; 0x697e <__fp_round+0xc>
    697a:	88 23       	and	r24, r24
    697c:	52 f0       	brmi	.+20     	; 0x6992 <__fp_round+0x20>
    697e:	bb 0f       	add	r27, r27
    6980:	40 f4       	brcc	.+16     	; 0x6992 <__fp_round+0x20>
    6982:	bf 2b       	or	r27, r31
    6984:	11 f4       	brne	.+4      	; 0x698a <__fp_round+0x18>
    6986:	60 ff       	sbrs	r22, 0
    6988:	04 c0       	rjmp	.+8      	; 0x6992 <__fp_round+0x20>
    698a:	6f 5f       	subi	r22, 0xFF	; 255
    698c:	7f 4f       	sbci	r23, 0xFF	; 255
    698e:	8f 4f       	sbci	r24, 0xFF	; 255
    6990:	9f 4f       	sbci	r25, 0xFF	; 255
    6992:	08 95       	ret

00006994 <__fp_split3>:
    6994:	57 fd       	sbrc	r21, 7
    6996:	90 58       	subi	r25, 0x80	; 128
    6998:	44 0f       	add	r20, r20
    699a:	55 1f       	adc	r21, r21
    699c:	59 f0       	breq	.+22     	; 0x69b4 <__fp_splitA+0x10>
    699e:	5f 3f       	cpi	r21, 0xFF	; 255
    69a0:	71 f0       	breq	.+28     	; 0x69be <__fp_splitA+0x1a>
    69a2:	47 95       	ror	r20

000069a4 <__fp_splitA>:
    69a4:	88 0f       	add	r24, r24
    69a6:	97 fb       	bst	r25, 7
    69a8:	99 1f       	adc	r25, r25
    69aa:	61 f0       	breq	.+24     	; 0x69c4 <__fp_splitA+0x20>
    69ac:	9f 3f       	cpi	r25, 0xFF	; 255
    69ae:	79 f0       	breq	.+30     	; 0x69ce <__fp_splitA+0x2a>
    69b0:	87 95       	ror	r24
    69b2:	08 95       	ret
    69b4:	12 16       	cp	r1, r18
    69b6:	13 06       	cpc	r1, r19
    69b8:	14 06       	cpc	r1, r20
    69ba:	55 1f       	adc	r21, r21
    69bc:	f2 cf       	rjmp	.-28     	; 0x69a2 <__fp_split3+0xe>
    69be:	46 95       	lsr	r20
    69c0:	f1 df       	rcall	.-30     	; 0x69a4 <__fp_splitA>
    69c2:	08 c0       	rjmp	.+16     	; 0x69d4 <__fp_splitA+0x30>
    69c4:	16 16       	cp	r1, r22
    69c6:	17 06       	cpc	r1, r23
    69c8:	18 06       	cpc	r1, r24
    69ca:	99 1f       	adc	r25, r25
    69cc:	f1 cf       	rjmp	.-30     	; 0x69b0 <__fp_splitA+0xc>
    69ce:	86 95       	lsr	r24
    69d0:	71 05       	cpc	r23, r1
    69d2:	61 05       	cpc	r22, r1
    69d4:	08 94       	sec
    69d6:	08 95       	ret

000069d8 <__fp_zero>:
    69d8:	e8 94       	clt

000069da <__fp_szero>:
    69da:	bb 27       	eor	r27, r27
    69dc:	66 27       	eor	r22, r22
    69de:	77 27       	eor	r23, r23
    69e0:	cb 01       	movw	r24, r22
    69e2:	97 f9       	bld	r25, 7
    69e4:	08 95       	ret

000069e6 <__mulsf3>:
    69e6:	0b d0       	rcall	.+22     	; 0x69fe <__mulsf3x>
    69e8:	c4 cf       	rjmp	.-120    	; 0x6972 <__fp_round>
    69ea:	b5 df       	rcall	.-150    	; 0x6956 <__fp_pscA>
    69ec:	28 f0       	brcs	.+10     	; 0x69f8 <__mulsf3+0x12>
    69ee:	ba df       	rcall	.-140    	; 0x6964 <__fp_pscB>
    69f0:	18 f0       	brcs	.+6      	; 0x69f8 <__mulsf3+0x12>
    69f2:	95 23       	and	r25, r21
    69f4:	09 f0       	breq	.+2      	; 0x69f8 <__mulsf3+0x12>
    69f6:	a6 cf       	rjmp	.-180    	; 0x6944 <__fp_inf>
    69f8:	ab cf       	rjmp	.-170    	; 0x6950 <__fp_nan>
    69fa:	11 24       	eor	r1, r1
    69fc:	ee cf       	rjmp	.-36     	; 0x69da <__fp_szero>

000069fe <__mulsf3x>:
    69fe:	ca df       	rcall	.-108    	; 0x6994 <__fp_split3>
    6a00:	a0 f3       	brcs	.-24     	; 0x69ea <__mulsf3+0x4>

00006a02 <__mulsf3_pse>:
    6a02:	95 9f       	mul	r25, r21
    6a04:	d1 f3       	breq	.-12     	; 0x69fa <__mulsf3+0x14>
    6a06:	95 0f       	add	r25, r21
    6a08:	50 e0       	ldi	r21, 0x00	; 0
    6a0a:	55 1f       	adc	r21, r21
    6a0c:	62 9f       	mul	r22, r18
    6a0e:	f0 01       	movw	r30, r0
    6a10:	72 9f       	mul	r23, r18
    6a12:	bb 27       	eor	r27, r27
    6a14:	f0 0d       	add	r31, r0
    6a16:	b1 1d       	adc	r27, r1
    6a18:	63 9f       	mul	r22, r19
    6a1a:	aa 27       	eor	r26, r26
    6a1c:	f0 0d       	add	r31, r0
    6a1e:	b1 1d       	adc	r27, r1
    6a20:	aa 1f       	adc	r26, r26
    6a22:	64 9f       	mul	r22, r20
    6a24:	66 27       	eor	r22, r22
    6a26:	b0 0d       	add	r27, r0
    6a28:	a1 1d       	adc	r26, r1
    6a2a:	66 1f       	adc	r22, r22
    6a2c:	82 9f       	mul	r24, r18
    6a2e:	22 27       	eor	r18, r18
    6a30:	b0 0d       	add	r27, r0
    6a32:	a1 1d       	adc	r26, r1
    6a34:	62 1f       	adc	r22, r18
    6a36:	73 9f       	mul	r23, r19
    6a38:	b0 0d       	add	r27, r0
    6a3a:	a1 1d       	adc	r26, r1
    6a3c:	62 1f       	adc	r22, r18
    6a3e:	83 9f       	mul	r24, r19
    6a40:	a0 0d       	add	r26, r0
    6a42:	61 1d       	adc	r22, r1
    6a44:	22 1f       	adc	r18, r18
    6a46:	74 9f       	mul	r23, r20
    6a48:	33 27       	eor	r19, r19
    6a4a:	a0 0d       	add	r26, r0
    6a4c:	61 1d       	adc	r22, r1
    6a4e:	23 1f       	adc	r18, r19
    6a50:	84 9f       	mul	r24, r20
    6a52:	60 0d       	add	r22, r0
    6a54:	21 1d       	adc	r18, r1
    6a56:	82 2f       	mov	r24, r18
    6a58:	76 2f       	mov	r23, r22
    6a5a:	6a 2f       	mov	r22, r26
    6a5c:	11 24       	eor	r1, r1
    6a5e:	9f 57       	subi	r25, 0x7F	; 127
    6a60:	50 40       	sbci	r21, 0x00	; 0
    6a62:	8a f0       	brmi	.+34     	; 0x6a86 <__mulsf3_pse+0x84>
    6a64:	e1 f0       	breq	.+56     	; 0x6a9e <__mulsf3_pse+0x9c>
    6a66:	88 23       	and	r24, r24
    6a68:	4a f0       	brmi	.+18     	; 0x6a7c <__mulsf3_pse+0x7a>
    6a6a:	ee 0f       	add	r30, r30
    6a6c:	ff 1f       	adc	r31, r31
    6a6e:	bb 1f       	adc	r27, r27
    6a70:	66 1f       	adc	r22, r22
    6a72:	77 1f       	adc	r23, r23
    6a74:	88 1f       	adc	r24, r24
    6a76:	91 50       	subi	r25, 0x01	; 1
    6a78:	50 40       	sbci	r21, 0x00	; 0
    6a7a:	a9 f7       	brne	.-22     	; 0x6a66 <__mulsf3_pse+0x64>
    6a7c:	9e 3f       	cpi	r25, 0xFE	; 254
    6a7e:	51 05       	cpc	r21, r1
    6a80:	70 f0       	brcs	.+28     	; 0x6a9e <__mulsf3_pse+0x9c>
    6a82:	60 cf       	rjmp	.-320    	; 0x6944 <__fp_inf>
    6a84:	aa cf       	rjmp	.-172    	; 0x69da <__fp_szero>
    6a86:	5f 3f       	cpi	r21, 0xFF	; 255
    6a88:	ec f3       	brlt	.-6      	; 0x6a84 <__mulsf3_pse+0x82>
    6a8a:	98 3e       	cpi	r25, 0xE8	; 232
    6a8c:	dc f3       	brlt	.-10     	; 0x6a84 <__mulsf3_pse+0x82>
    6a8e:	86 95       	lsr	r24
    6a90:	77 95       	ror	r23
    6a92:	67 95       	ror	r22
    6a94:	b7 95       	ror	r27
    6a96:	f7 95       	ror	r31
    6a98:	e7 95       	ror	r30
    6a9a:	9f 5f       	subi	r25, 0xFF	; 255
    6a9c:	c1 f7       	brne	.-16     	; 0x6a8e <__mulsf3_pse+0x8c>
    6a9e:	fe 2b       	or	r31, r30
    6aa0:	88 0f       	add	r24, r24
    6aa2:	91 1d       	adc	r25, r1
    6aa4:	96 95       	lsr	r25
    6aa6:	87 95       	ror	r24
    6aa8:	97 f9       	bld	r25, 7
    6aaa:	08 95       	ret

00006aac <pow>:
    6aac:	fa 01       	movw	r30, r20
    6aae:	ee 0f       	add	r30, r30
    6ab0:	ff 1f       	adc	r31, r31
    6ab2:	30 96       	adiw	r30, 0x00	; 0
    6ab4:	21 05       	cpc	r18, r1
    6ab6:	31 05       	cpc	r19, r1
    6ab8:	99 f1       	breq	.+102    	; 0x6b20 <pow+0x74>
    6aba:	61 15       	cp	r22, r1
    6abc:	71 05       	cpc	r23, r1
    6abe:	61 f4       	brne	.+24     	; 0x6ad8 <pow+0x2c>
    6ac0:	80 38       	cpi	r24, 0x80	; 128
    6ac2:	bf e3       	ldi	r27, 0x3F	; 63
    6ac4:	9b 07       	cpc	r25, r27
    6ac6:	49 f1       	breq	.+82     	; 0x6b1a <pow+0x6e>
    6ac8:	68 94       	set
    6aca:	90 38       	cpi	r25, 0x80	; 128
    6acc:	81 05       	cpc	r24, r1
    6ace:	61 f0       	breq	.+24     	; 0x6ae8 <pow+0x3c>
    6ad0:	80 38       	cpi	r24, 0x80	; 128
    6ad2:	bf ef       	ldi	r27, 0xFF	; 255
    6ad4:	9b 07       	cpc	r25, r27
    6ad6:	41 f0       	breq	.+16     	; 0x6ae8 <pow+0x3c>
    6ad8:	99 23       	and	r25, r25
    6ada:	42 f5       	brpl	.+80     	; 0x6b2c <pow+0x80>
    6adc:	ff 3f       	cpi	r31, 0xFF	; 255
    6ade:	e1 05       	cpc	r30, r1
    6ae0:	31 05       	cpc	r19, r1
    6ae2:	21 05       	cpc	r18, r1
    6ae4:	11 f1       	breq	.+68     	; 0x6b2a <pow+0x7e>
    6ae6:	e8 94       	clt
    6ae8:	08 94       	sec
    6aea:	e7 95       	ror	r30
    6aec:	d9 01       	movw	r26, r18
    6aee:	aa 23       	and	r26, r26
    6af0:	29 f4       	brne	.+10     	; 0x6afc <pow+0x50>
    6af2:	ab 2f       	mov	r26, r27
    6af4:	be 2f       	mov	r27, r30
    6af6:	f8 5f       	subi	r31, 0xF8	; 248
    6af8:	d0 f3       	brcs	.-12     	; 0x6aee <pow+0x42>
    6afa:	10 c0       	rjmp	.+32     	; 0x6b1c <pow+0x70>
    6afc:	ff 5f       	subi	r31, 0xFF	; 255
    6afe:	70 f4       	brcc	.+28     	; 0x6b1c <pow+0x70>
    6b00:	a6 95       	lsr	r26
    6b02:	e0 f7       	brcc	.-8      	; 0x6afc <pow+0x50>
    6b04:	f7 39       	cpi	r31, 0x97	; 151
    6b06:	50 f0       	brcs	.+20     	; 0x6b1c <pow+0x70>
    6b08:	19 f0       	breq	.+6      	; 0x6b10 <pow+0x64>
    6b0a:	ff 3a       	cpi	r31, 0xAF	; 175
    6b0c:	38 f4       	brcc	.+14     	; 0x6b1c <pow+0x70>
    6b0e:	9f 77       	andi	r25, 0x7F	; 127
    6b10:	9f 93       	push	r25
    6b12:	0c d0       	rcall	.+24     	; 0x6b2c <pow+0x80>
    6b14:	0f 90       	pop	r0
    6b16:	07 fc       	sbrc	r0, 7
    6b18:	90 58       	subi	r25, 0x80	; 128
    6b1a:	08 95       	ret
    6b1c:	3e f0       	brts	.+14     	; 0x6b2c <pow+0x80>
    6b1e:	18 cf       	rjmp	.-464    	; 0x6950 <__fp_nan>
    6b20:	60 e0       	ldi	r22, 0x00	; 0
    6b22:	70 e0       	ldi	r23, 0x00	; 0
    6b24:	80 e8       	ldi	r24, 0x80	; 128
    6b26:	9f e3       	ldi	r25, 0x3F	; 63
    6b28:	08 95       	ret
    6b2a:	4f e7       	ldi	r20, 0x7F	; 127
    6b2c:	9f 77       	andi	r25, 0x7F	; 127
    6b2e:	5f 93       	push	r21
    6b30:	4f 93       	push	r20
    6b32:	3f 93       	push	r19
    6b34:	2f 93       	push	r18
    6b36:	9e d0       	rcall	.+316    	; 0x6c74 <log>
    6b38:	2f 91       	pop	r18
    6b3a:	3f 91       	pop	r19
    6b3c:	4f 91       	pop	r20
    6b3e:	5f 91       	pop	r21
    6b40:	52 df       	rcall	.-348    	; 0x69e6 <__mulsf3>
    6b42:	05 c0       	rjmp	.+10     	; 0x6b4e <exp>
    6b44:	19 f4       	brne	.+6      	; 0x6b4c <pow+0xa0>
    6b46:	0e f0       	brts	.+2      	; 0x6b4a <pow+0x9e>
    6b48:	fd ce       	rjmp	.-518    	; 0x6944 <__fp_inf>
    6b4a:	46 cf       	rjmp	.-372    	; 0x69d8 <__fp_zero>
    6b4c:	01 cf       	rjmp	.-510    	; 0x6950 <__fp_nan>

00006b4e <exp>:
    6b4e:	2a df       	rcall	.-428    	; 0x69a4 <__fp_splitA>
    6b50:	c8 f3       	brcs	.-14     	; 0x6b44 <pow+0x98>
    6b52:	96 38       	cpi	r25, 0x86	; 134
    6b54:	c0 f7       	brcc	.-16     	; 0x6b46 <pow+0x9a>
    6b56:	07 f8       	bld	r0, 7
    6b58:	0f 92       	push	r0
    6b5a:	e8 94       	clt
    6b5c:	2b e3       	ldi	r18, 0x3B	; 59
    6b5e:	3a ea       	ldi	r19, 0xAA	; 170
    6b60:	48 eb       	ldi	r20, 0xB8	; 184
    6b62:	5f e7       	ldi	r21, 0x7F	; 127
    6b64:	4e df       	rcall	.-356    	; 0x6a02 <__mulsf3_pse>
    6b66:	0f 92       	push	r0
    6b68:	0f 92       	push	r0
    6b6a:	0f 92       	push	r0
    6b6c:	4d b7       	in	r20, 0x3d	; 61
    6b6e:	5e b7       	in	r21, 0x3e	; 62
    6b70:	0f 92       	push	r0
    6b72:	c0 d0       	rcall	.+384    	; 0x6cf4 <modf>
    6b74:	e4 ee       	ldi	r30, 0xE4	; 228
    6b76:	f0 e0       	ldi	r31, 0x00	; 0
    6b78:	16 d0       	rcall	.+44     	; 0x6ba6 <__fp_powser>
    6b7a:	4f 91       	pop	r20
    6b7c:	5f 91       	pop	r21
    6b7e:	ef 91       	pop	r30
    6b80:	ff 91       	pop	r31
    6b82:	e5 95       	asr	r30
    6b84:	ee 1f       	adc	r30, r30
    6b86:	ff 1f       	adc	r31, r31
    6b88:	49 f0       	breq	.+18     	; 0x6b9c <exp+0x4e>
    6b8a:	fe 57       	subi	r31, 0x7E	; 126
    6b8c:	e0 68       	ori	r30, 0x80	; 128
    6b8e:	44 27       	eor	r20, r20
    6b90:	ee 0f       	add	r30, r30
    6b92:	44 1f       	adc	r20, r20
    6b94:	fa 95       	dec	r31
    6b96:	e1 f7       	brne	.-8      	; 0x6b90 <exp+0x42>
    6b98:	41 95       	neg	r20
    6b9a:	55 0b       	sbc	r21, r21
    6b9c:	32 d0       	rcall	.+100    	; 0x6c02 <ldexp>
    6b9e:	0f 90       	pop	r0
    6ba0:	07 fe       	sbrs	r0, 7
    6ba2:	26 c0       	rjmp	.+76     	; 0x6bf0 <inverse>
    6ba4:	08 95       	ret

00006ba6 <__fp_powser>:
    6ba6:	df 93       	push	r29
    6ba8:	cf 93       	push	r28
    6baa:	1f 93       	push	r17
    6bac:	0f 93       	push	r16
    6bae:	ff 92       	push	r15
    6bb0:	ef 92       	push	r14
    6bb2:	df 92       	push	r13
    6bb4:	7b 01       	movw	r14, r22
    6bb6:	8c 01       	movw	r16, r24
    6bb8:	68 94       	set
    6bba:	05 c0       	rjmp	.+10     	; 0x6bc6 <__fp_powser+0x20>
    6bbc:	da 2e       	mov	r13, r26
    6bbe:	ef 01       	movw	r28, r30
    6bc0:	1e df       	rcall	.-452    	; 0x69fe <__mulsf3x>
    6bc2:	fe 01       	movw	r30, r28
    6bc4:	e8 94       	clt
    6bc6:	a5 91       	lpm	r26, Z+
    6bc8:	25 91       	lpm	r18, Z+
    6bca:	35 91       	lpm	r19, Z+
    6bcc:	45 91       	lpm	r20, Z+
    6bce:	55 91       	lpm	r21, Z+
    6bd0:	ae f3       	brts	.-22     	; 0x6bbc <__fp_powser+0x16>
    6bd2:	ef 01       	movw	r28, r30
    6bd4:	8e dd       	rcall	.-1252   	; 0x66f2 <__addsf3x>
    6bd6:	fe 01       	movw	r30, r28
    6bd8:	97 01       	movw	r18, r14
    6bda:	a8 01       	movw	r20, r16
    6bdc:	da 94       	dec	r13
    6bde:	79 f7       	brne	.-34     	; 0x6bbe <__fp_powser+0x18>
    6be0:	df 90       	pop	r13
    6be2:	ef 90       	pop	r14
    6be4:	ff 90       	pop	r15
    6be6:	0f 91       	pop	r16
    6be8:	1f 91       	pop	r17
    6bea:	cf 91       	pop	r28
    6bec:	df 91       	pop	r29
    6bee:	08 95       	ret

00006bf0 <inverse>:
    6bf0:	9b 01       	movw	r18, r22
    6bf2:	ac 01       	movw	r20, r24
    6bf4:	60 e0       	ldi	r22, 0x00	; 0
    6bf6:	70 e0       	ldi	r23, 0x00	; 0
    6bf8:	80 e8       	ldi	r24, 0x80	; 128
    6bfa:	9f e3       	ldi	r25, 0x3F	; 63
    6bfc:	cd cd       	rjmp	.-1126   	; 0x6798 <__divsf3>
    6bfe:	a2 ce       	rjmp	.-700    	; 0x6944 <__fp_inf>
    6c00:	ac c0       	rjmp	.+344    	; 0x6d5a <__fp_mpack>

00006c02 <ldexp>:
    6c02:	d0 de       	rcall	.-608    	; 0x69a4 <__fp_splitA>
    6c04:	e8 f3       	brcs	.-6      	; 0x6c00 <inverse+0x10>
    6c06:	99 23       	and	r25, r25
    6c08:	d9 f3       	breq	.-10     	; 0x6c00 <inverse+0x10>
    6c0a:	94 0f       	add	r25, r20
    6c0c:	51 1d       	adc	r21, r1
    6c0e:	bb f3       	brvs	.-18     	; 0x6bfe <inverse+0xe>
    6c10:	91 50       	subi	r25, 0x01	; 1
    6c12:	50 40       	sbci	r21, 0x00	; 0
    6c14:	94 f0       	brlt	.+36     	; 0x6c3a <ldexp+0x38>
    6c16:	59 f0       	breq	.+22     	; 0x6c2e <ldexp+0x2c>
    6c18:	88 23       	and	r24, r24
    6c1a:	32 f0       	brmi	.+12     	; 0x6c28 <ldexp+0x26>
    6c1c:	66 0f       	add	r22, r22
    6c1e:	77 1f       	adc	r23, r23
    6c20:	88 1f       	adc	r24, r24
    6c22:	91 50       	subi	r25, 0x01	; 1
    6c24:	50 40       	sbci	r21, 0x00	; 0
    6c26:	c1 f7       	brne	.-16     	; 0x6c18 <ldexp+0x16>
    6c28:	9e 3f       	cpi	r25, 0xFE	; 254
    6c2a:	51 05       	cpc	r21, r1
    6c2c:	44 f7       	brge	.-48     	; 0x6bfe <inverse+0xe>
    6c2e:	88 0f       	add	r24, r24
    6c30:	91 1d       	adc	r25, r1
    6c32:	96 95       	lsr	r25
    6c34:	87 95       	ror	r24
    6c36:	97 f9       	bld	r25, 7
    6c38:	08 95       	ret
    6c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    6c3c:	ac f0       	brlt	.+42     	; 0x6c68 <ldexp+0x66>
    6c3e:	98 3e       	cpi	r25, 0xE8	; 232
    6c40:	9c f0       	brlt	.+38     	; 0x6c68 <ldexp+0x66>
    6c42:	bb 27       	eor	r27, r27
    6c44:	86 95       	lsr	r24
    6c46:	77 95       	ror	r23
    6c48:	67 95       	ror	r22
    6c4a:	b7 95       	ror	r27
    6c4c:	08 f4       	brcc	.+2      	; 0x6c50 <ldexp+0x4e>
    6c4e:	b1 60       	ori	r27, 0x01	; 1
    6c50:	93 95       	inc	r25
    6c52:	c1 f7       	brne	.-16     	; 0x6c44 <ldexp+0x42>
    6c54:	bb 0f       	add	r27, r27
    6c56:	58 f7       	brcc	.-42     	; 0x6c2e <ldexp+0x2c>
    6c58:	11 f4       	brne	.+4      	; 0x6c5e <ldexp+0x5c>
    6c5a:	60 ff       	sbrs	r22, 0
    6c5c:	e8 cf       	rjmp	.-48     	; 0x6c2e <ldexp+0x2c>
    6c5e:	6f 5f       	subi	r22, 0xFF	; 255
    6c60:	7f 4f       	sbci	r23, 0xFF	; 255
    6c62:	8f 4f       	sbci	r24, 0xFF	; 255
    6c64:	9f 4f       	sbci	r25, 0xFF	; 255
    6c66:	e3 cf       	rjmp	.-58     	; 0x6c2e <ldexp+0x2c>
    6c68:	b8 ce       	rjmp	.-656    	; 0x69da <__fp_szero>
    6c6a:	0e f0       	brts	.+2      	; 0x6c6e <ldexp+0x6c>
    6c6c:	76 c0       	rjmp	.+236    	; 0x6d5a <__fp_mpack>
    6c6e:	70 ce       	rjmp	.-800    	; 0x6950 <__fp_nan>
    6c70:	68 94       	set
    6c72:	68 ce       	rjmp	.-816    	; 0x6944 <__fp_inf>

00006c74 <log>:
    6c74:	97 de       	rcall	.-722    	; 0x69a4 <__fp_splitA>
    6c76:	c8 f3       	brcs	.-14     	; 0x6c6a <ldexp+0x68>
    6c78:	99 23       	and	r25, r25
    6c7a:	d1 f3       	breq	.-12     	; 0x6c70 <ldexp+0x6e>
    6c7c:	c6 f3       	brts	.-16     	; 0x6c6e <ldexp+0x6c>
    6c7e:	df 93       	push	r29
    6c80:	cf 93       	push	r28
    6c82:	1f 93       	push	r17
    6c84:	0f 93       	push	r16
    6c86:	ff 92       	push	r15
    6c88:	c9 2f       	mov	r28, r25
    6c8a:	dd 27       	eor	r29, r29
    6c8c:	88 23       	and	r24, r24
    6c8e:	2a f0       	brmi	.+10     	; 0x6c9a <log+0x26>
    6c90:	21 97       	sbiw	r28, 0x01	; 1
    6c92:	66 0f       	add	r22, r22
    6c94:	77 1f       	adc	r23, r23
    6c96:	88 1f       	adc	r24, r24
    6c98:	da f7       	brpl	.-10     	; 0x6c90 <log+0x1c>
    6c9a:	20 e0       	ldi	r18, 0x00	; 0
    6c9c:	30 e0       	ldi	r19, 0x00	; 0
    6c9e:	40 e8       	ldi	r20, 0x80	; 128
    6ca0:	5f eb       	ldi	r21, 0xBF	; 191
    6ca2:	9f e3       	ldi	r25, 0x3F	; 63
    6ca4:	88 39       	cpi	r24, 0x98	; 152
    6ca6:	20 f0       	brcs	.+8      	; 0x6cb0 <log+0x3c>
    6ca8:	80 3e       	cpi	r24, 0xE0	; 224
    6caa:	30 f0       	brcs	.+12     	; 0x6cb8 <log+0x44>
    6cac:	21 96       	adiw	r28, 0x01	; 1
    6cae:	8f 77       	andi	r24, 0x7F	; 127
    6cb0:	0f dd       	rcall	.-1506   	; 0x66d0 <__addsf3>
    6cb2:	ec e0       	ldi	r30, 0x0C	; 12
    6cb4:	f1 e0       	ldi	r31, 0x01	; 1
    6cb6:	03 c0       	rjmp	.+6      	; 0x6cbe <log+0x4a>
    6cb8:	0b dd       	rcall	.-1514   	; 0x66d0 <__addsf3>
    6cba:	e9 e3       	ldi	r30, 0x39	; 57
    6cbc:	f1 e0       	ldi	r31, 0x01	; 1
    6cbe:	73 df       	rcall	.-282    	; 0x6ba6 <__fp_powser>
    6cc0:	8b 01       	movw	r16, r22
    6cc2:	be 01       	movw	r22, r28
    6cc4:	ec 01       	movw	r28, r24
    6cc6:	fb 2e       	mov	r15, r27
    6cc8:	6f 57       	subi	r22, 0x7F	; 127
    6cca:	71 09       	sbc	r23, r1
    6ccc:	75 95       	asr	r23
    6cce:	77 1f       	adc	r23, r23
    6cd0:	88 0b       	sbc	r24, r24
    6cd2:	99 0b       	sbc	r25, r25
    6cd4:	fc dd       	rcall	.-1032   	; 0x68ce <__floatsisf>
    6cd6:	28 e1       	ldi	r18, 0x18	; 24
    6cd8:	32 e7       	ldi	r19, 0x72	; 114
    6cda:	41 e3       	ldi	r20, 0x31	; 49
    6cdc:	5f e3       	ldi	r21, 0x3F	; 63
    6cde:	8f de       	rcall	.-738    	; 0x69fe <__mulsf3x>
    6ce0:	af 2d       	mov	r26, r15
    6ce2:	98 01       	movw	r18, r16
    6ce4:	ae 01       	movw	r20, r28
    6ce6:	ff 90       	pop	r15
    6ce8:	0f 91       	pop	r16
    6cea:	1f 91       	pop	r17
    6cec:	cf 91       	pop	r28
    6cee:	df 91       	pop	r29
    6cf0:	00 dd       	rcall	.-1536   	; 0x66f2 <__addsf3x>
    6cf2:	3f ce       	rjmp	.-898    	; 0x6972 <__fp_round>

00006cf4 <modf>:
    6cf4:	fa 01       	movw	r30, r20
    6cf6:	dc 01       	movw	r26, r24
    6cf8:	aa 0f       	add	r26, r26
    6cfa:	bb 1f       	adc	r27, r27
    6cfc:	9b 01       	movw	r18, r22
    6cfe:	ac 01       	movw	r20, r24
    6d00:	bf 57       	subi	r27, 0x7F	; 127
    6d02:	28 f4       	brcc	.+10     	; 0x6d0e <modf+0x1a>
    6d04:	22 27       	eor	r18, r18
    6d06:	33 27       	eor	r19, r19
    6d08:	44 27       	eor	r20, r20
    6d0a:	50 78       	andi	r21, 0x80	; 128
    6d0c:	1f c0       	rjmp	.+62     	; 0x6d4c <modf+0x58>
    6d0e:	b7 51       	subi	r27, 0x17	; 23
    6d10:	88 f4       	brcc	.+34     	; 0x6d34 <modf+0x40>
    6d12:	ab 2f       	mov	r26, r27
    6d14:	00 24       	eor	r0, r0
    6d16:	46 95       	lsr	r20
    6d18:	37 95       	ror	r19
    6d1a:	27 95       	ror	r18
    6d1c:	01 1c       	adc	r0, r1
    6d1e:	a3 95       	inc	r26
    6d20:	d2 f3       	brmi	.-12     	; 0x6d16 <modf+0x22>
    6d22:	00 20       	and	r0, r0
    6d24:	69 f0       	breq	.+26     	; 0x6d40 <modf+0x4c>
    6d26:	22 0f       	add	r18, r18
    6d28:	33 1f       	adc	r19, r19
    6d2a:	44 1f       	adc	r20, r20
    6d2c:	b3 95       	inc	r27
    6d2e:	da f3       	brmi	.-10     	; 0x6d26 <modf+0x32>
    6d30:	0d d0       	rcall	.+26     	; 0x6d4c <modf+0x58>
    6d32:	cd cc       	rjmp	.-1638   	; 0x66ce <__subsf3>
    6d34:	61 30       	cpi	r22, 0x01	; 1
    6d36:	71 05       	cpc	r23, r1
    6d38:	a0 e8       	ldi	r26, 0x80	; 128
    6d3a:	8a 07       	cpc	r24, r26
    6d3c:	b9 46       	sbci	r27, 0x69	; 105
    6d3e:	30 f4       	brcc	.+12     	; 0x6d4c <modf+0x58>
    6d40:	9b 01       	movw	r18, r22
    6d42:	ac 01       	movw	r20, r24
    6d44:	66 27       	eor	r22, r22
    6d46:	77 27       	eor	r23, r23
    6d48:	88 27       	eor	r24, r24
    6d4a:	90 78       	andi	r25, 0x80	; 128
    6d4c:	30 96       	adiw	r30, 0x00	; 0
    6d4e:	21 f0       	breq	.+8      	; 0x6d58 <modf+0x64>
    6d50:	20 83       	st	Z, r18
    6d52:	31 83       	std	Z+1, r19	; 0x01
    6d54:	42 83       	std	Z+2, r20	; 0x02
    6d56:	53 83       	std	Z+3, r21	; 0x03
    6d58:	08 95       	ret

00006d5a <__fp_mpack>:
    6d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    6d5c:	31 f0       	breq	.+12     	; 0x6d6a <__fp_mpack_finite+0xc>

00006d5e <__fp_mpack_finite>:
    6d5e:	91 50       	subi	r25, 0x01	; 1
    6d60:	20 f4       	brcc	.+8      	; 0x6d6a <__fp_mpack_finite+0xc>
    6d62:	87 95       	ror	r24
    6d64:	77 95       	ror	r23
    6d66:	67 95       	ror	r22
    6d68:	b7 95       	ror	r27
    6d6a:	88 0f       	add	r24, r24
    6d6c:	91 1d       	adc	r25, r1
    6d6e:	96 95       	lsr	r25
    6d70:	87 95       	ror	r24
    6d72:	97 f9       	bld	r25, 7
    6d74:	08 95       	ret

00006d76 <__udivmodhi4>:
    6d76:	aa 1b       	sub	r26, r26
    6d78:	bb 1b       	sub	r27, r27
    6d7a:	51 e1       	ldi	r21, 0x11	; 17
    6d7c:	07 c0       	rjmp	.+14     	; 0x6d8c <__udivmodhi4_ep>

00006d7e <__udivmodhi4_loop>:
    6d7e:	aa 1f       	adc	r26, r26
    6d80:	bb 1f       	adc	r27, r27
    6d82:	a6 17       	cp	r26, r22
    6d84:	b7 07       	cpc	r27, r23
    6d86:	10 f0       	brcs	.+4      	; 0x6d8c <__udivmodhi4_ep>
    6d88:	a6 1b       	sub	r26, r22
    6d8a:	b7 0b       	sbc	r27, r23

00006d8c <__udivmodhi4_ep>:
    6d8c:	88 1f       	adc	r24, r24
    6d8e:	99 1f       	adc	r25, r25
    6d90:	5a 95       	dec	r21
    6d92:	a9 f7       	brne	.-22     	; 0x6d7e <__udivmodhi4_loop>
    6d94:	80 95       	com	r24
    6d96:	90 95       	com	r25
    6d98:	bc 01       	movw	r22, r24
    6d9a:	cd 01       	movw	r24, r26
    6d9c:	08 95       	ret

00006d9e <_exit>:
    6d9e:	f8 94       	cli

00006da0 <__stop_program>:
    6da0:	ff cf       	rjmp	.-2      	; 0x6da0 <__stop_program>
